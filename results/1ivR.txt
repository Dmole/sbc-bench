Distributor ID:	Debian
Description:	Debian GNU/Linux 9.5 (stretch)
Release:	9.5
Codename:	stretch
Architecture:	arm64

Uptime: 11:30:40 up 3 min,  1 user,  load average: 0.57, 0.58, 0.28

Linux 4.4.132-1075-rockchip-ayufan-ga83beded8524 (rockpro64) 	07/27/18 	_aarch64_	(6 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           0.90    0.00    0.77    5.16    0.00   93.17

Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
mmcblk0          21.83       815.25        63.75     180161      14088

              total        used        free      shared  buff/cache   available
Mem:           3.8G         56M        3.5G         13M        262M        3.7G
Swap:            0B          0B          0B

Filename				Type		Size	Used	Priority

##########################################################################

Executing tinymembench on a little core:

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   1297.8 MB/s (4.3%)
 C copy backwards (32 byte blocks)                    :   1309.7 MB/s (2.9%)
 C copy backwards (64 byte blocks)                    :   1330.6 MB/s (0.8%)
 C copy                                               :   1369.2 MB/s (0.6%)
 C copy prefetched (32 bytes step)                    :   1006.4 MB/s
 C copy prefetched (64 bytes step)                    :   1138.2 MB/s
 C 2-pass copy                                        :   1206.5 MB/s (0.9%)
 C 2-pass copy prefetched (32 bytes step)             :    846.1 MB/s
 C 2-pass copy prefetched (64 bytes step)             :    748.3 MB/s (0.3%)
 C fill                                               :   4732.7 MB/s (0.3%)
 C fill (shuffle within 16 byte blocks)               :   4732.8 MB/s (0.3%)
 C fill (shuffle within 32 byte blocks)               :   4726.7 MB/s
 C fill (shuffle within 64 byte blocks)               :   4728.6 MB/s (0.2%)
 ---
 standard memcpy                                      :   1386.7 MB/s (1.4%)
 standard memset                                      :   4731.2 MB/s (0.8%)
 ---
 NEON LDP/STP copy                                    :   1425.4 MB/s (0.3%)
 NEON LDP/STP copy pldl2strm (32 bytes step)          :    938.2 MB/s (0.6%)
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   1170.1 MB/s
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   1506.2 MB/s
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   1505.9 MB/s
 NEON LD1/ST1 copy                                    :   1402.8 MB/s
 NEON STP fill                                        :   4732.8 MB/s
 NEON STNP fill                                       :   2133.0 MB/s (1.5%)
 ARM LDP/STP copy                                     :   1419.6 MB/s (0.5%)
 ARM STP fill                                         :   4732.4 MB/s
 ARM STNP fill                                        :   2086.5 MB/s (1.0%)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :    185.2 MB/s
 NEON LDP/STP 2-pass copy (from framebuffer)          :    174.2 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :     46.5 MB/s
 NEON LD1/ST1 2-pass copy (from framebuffer)          :     45.7 MB/s
 ARM LDP/STP copy (from framebuffer)                  :     93.0 MB/s
 ARM LDP/STP 2-pass copy (from framebuffer)           :     90.6 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.1 ns          /     0.1 ns 
     65536 :    4.9 ns          /     8.2 ns 
    131072 :    7.5 ns          /    11.3 ns 
    262144 :    8.8 ns          /    12.7 ns 
    524288 :   16.8 ns          /    23.8 ns 
   1048576 :  109.6 ns          /   166.1 ns 
   2097152 :  157.9 ns          /   207.4 ns 
   4194304 :  183.1 ns          /   226.7 ns 
   8388608 :  196.2 ns          /   235.6 ns 
  16777216 :  204.4 ns          /   242.9 ns 
  33554432 :  209.7 ns          /   246.2 ns 
  67108864 :  213.9 ns          /   249.0 ns 

Executing tinymembench on a big core:

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   2794.5 MB/s
 C copy backwards (32 byte blocks)                    :   2794.8 MB/s
 C copy backwards (64 byte blocks)                    :   2634.5 MB/s
 C copy                                               :   2668.3 MB/s
 C copy prefetched (32 bytes step)                    :   2647.9 MB/s (0.3%)
 C copy prefetched (64 bytes step)                    :   2640.6 MB/s
 C 2-pass copy                                        :   2494.4 MB/s
 C 2-pass copy prefetched (32 bytes step)             :   2411.8 MB/s
 C 2-pass copy prefetched (64 bytes step)             :   2414.4 MB/s (0.1%)
 C fill                                               :   4848.7 MB/s (0.4%)
 C fill (shuffle within 16 byte blocks)               :   4848.0 MB/s
 C fill (shuffle within 32 byte blocks)               :   4850.1 MB/s
 C fill (shuffle within 64 byte blocks)               :   4849.9 MB/s (0.5%)
 ---
 standard memcpy                                      :   2790.1 MB/s
 standard memset                                      :   4850.7 MB/s (0.4%)
 ---
 NEON LDP/STP copy                                    :   2771.7 MB/s
 NEON LDP/STP copy pldl2strm (32 bytes step)          :   2787.3 MB/s (0.3%)
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   2775.1 MB/s
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   2718.4 MB/s
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   2714.6 MB/s
 NEON LD1/ST1 copy                                    :   2782.5 MB/s (0.1%)
 NEON STP fill                                        :   4849.4 MB/s (0.4%)
 NEON STNP fill                                       :   4811.5 MB/s
 ARM LDP/STP copy                                     :   2777.3 MB/s
 ARM STP fill                                         :   4838.9 MB/s (0.5%)
 ARM STNP fill                                        :   4811.8 MB/s (0.1%)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :    605.9 MB/s (0.2%)
 NEON LDP/STP 2-pass copy (from framebuffer)          :    559.1 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :    664.5 MB/s
 NEON LD1/ST1 2-pass copy (from framebuffer)          :    608.3 MB/s
 ARM LDP/STP copy (from framebuffer)                  :    447.3 MB/s
 ARM LDP/STP 2-pass copy (from framebuffer)           :    431.1 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    4.5 ns          /     7.2 ns 
    131072 :    6.8 ns          /     9.7 ns 
    262144 :    9.8 ns          /    12.8 ns 
    524288 :   11.4 ns          /    14.7 ns 
   1048576 :   16.3 ns          /    23.1 ns 
   2097152 :  114.2 ns          /   176.2 ns 
   4194304 :  162.7 ns          /   222.3 ns 
   8388608 :  191.4 ns          /   245.0 ns 
  16777216 :  206.5 ns          /   255.2 ns 
  33554432 :  214.0 ns          /   261.0 ns 
  67108864 :  222.2 ns          /   275.3 ns 

##########################################################################

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq:  1404  1406  1406  1407  1407  1406  1407  1407  1406

RAM size:    3876 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:        686   100    668    668  |      15116   100   1289   1289
23:        662   100    675    675  |      14807   100   1281   1281
24:        641   100    689    689  |      14454   100   1269   1269
25:        614   100    701    701  |      13901   100   1237   1237
----------------------------------  | ------------------------------
Avr:             100    683    683  |              100   1269   1269
Tot:             100    976    976

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq:  1792  1793  1793  1793  1793  1793  1793  1793  1793

RAM size:    3876 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       1397   100   1360   1360  |      21512   100   1835   1835
23:       1319   100   1345   1345  |      21034   100   1820   1820
24:       1256   100   1351   1351  |      20555   100   1805   1804
25:       1200   100   1370   1370  |      19908   100   1772   1772
----------------------------------  | ------------------------------
Avr:             100   1357   1356  |              100   1808   1808
Tot:             100   1582   1582

##########################################################################

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq:  1791  1793  1793  1793  1793  1793  1793  1793  1793

RAM size:    3876 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       4422   490    878   4302  |      94701   529   1525   8076
23:       4255   510    851   4336  |      92362   530   1508   7992
24:       4041   519    837   4346  |      90099   530   1492   7908
25:       3909   535    835   4464  |      86934   530   1461   7737
----------------------------------  | ------------------------------
Avr:             513    850   4362  |              530   1496   7928
Tot:             522   1173   6145

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq:  1792  1791  1793  1793  1793  1793  1793  1793  1793

RAM size:    3876 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       4374   484    879   4256  |      94828   529   1529   8087
23:       4234   509    847   4314  |      92225   529   1510   7980
24:       4091   520    845   4399  |      89488   526   1493   7855
25:       3871   526    841   4420  |      86686   528   1461   7715
----------------------------------  | ------------------------------
Avr:             510    853   4347  |              528   1498   7909
Tot:             519   1175   6128

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq:  1790  1793  1793  1793  1793  1793  1793  1793  1793

RAM size:    3876 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       4287   470    888   4171  |      94872   530   1527   8091
23:       4172   483    880   4251  |      92630   530   1511   8015
24:       4195   529    853   4511  |      90049   530   1491   7904
25:       3925   530    846   4482  |      87109   530   1461   7752
----------------------------------  | ------------------------------
Avr:             503    867   4354  |              530   1498   7941
Tot:             517   1182   6147

Compression: 4362,4347,4354
Decompression: 7928,7909,7941
Total: 6145,6128,6147

##########################################################################

OpenSSL 1.1.0f  25 May 2017
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes
aes-128-cbc      96835.91k   305319.74k   640836.95k   917656.58k  1048270.17k  1057057.45k
aes-128-cbc     236781.75k   618926.70k  1045335.98k  1246555.82k  1344413.70k  1348233.90k
aes-192-cbc      92529.29k   274402.60k   528865.45k   711444.48k   789943.64k   796076.71k
aes-192-cbc     288213.20k   721784.36k   950780.16k  1123790.51k  1179781.80k  1186430.98k
aes-256-cbc      90296.23k   256090.50k   464470.70k   598528.68k   652219.73k   656769.02k
aes-256-cbc     280249.63k   640625.47k   891108.78k   970903.89k  1017550.17k  1016053.76k

##########################################################################

System health while running tinymembench:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
11:30:41: 1800/1416MHz  0.57   6%   0%   0%   0%   5%   0%  35.0°C
11:31:41: 1800/1416MHz  0.86  17%   0%  13%   0%   3%   0%  33.9°C
11:32:41: 1800/1416MHz  0.95  16%   0%  16%   0%   0%   0%  33.3°C
11:33:41: 1800/1416MHz  0.98  16%   0%  16%   0%   0%   0%  32.8°C
11:34:41: 1800/1416MHz  1.00  16%   0%  16%   0%   0%   0%  33.3°C
11:35:41: 1800/1416MHz  1.00  16%   0%  16%   0%   0%   0%  32.8°C
11:36:41: 1800/1416MHz  1.00  16%   0%  16%   0%   0%   0%  32.8°C
11:37:41: 1800/1416MHz  1.00  16%   0%  16%   0%   0%   0%  32.8°C
11:38:41: 1800/1416MHz  1.00  16%   0%  16%   0%   0%   0%  38.1°C
11:39:41: 1800/1416MHz  1.00  16%   0%  16%   0%   0%   0%  39.4°C
11:40:41: 1800/1416MHz  1.00  16%   0%  16%   0%   0%   0%  36.9°C
11:41:41: 1800/1416MHz  1.00  16%   0%  16%   0%   0%   0%  36.2°C
11:42:41: 1800/1416MHz  1.00  16%   0%  16%   0%   0%   0%  36.2°C

System health while running 7-zip single core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
11:43:19: 1800/1416MHz  1.00  14%   0%  12%   0%   1%   0%  37.5°C
11:43:34: 1800/1416MHz  1.39  16%   0%  16%   0%   0%   0%  33.9°C
11:43:49: 1800/1416MHz  1.99  16%   0%  16%   0%   0%   0%  33.9°C
11:44:04: 1800/1416MHz  2.88  16%   0%  16%   0%   0%   0%  34.4°C
11:44:19: 1800/1416MHz  3.34  17%   0%  16%   0%   0%   0%  34.4°C
11:44:34: 1800/1416MHz  3.48  16%   0%  16%   0%   0%   0%  32.8°C
11:44:49: 1800/1416MHz  3.61  16%   0%  16%   0%   0%   0%  33.9°C
11:45:05: 1800/1416MHz  4.14  16%   0%  16%   0%   0%   0%  33.3°C
11:45:20: 1800/1416MHz  4.24  16%   0%  16%   0%   0%   0%  33.3°C
11:45:35: 1800/1416MHz  3.97  16%   0%  16%   0%   0%   0%  33.9°C
11:45:50: 1800/1416MHz  3.98  16%   0%  16%   0%   0%   0%  33.9°C
11:46:05: 1800/1416MHz  3.76  16%   0%  16%   0%   0%   0%  33.9°C
11:46:20: 1800/1416MHz  3.74  16%   0%  16%   0%   0%   0%  32.8°C
11:46:35: 1800/1416MHz  4.19  16%   0%  16%   0%   0%   0%  32.8°C
11:46:50: 1800/1416MHz  4.35  16%   0%  16%   0%   0%   0%  33.9°C
11:47:05: 1800/1416MHz  4.20  16%   0%  16%   0%   0%   0%  32.8°C
11:47:20: 1800/1416MHz  4.22  16%   0%  16%   0%   0%   0%  32.8°C
11:47:35: 1800/1416MHz  3.95  16%   0%  16%   0%   0%   0%  32.8°C
11:47:50: 1800/1416MHz  3.98  16%   0%  16%   0%   0%   0%  32.2°C
11:48:05: 1800/1416MHz  3.83  16%   0%  16%   0%   0%   0%  32.8°C
11:48:20: 1800/1416MHz  3.80  16%   0%  16%   0%   0%   0%  33.3°C
11:48:35: 1800/1416MHz  3.86  16%   0%  16%   0%   0%   0%  32.8°C
11:48:50: 1800/1416MHz  3.67  16%   0%  16%   0%   0%   0%  32.8°C
11:49:05: 1800/1416MHz  3.89  16%   0%  16%   0%   0%   0%  32.8°C
11:49:20: 1800/1416MHz  3.93  16%   0%  16%   0%   0%   0%  32.8°C
11:49:35: 1800/1416MHz  4.25  16%   0%  16%   0%   0%   0%  33.9°C
11:49:50: 1800/1416MHz  4.40  16%   0%  16%   0%   0%   0%  36.9°C
11:50:05: 1800/1416MHz  4.75  16%   0%  16%   0%   0%   0%  37.5°C
11:50:20: 1800/1416MHz  4.79  16%   0%  16%   0%   0%   0%  37.5°C
11:50:35: 1800/1416MHz  4.39  16%   0%  16%   0%   0%   0%  37.5°C
11:50:50: 1800/1416MHz  4.75  16%   0%  16%   0%   0%   0%  38.1°C
11:51:06: 1800/1416MHz  4.56  16%   0%  16%   0%   0%   0%  38.1°C
11:51:21: 1800/1416MHz  4.37  16%   0%  16%   0%   0%   0%  38.1°C
11:51:36: 1800/1416MHz  4.15  16%   0%  16%   0%   0%   0%  37.5°C
11:51:51: 1800/1416MHz  4.56  16%   0%  16%   0%   0%   0%  38.8°C
11:52:06: 1800/1416MHz  4.42  16%   0%  16%   0%   0%   0%  38.8°C
11:52:21: 1800/1416MHz  4.18  16%   0%  16%   0%   0%   0%  38.1°C
11:52:36: 1800/1416MHz  4.05  16%   0%  16%   0%   0%   0%  38.1°C
11:52:51: 1800/1416MHz  3.82  16%   0%  16%   0%   0%   0%  38.1°C
11:53:06: 1800/1416MHz  3.72  16%   0%  16%   0%   0%   0%  38.1°C
11:53:21: 1800/1416MHz  4.02  16%   0%  16%   0%   0%   0%  38.8°C
11:53:36: 1800/1416MHz  4.46  16%   0%  16%   0%   0%   0%  38.8°C

System health while running 7-zip multi core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
11:53:42: 1800/1416MHz  4.58  15%   0%  14%   0%   0%   0%  39.4°C
11:54:12: 1800/1416MHz  4.60  53%   0%  52%   0%   0%   0%  49.4°C
11:54:43: 1800/1416MHz  5.00  80%   1%  79%   0%   0%   0%  45.6°C
11:55:13: 1800/1416MHz  5.60  83%   1%  82%   0%   0%   0%  49.4°C
11:55:43: 1800/1416MHz  5.43  81%   1%  80%   0%   0%   0%  43.3°C
11:56:13: 1800/1416MHz  5.49  87%   1%  86%   0%   0%   0%  46.9°C
11:56:43: 1800/1416MHz  5.13  78%   0%  77%   0%   0%   0%  49.4°C
11:57:14: 1800/1416MHz  5.47  86%   1%  85%   0%   0%   0%  47.5°C

System health while running OpenSSL benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
11:57:23: 1800/1416MHz  5.62  23%   0%  21%   0%   0%   0%  46.9°C
11:57:33: 1800/1416MHz  4.76   0%   0%   0%   0%   0%   0%  36.9°C
11:57:43: 1800/1416MHz  4.18  16%   0%  16%   0%   0%   0%  36.9°C
11:57:53: 1800/1416MHz  3.69  16%   0%  16%   0%   0%   0%  38.8°C
11:58:03: 1800/1416MHz  3.28  16%   0%  16%   0%   0%   0%  40.0°C
11:58:13: 1800/1416MHz  2.93  17%   0%  16%   0%   0%   0%  38.8°C
11:58:23: 1800/1416MHz  2.63  16%   0%  16%   0%   0%   0%  36.2°C
11:58:33: 1800/1416MHz  2.38  16%   0%  16%   0%   0%   0%  40.0°C
11:58:43: 1800/1416MHz  2.17  16%   0%  16%   0%   0%   0%  40.0°C
11:58:53: 1800/1416MHz  1.99  16%   0%  16%   0%   0%   0%  35.0°C
11:59:03: 1800/1416MHz  1.83  16%   0%  16%   0%   0%   0%  37.5°C
11:59:13: 1800/1416MHz  1.71  16%   0%  16%   0%   0%   0%  40.0°C

##########################################################################

Linux 4.4.132-1075-rockchip-ayufan-ga83beded8524 (rockpro64) 	07/27/18 	_aarch64_	(6 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          21.56    0.01    0.36    0.70    0.00   77.37

Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
mmcblk0           2.95        93.94        38.30     182417      74372

              total        used        free      shared  buff/cache   available
Mem:           3.8G         62M        3.5G         13M        266M        3.7G
Swap:            0B          0B          0B

Filename				Type		Size	Used	Priority
