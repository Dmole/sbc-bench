Distributor ID:	Debian
Description:	Debian GNU/Linux 8.11 (jessie)
Release:	8.11
Codename:	jessie
Architecture:	armhf

Uptime: 19:40:52 up 1 min,  2 users,  load average: 1.00, 0.38, 0.14

Linux 3.10.106+ (gamestation-turbo) 	27/07/18 	_armv7l_	(8 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           2.90    0.07    6.88    1.36    0.00   88.79

Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
mmcblk0         169.72      7721.11       100.54     597691       7782
mmcblk0boot1      0.71         2.84         0.00        220          0
mmcblk0boot0      0.71         2.84         0.00        220          0

             total       used       free     shared    buffers     cached
Mem:          1.9G       953M       1.0G        22M        27M       566M
-/+ buffers/cache:       359M       1.6G
Swap:           0B         0B         0B



##########################################################################

Executing tinymembench on a little core:

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :    209.3 MB/s (0.5%)
 C copy backwards (32 byte blocks)                    :    277.6 MB/s
 C copy backwards (64 byte blocks)                    :    290.1 MB/s
 C copy                                               :    281.8 MB/s
 C copy prefetched (32 bytes step)                    :    514.8 MB/s (2.6%)
 C copy prefetched (64 bytes step)                    :    638.5 MB/s (0.1%)
 C 2-pass copy                                        :    268.6 MB/s (0.4%)
 C 2-pass copy prefetched (32 bytes step)             :    371.9 MB/s
 C 2-pass copy prefetched (64 bytes step)             :    408.9 MB/s (0.2%)
 C fill                                               :    784.7 MB/s (0.4%)
 C fill (shuffle within 16 byte blocks)               :    783.8 MB/s (0.2%)
 C fill (shuffle within 32 byte blocks)               :    503.8 MB/s
 C fill (shuffle within 64 byte blocks)               :    502.6 MB/s
 ---
 standard memcpy                                      :    339.7 MB/s (3.3%)
 standard memset                                      :    755.6 MB/s (2.8%)
 ---
 NEON read                                            :    504.8 MB/s
 NEON read prefetched (32 bytes step)                 :    908.1 MB/s (0.1%)
 NEON read prefetched (64 bytes step)                 :    991.2 MB/s (1.0%)
 NEON read 2 data streams                             :    436.1 MB/s (0.2%)
 NEON read 2 data streams prefetched (32 bytes step)  :    935.3 MB/s
 NEON read 2 data streams prefetched (64 bytes step)  :    987.6 MB/s (0.2%)
 NEON copy                                            :    289.5 MB/s
 NEON copy prefetched (32 bytes step)                 :    642.2 MB/s (0.8%)
 NEON copy prefetched (64 bytes step)                 :    644.3 MB/s
 NEON unrolled copy                                   :    267.9 MB/s
 NEON unrolled copy prefetched (32 bytes step)        :    426.6 MB/s (1.0%)
 NEON unrolled copy prefetched (64 bytes step)        :    632.5 MB/s
 NEON copy backwards                                  :    281.7 MB/s
 NEON copy backwards prefetched (32 bytes step)       :    640.3 MB/s
 NEON copy backwards prefetched (64 bytes step)       :    644.3 MB/s (0.1%)
 NEON 2-pass copy                                     :    280.0 MB/s (3.5%)
 NEON 2-pass copy prefetched (32 bytes step)          :    397.5 MB/s
 NEON 2-pass copy prefetched (64 bytes step)          :    423.7 MB/s (0.1%)
 NEON unrolled 2-pass copy                            :    263.5 MB/s (0.6%)
 NEON unrolled 2-pass copy prefetched (32 bytes step) :    357.1 MB/s
 NEON unrolled 2-pass copy prefetched (64 bytes step) :    389.8 MB/s
 NEON fill                                            :    783.9 MB/s (0.2%)
 NEON fill backwards                                  :    782.6 MB/s
 VFP copy                                             :    269.4 MB/s (0.6%)
 VFP 2-pass copy                                      :    266.4 MB/s (0.3%)
 ARM fill (STRD)                                      :    757.1 MB/s (0.7%)
 ARM fill (STM with 8 registers)                      :    784.6 MB/s (0.2%)
 ARM fill (STM with 4 registers)                      :    783.7 MB/s (0.2%)
 ARM copy prefetched (incr pld)                       :    641.5 MB/s (0.3%)
 ARM copy prefetched (wrap pld)                       :    640.8 MB/s (0.3%)
 ARM 2-pass copy prefetched (incr pld)                :    397.9 MB/s (3.2%)
 ARM 2-pass copy prefetched (wrap pld)                :    385.1 MB/s (3.5%)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON read (from framebuffer)                         :     68.0 MB/s
 NEON copy (from framebuffer)                         :     67.4 MB/s
 NEON 2-pass copy (from framebuffer)                  :     61.7 MB/s (0.3%)
 NEON unrolled copy (from framebuffer)                :     63.2 MB/s
 NEON 2-pass unrolled copy (from framebuffer)         :     60.9 MB/s (0.1%)
 VFP copy (from framebuffer)                          :    299.7 MB/s (2.1%)
 VFP 2-pass copy (from framebuffer)                   :    275.7 MB/s (0.6%)
 ARM copy (from framebuffer)                          :    256.6 MB/s (0.3%)
 ARM 2-pass copy (from framebuffer)                   :    188.3 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.1 ns 
     65536 :    4.2 ns          /     7.6 ns 
    131072 :    6.6 ns          /    11.1 ns 
    262144 :    7.9 ns          /    13.0 ns 
    524288 :   13.8 ns          /    22.3 ns 
   1048576 :   82.2 ns          /   126.3 ns 
   2097152 :  121.1 ns          /   165.3 ns 
   4194304 :  141.3 ns          /   179.8 ns 
   8388608 :  152.9 ns          /   187.1 ns 
  16777216 :  161.8 ns          /   195.9 ns 
  33554432 :  170.4 ns          /   208.6 ns 
  67108864 :  183.3 ns          /   231.8 ns 

Executing tinymembench on a big core:

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   1144.4 MB/s
 C copy backwards (32 byte blocks)                    :   1154.7 MB/s (4.5%)
 C copy backwards (64 byte blocks)                    :   2265.0 MB/s (3.5%)
 C copy                                               :   1178.7 MB/s (0.2%)
 C copy prefetched (32 bytes step)                    :   1361.3 MB/s (4.6%)
 C copy prefetched (64 bytes step)                    :   1360.6 MB/s (0.3%)
 C 2-pass copy                                        :   1094.7 MB/s
 C 2-pass copy prefetched (32 bytes step)             :   1323.2 MB/s (4.8%)
 C 2-pass copy prefetched (64 bytes step)             :   1313.4 MB/s
 C fill                                               :   4828.3 MB/s (0.5%)
 C fill (shuffle within 16 byte blocks)               :   1700.1 MB/s (4.3%)
 C fill (shuffle within 32 byte blocks)               :   1699.9 MB/s (0.4%)
 C fill (shuffle within 64 byte blocks)               :   1795.2 MB/s (0.4%)
 ---
 standard memcpy                                      :   2203.7 MB/s
 standard memset                                      :   4796.8 MB/s (3.5%)
 ---
 NEON read                                            :   3272.7 MB/s (0.5%)
 NEON read prefetched (32 bytes step)                 :   4166.3 MB/s (1.8%)
 NEON read prefetched (64 bytes step)                 :   4173.0 MB/s (0.8%)
 NEON read 2 data streams                             :   3296.6 MB/s (5.2%)
 NEON read 2 data streams prefetched (32 bytes step)  :   4205.1 MB/s (0.2%)
 NEON read 2 data streams prefetched (64 bytes step)  :   4209.8 MB/s
 NEON copy                                            :   2513.5 MB/s (5.8%)
 NEON copy prefetched (32 bytes step)                 :   2822.4 MB/s (0.6%)
 NEON copy prefetched (64 bytes step)                 :   2777.6 MB/s
 NEON unrolled copy                                   :   2164.7 MB/s (4.4%)
 NEON unrolled copy prefetched (32 bytes step)        :   3129.0 MB/s (2.2%)
 NEON unrolled copy prefetched (64 bytes step)        :   3147.8 MB/s (2.0%)
 NEON copy backwards                                  :   1190.3 MB/s (3.9%)
 NEON copy backwards prefetched (32 bytes step)       :   1340.6 MB/s
 NEON copy backwards prefetched (64 bytes step)       :   1349.1 MB/s (0.3%)
 NEON 2-pass copy                                     :   2006.0 MB/s (7.0%)
 NEON 2-pass copy prefetched (32 bytes step)          :   2177.7 MB/s
 NEON 2-pass copy prefetched (64 bytes step)          :   2182.9 MB/s
 NEON unrolled 2-pass copy                            :   1355.5 MB/s (0.3%)
 NEON unrolled 2-pass copy prefetched (32 bytes step) :   1682.5 MB/s (5.5%)
 NEON unrolled 2-pass copy prefetched (64 bytes step) :   1696.8 MB/s (1.1%)
 NEON fill                                            :   4782.6 MB/s (0.4%)
 NEON fill backwards                                  :   1733.7 MB/s (4.4%)
 VFP copy                                             :   2595.6 MB/s (0.6%)
 VFP 2-pass copy                                      :   1321.3 MB/s
 ARM fill (STRD)                                      :   4797.8 MB/s (5.1%)
 ARM fill (STM with 8 registers)                      :   4785.8 MB/s (0.3%)
 ARM fill (STM with 4 registers)                      :   4779.5 MB/s (0.2%)
 ARM copy prefetched (incr pld)                       :   2824.2 MB/s (10.5%)
 ARM copy prefetched (wrap pld)                       :   2682.6 MB/s (0.5%)
 ARM 2-pass copy prefetched (incr pld)                :   1591.2 MB/s (5.1%)
 ARM 2-pass copy prefetched (wrap pld)                :   1567.2 MB/s (0.4%)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON read (from framebuffer)                         :    455.3 MB/s (1.3%)
 NEON copy (from framebuffer)                         :    407.5 MB/s
 NEON 2-pass copy (from framebuffer)                  :    411.0 MB/s (2.3%)
 NEON unrolled copy (from framebuffer)                :    326.7 MB/s (0.3%)
 NEON 2-pass unrolled copy (from framebuffer)         :    352.5 MB/s
 VFP copy (from framebuffer)                          :    378.5 MB/s
 VFP 2-pass copy (from framebuffer)                   :    361.3 MB/s (2.8%)
 ARM copy (from framebuffer)                          :    364.8 MB/s
 ARM 2-pass copy (from framebuffer)                   :    334.3 MB/s (0.2%)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    4.7 ns          /     7.1 ns 
    131072 :    7.1 ns          /     9.4 ns 
    262144 :   10.1 ns          /    12.5 ns 
    524288 :   11.7 ns          /    14.2 ns 
   1048576 :   12.7 ns          /    15.3 ns 
   2097152 :   22.8 ns          /    29.6 ns 
   4194304 :   98.2 ns          /   148.1 ns 
   8388608 :  136.7 ns          /   189.1 ns 
  16777216 :  156.6 ns          /   208.2 ns 
  33554432 :  171.8 ns          /   224.4 ns 
  67108864 :  181.5 ns          /   237.2 ns 

##########################################################################

##########################################################################

7-Zip (A) 9.20  Copyright (c) 1999-2010 Igor Pavlov  2010-11-18
p7zip Version 9.20 (locale=en_GB.UTF-8,Utf16=on,HugeFiles=on,8 CPUs)

RAM size:    1990 MB,  # CPU hardware threads:   8
RAM usage:   1701 MB,  # Benchmark threads:      8

Dict        Compressing          |        Decompressing
      Speed Usage    R/U Rating  |    Speed Usage    R/U Rating
       KB/s     %   MIPS   MIPS  |     KB/s     %   MIPS   MIPS

22:    5585   669    812   5433  |    89558   662   1220   8077
23:    5329   691    786   5430  |    83995   636   1207   7684
24:    5497   743    795   5911  |    84412   653   1198   7830
25:    4994   700    815   5702  |    82902   659   1182   7795
----------------------------------------------------------------
Avr:          700    802   5619               653   1202   7846
Tot:          677   1002   6733

Compression: 5619
Decompression: 7846
Total: 6733

##########################################################################

OpenSSL 1.0.1t  3 May 2016 (Library: OpenSSL 1.0.2l  25 May 2017)
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes
aes-128-cbc      26810.76k    32876.07k    34800.21k    35271.00k    35154.60k
aes-128-cbc      74115.00k    84873.98k    89295.36k    90379.61k    90753.71k
aes-192-cbc      23935.85k    28036.29k    29783.47k    30124.71k    30283.09k
aes-192-cbc      65578.05k    73527.42k    76904.36k    77431.81k    78047.91k
aes-256-cbc      21616.54k    25164.07k    26276.86k    26534.23k    26656.77k
aes-256-cbc      58102.18k    64692.16k    67346.69k    67993.26k    68192.94k

##########################################################################

System health while running tinymembench:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
19:40:52: 2000/1400MHz  1.00  11%   6%   2%   0%   1%   0%  61.0°C
19:41:52: 1900/1400MHz  1.30  11%   1%  10%   0%   0%   0%  51.0°C
19:42:52: 1900/1400MHz  1.41  13%   1%  12%   0%   0%   0%  51.0°C
19:43:53: 1900/1400MHz  1.15  13%   1%  12%   0%   0%   0%  58.0°C
19:44:53: 1900/1400MHz  1.24  13%   0%  12%   0%   0%   0%  49.0°C
19:45:53: 1900/1400MHz  1.20  13%   1%  12%   0%   0%   0%  49.0°C
19:46:53: 1900/1400MHz  1.25  13%   1%  12%   0%   0%   0%  50.0°C
19:47:53: 1900/1400MHz  1.19  13%   1%  12%   0%   0%   0%  49.0°C
19:48:53: 1900/1400MHz  1.07  13%   1%  12%   0%   0%   0%  49.0°C
19:49:53: 1900/1400MHz  1.09  13%   1%  12%   0%   0%   0%  49.0°C
19:50:53: 1900/1400MHz  1.42  21%   1%  12%   6%   0%   0%  50.0°C
19:51:53: 1900/1400MHz  1.25  13%   0%  12%   0%   0%   0%  50.0°C
19:52:53: 1900/1400MHz  1.16  13%   1%  12%   0%   0%   0%  59.0°C
19:53:53: 1900/1400MHz  1.06  13%   1%  12%   0%   0%   0%  60.0°C
19:54:54: 1900/1400MHz  1.07  13%   1%  12%   0%   0%   0%  61.0°C
19:55:54: 1900/1400MHz  1.09  14%   1%  12%   0%   0%   0%  60.0°C
19:56:54: 1900/1400MHz  1.18  13%   1%  12%   0%   0%   0%  61.0°C
19:57:54: 1900/1400MHz  1.19  13%   1%  12%   0%   0%   0%  55.0°C
19:58:54: 1900/1400MHz  1.59  13%   0%  12%   0%   0%   0%  54.0°C
19:59:54: 1900/1400MHz  1.51  13%   0%  12%   0%   0%   0%  53.0°C
20:00:54: 1900/1400MHz  1.41  13%   0%  12%   0%   0%   0%  53.0°C
20:01:54: 1900/1400MHz  1.38  13%   0%  12%   0%   0%   0%  53.0°C

System health while running 7-zip single core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
20:02:24: 1900/1400MHz  1.23  13%   1%  12%   0%   0%   0%  54.0°C
20:02:39: 1900/1400MHz  2.11  14%   1%  12%   0%   0%   0%  50.0°C
20:02:54: 1900/1400MHz  2.61  13%   1%  12%   0%   0%   0%  50.0°C
20:03:09: 1900/1400MHz  3.81  13%   1%  12%   0%   0%   0%  50.0°C
20:03:24: 1900/1400MHz  4.73  13%   0%  12%   0%   0%   0%  50.0°C
20:03:39: 1900/1400MHz  5.46  13%   1%  12%   0%   0%   0%  50.0°C
20:03:54: 1900/1400MHz  6.09  13%   1%  12%   0%   0%   0%  50.0°C
20:04:09: 1900/1400MHz  5.63  13%   1%  12%   0%   0%   0%  50.0°C
20:04:25: 1900/1400MHz  5.34  13%   1%  12%   0%   0%   0%  50.0°C
20:04:40: 1900/1400MHz  5.12  13%   1%  12%   0%   0%   0%  50.0°C
20:04:55: 1900/1400MHz  5.02  13%   1%  12%   0%   0%   0%  49.0°C
20:05:10: 1900/1400MHz  5.68  13%   1%  12%   0%   0%   0%  50.0°C
20:05:25: 1900/1400MHz  6.19  13%   0%  12%   0%   0%   0%  49.0°C
20:05:40: 1900/1400MHz  6.59  13%   0%  12%   0%   0%   0%  49.0°C
20:05:55: 1900/1400MHz  6.97  13%   1%  12%   0%   0%   0%  49.0°C
20:06:10: 1900/1400MHz  6.19  13%   1%  11%   0%   0%   0%  50.0°C
20:06:25: 1900/1400MHz  5.84  13%   1%  12%   0%   0%   0%  50.0°C
20:06:40: 1900/1400MHz  5.43  13%   1%  12%   0%   0%   0%  49.0°C
20:06:55: 1900/1400MHz  5.26  13%   1%  12%   0%   0%   0%  50.0°C
20:07:10: 1900/1400MHz  5.19  13%   1%  12%   0%   0%   0%  50.0°C
20:07:26: 1900/1400MHz  4.93  13%   0%  12%   0%   0%   0%  50.0°C
20:07:41: 1900/1400MHz  4.80  13%   1%  12%   0%   0%   0%  50.0°C
20:07:56: 1900/1400MHz  4.63  13%   0%  12%   0%   0%   0%  50.0°C
20:08:11: 1900/1400MHz  4.87  14%   2%  11%   0%   0%   0%  50.0°C
20:08:26: 1900/1400MHz  5.57  13%   0%  12%   0%   0%   0%  49.0°C
20:08:41: 1900/1400MHz  6.11  13%   0%  12%   0%   0%   0%  50.0°C
20:08:56: 1900/1400MHz  6.67  13%   0%  12%   0%   0%   0%  49.0°C
20:09:11: 1900/1400MHz  7.05  13%   0%  12%   0%   0%   0%  49.0°C
20:09:26: 1900/1400MHz  6.24  13%   2%  11%   0%   0%   0%  49.0°C
20:09:41: 1900/1400MHz  5.81  13%   1%  12%   0%   0%   0%  49.0°C
20:09:56: 1900/1400MHz  5.56  13%   1%  12%   0%   0%   0%  50.0°C
20:10:11: 1900/1400MHz  5.28  13%   0%  12%   0%   0%   0%  49.0°C
20:10:26: 1900/1400MHz  5.22  13%   1%  12%   0%   0%   0%  49.0°C
20:10:42: 1900/1400MHz  5.17  13%   1%  12%   0%   0%   0%  50.0°C
20:10:57: 1900/1400MHz  4.91  13%   1%  12%   0%   0%   0%  50.0°C
20:11:12: 1900/1400MHz  4.77  13%   1%  12%   0%   0%   0%  49.0°C
20:11:27: 1900/1400MHz  4.67  13%   1%  12%   0%   0%   0%  50.0°C
20:11:42: 1900/1400MHz  4.91  13%   1%  12%   0%   0%   0%  49.0°C
20:11:57: 1900/1400MHz  4.86  13%   0%  12%   0%   0%   0%  49.0°C
20:12:12: 1900/1400MHz  4.75  13%   1%  12%   0%   0%   0%  50.0°C
20:12:27: 1900/1400MHz  4.73  14%   2%  12%   0%   0%   0%  49.0°C
20:12:45: 1900/1400MHz  5.29  38%  12%  10%   0%  15%   1%  52.0°C
20:13:01: 1900/1400MHz  6.15  35%  11%   9%   0%  12%   1%  54.0°C
20:13:17: 1900/1400MHz  6.36  35%  11%  10%   0%  12%   0%  55.0°C
20:13:33: 1900/1400MHz  6.14  37%  12%   9%   0%  14%   0%  52.0°C
20:13:56: 1900/1400MHz  9.74  49%   6%   2%   0%  39%   0%  51.0°C
20:14:11: 1900/1400MHz  8.84  19%   4%  11%   0%   2%   0%  58.0°C
20:14:26: 1900/1400MHz  8.65  13%   0%  12%   0%   0%   0%  58.0°C
20:14:41: 1900/1400MHz  8.51  14%   1%  12%   0%   0%   0%  58.0°C
20:14:56: 1900/1400MHz  7.94  14%   2%  11%   0%   0%   0%  57.0°C
20:15:11: 1900/1400MHz  7.72  13%   1%  12%   0%   0%   0%  58.0°C
20:15:26: 1900/1400MHz  7.71  13%   0%  12%   0%   0%   0%  59.0°C
20:15:41: 1900/1400MHz  7.86  14%   1%  12%   0%   0%   0%  59.0°C
20:15:56: 1900/1400MHz  8.05  14%   2%  11%   0%   0%   0%  58.0°C
20:16:11: 1900/1400MHz  7.29  13%   1%  12%   0%   0%   0%  57.0°C
20:16:26: 1900/1400MHz  6.77  13%   1%  12%   0%   0%   0%  58.0°C
20:16:41: 1900/1400MHz  6.29  13%   1%  12%   0%   0%   0%  58.0°C
20:16:57: 1900/1400MHz  6.32  15%   2%  12%   0%   0%   0%  59.0°C
20:17:12: 1900/1400MHz  6.69  14%   0%  13%   0%   0%   0%  59.0°C
20:17:27: 1900/1400MHz  6.98  13%   1%  12%   0%   0%   0%  59.0°C
20:17:42: 1900/1400MHz  6.27  13%   2%  11%   0%   0%   0%  58.0°C
20:17:57: 1900/1400MHz  5.98  13%   1%  12%   0%   0%   0%  58.0°C
20:18:12: 1900/1400MHz  5.69  13%   1%  12%   0%   0%   0%  58.0°C
20:18:27: 1900/1400MHz  5.39  13%   1%  12%   0%   0%   0%  57.0°C
20:18:42: 1900/1400MHz  5.23  13%   0%  12%   0%   0%   0%  58.0°C
20:18:57: 1900/1400MHz  5.16  13%   1%  12%   0%   0%   0%  58.0°C

System health while running 7-zip multi core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
20:19:35: 1900/1400MHz  6.72  15%   1%  11%   0%   1%   0%  57.0°C
20:20:08: 1900/1400MHz  7.45  58%   4%  52%   0%   1%   0%  90.0°C
20:20:38: 1900/1400MHz  7.73  82%   4%  77%   0%   0%   0%  90.0°C
20:21:09: 1900/1400MHz  9.54  91%   6%  82%   0%   0%   0%  90.0°C
20:21:40: 1900/1400MHz 11.21  81%   4%  76%   0%   0%   0%  73.0°C
20:22:16: 1900/1400MHz 10.40  92%   7%  84%   0%   0%   0%  90.0°C
20:22:46:  900/1400MHz  9.58  81%   5%  75%   0%   0%   0%  88.0°C
20:23:17: 1900/1400MHz  8.46  82%   5%  77%   0%   0%   0%  88.0°C

System health while running OpenSSL benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
20:23:31: 1900/1400MHz  8.87  21%   2%  17%   0%   1%   0%  73.0°C
20:23:41: 1900/1400MHz  7.66  12%   6%   0%   0%   5%   0%  59.0°C
20:23:51: 1900/1400MHz  6.64  13%   0%  12%   0%   0%   0%  57.0°C
20:24:01: 1900/1400MHz  5.77  14%   2%  12%   0%   0%   0%  66.0°C
20:24:11: 1900/1400MHz  5.04  13%   0%  12%   0%   0%   0%  61.0°C
20:24:21: 1900/1400MHz  4.42  14%   2%  12%   0%   0%   0%  56.0°C
20:24:31: 1900/1400MHz  3.89  13%   0%  12%   0%   0%   0%  65.0°C
20:24:41: 1900/1400MHz  3.45  14%   1%  12%   0%   0%   0%  59.0°C
20:24:52: 1900/1400MHz  3.15  13%   0%  12%   0%   0%   0%  54.0°C
20:25:02: 1900/1400MHz  2.89  14%   2%  12%   0%   0%   0%  64.0°C

##########################################################################

Linux 3.10.106+ (gamestation-turbo) 	27/07/18 	_armv7l_	(8 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          17.42    0.18    2.24    1.16    0.00   79.00

Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
mmcblk0          60.24      2903.64         7.66    7948805      20967
mmcblk0boot1      0.02         0.08         0.00        220          0
mmcblk0boot0      0.02         0.08         0.00        220          0

             total       used       free     shared    buffers     cached
Mem:          1.9G       878M       1.1G        23M       5.8M       513M
-/+ buffers/cache:       359M       1.6G
Swap:           0B         0B         0B

Filename				Type		Size	Used	Priority
