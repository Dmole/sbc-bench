Distributor ID:	Ubuntu
Description:	Ubuntu 16.04.4 LTS
Release:	16.04
Codename:	xenial
Architecture:	armhf

Uptime: 19:34:42 up  1:00,  1 user,  load average: 0.35, 1.41, 2.97

Linux 4.4.49-s5p6818 (FriendlyELEC) 	07/27/18 	_armv7l_	(8 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          16.23    0.13    0.56    0.22    0.00   82.86

Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
mmcblk0           6.53       183.83      2869.04     668994   10440936
mmcblk0boot1      0.01         0.06         0.00        216          0
mmcblk0boot0      0.01         0.06         0.00        216          0

              total        used        free      shared  buff/cache   available
Mem:           1.9G        369M        1.1G         44M        473M        1.4G
Swap:            0B          0B          0B



##########################################################################

Executing tinymembench on a little core:

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   1640.0 MB/s (1.3%)
 C copy backwards (32 byte blocks)                    :   1650.6 MB/s (0.3%)
 C copy backwards (64 byte blocks)                    :   1664.8 MB/s (0.4%)
 C copy                                               :   1536.6 MB/s (0.3%)
 C copy prefetched (32 bytes step)                    :   1628.6 MB/s
 C copy prefetched (64 bytes step)                    :   1635.5 MB/s
 C 2-pass copy                                        :   1326.6 MB/s (0.7%)
 C 2-pass copy prefetched (32 bytes step)             :   1423.5 MB/s
 C 2-pass copy prefetched (64 bytes step)             :   1414.1 MB/s
 C fill                                               :   4542.5 MB/s
 C fill (shuffle within 16 byte blocks)               :   4542.1 MB/s
 C fill (shuffle within 32 byte blocks)               :   4542.4 MB/s (0.2%)
 C fill (shuffle within 64 byte blocks)               :   4540.7 MB/s
 ---
 standard memcpy                                      :   1667.6 MB/s (0.8%)
 standard memset                                      :   3709.6 MB/s
 ---
 NEON read                                            :   2154.4 MB/s (0.2%)
 NEON read prefetched (32 bytes step)                 :   3428.6 MB/s
 NEON read prefetched (64 bytes step)                 :   3435.2 MB/s
 NEON read 2 data streams                             :   1969.1 MB/s
 NEON read 2 data streams prefetched (32 bytes step)  :   3329.3 MB/s
 NEON read 2 data streams prefetched (64 bytes step)  :   3336.5 MB/s
 NEON copy                                            :   1553.0 MB/s (0.3%)
 NEON copy prefetched (32 bytes step)                 :   1668.6 MB/s
 NEON copy prefetched (64 bytes step)                 :   1672.3 MB/s
 NEON unrolled copy                                   :   1531.9 MB/s (0.5%)
 NEON unrolled copy prefetched (32 bytes step)        :   1736.7 MB/s
 NEON unrolled copy prefetched (64 bytes step)        :   1739.2 MB/s (0.2%)
 NEON copy backwards                                  :   1648.6 MB/s (0.6%)
 NEON copy backwards prefetched (32 bytes step)       :   1741.6 MB/s
 NEON copy backwards prefetched (64 bytes step)       :   1739.6 MB/s
 NEON 2-pass copy                                     :   1371.0 MB/s
 NEON 2-pass copy prefetched (32 bytes step)          :   1453.9 MB/s
 NEON 2-pass copy prefetched (64 bytes step)          :   1455.7 MB/s
 NEON unrolled 2-pass copy                            :   1350.8 MB/s
 NEON unrolled 2-pass copy prefetched (32 bytes step) :   1558.4 MB/s
 NEON unrolled 2-pass copy prefetched (64 bytes step) :   1585.6 MB/s
 NEON fill                                            :   4543.7 MB/s
 NEON fill backwards                                  :   4543.1 MB/s
 VFP copy                                             :   1541.3 MB/s (0.5%)
 VFP 2-pass copy                                      :   1340.4 MB/s
 ARM fill (STRD)                                      :   3709.8 MB/s (0.2%)
 ARM fill (STM with 8 registers)                      :   4537.8 MB/s
 ARM fill (STM with 4 registers)                      :   4526.0 MB/s
 ARM copy prefetched (incr pld)                       :   1654.0 MB/s
 ARM copy prefetched (wrap pld)                       :   1622.0 MB/s (0.3%)
 ARM 2-pass copy prefetched (incr pld)                :   1397.8 MB/s
 ARM 2-pass copy prefetched (wrap pld)                :   1392.4 MB/s

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON read (from framebuffer)                         :     64.3 MB/s
 NEON copy (from framebuffer)                         :     63.5 MB/s
 NEON 2-pass copy (from framebuffer)                  :     63.1 MB/s
 NEON unrolled copy (from framebuffer)                :     63.6 MB/s
 NEON 2-pass unrolled copy (from framebuffer)         :     62.7 MB/s
 VFP copy (from framebuffer)                          :    425.8 MB/s
 VFP 2-pass copy (from framebuffer)                   :    394.8 MB/s
 ARM copy (from framebuffer)                          :    229.9 MB/s
 ARM 2-pass copy (from framebuffer)                   :    220.6 MB/s (0.3%)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    4.9 ns          /     8.3 ns 
    131072 :    7.5 ns          /    11.6 ns 
    262144 :    8.9 ns          /    12.9 ns 
    524288 :   11.2 ns          /    15.9 ns 
   1048576 :   81.2 ns          /   123.7 ns 
   2097152 :  118.5 ns          /   158.1 ns 
   4194304 :  142.9 ns          /   177.7 ns 
   8388608 :  155.3 ns          /   187.6 ns 
  16777216 :  162.6 ns          /   194.6 ns 
  33554432 :  167.1 ns          /   199.4 ns 
  67108864 :  169.9 ns          /   202.5 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    4.9 ns          /     8.3 ns 
    131072 :    7.5 ns          /    11.5 ns 
    262144 :    8.8 ns          /    12.9 ns 
    524288 :   10.9 ns          /    15.5 ns 
   1048576 :   80.9 ns          /   123.7 ns 
   2097152 :  117.9 ns          /   158.2 ns 
   4194304 :  135.2 ns          /   167.1 ns 
   8388608 :  144.4 ns          /   171.1 ns 
  16777216 :  148.9 ns          /   172.8 ns 
  33554432 :  151.1 ns          /   173.6 ns 
  67108864 :  152.3 ns          /   173.9 ns 

Executing tinymembench on a big core:

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   1647.6 MB/s (0.4%)
 C copy backwards (32 byte blocks)                    :   1652.2 MB/s (0.2%)
 C copy backwards (64 byte blocks)                    :   1664.0 MB/s (0.9%)
 C copy                                               :   1518.8 MB/s (0.1%)
 C copy prefetched (32 bytes step)                    :   1609.2 MB/s (0.1%)
 C copy prefetched (64 bytes step)                    :   1615.8 MB/s
 C 2-pass copy                                        :   1313.6 MB/s
 C 2-pass copy prefetched (32 bytes step)             :   1409.5 MB/s
 C 2-pass copy prefetched (64 bytes step)             :   1400.0 MB/s
 C fill                                               :   4483.7 MB/s
 C fill (shuffle within 16 byte blocks)               :   4483.2 MB/s
 C fill (shuffle within 32 byte blocks)               :   4483.8 MB/s (0.2%)
 C fill (shuffle within 64 byte blocks)               :   4488.0 MB/s (0.4%)
 ---
 standard memcpy                                      :   1640.9 MB/s (0.5%)
 standard memset                                      :   3706.6 MB/s
 ---
 NEON read                                            :   2135.5 MB/s (0.2%)
 NEON read prefetched (32 bytes step)                 :   3394.2 MB/s (0.2%)
 NEON read prefetched (64 bytes step)                 :   3401.8 MB/s (0.6%)
 NEON read 2 data streams                             :   1954.4 MB/s
 NEON read 2 data streams prefetched (32 bytes step)  :   3284.8 MB/s
 NEON read 2 data streams prefetched (64 bytes step)  :   3292.3 MB/s
 NEON copy                                            :   1536.2 MB/s (0.8%)
 NEON copy prefetched (32 bytes step)                 :   1656.0 MB/s (0.2%)
 NEON copy prefetched (64 bytes step)                 :   1652.2 MB/s (0.1%)
 NEON unrolled copy                                   :   1512.1 MB/s
 NEON unrolled copy prefetched (32 bytes step)        :   1720.8 MB/s
 NEON unrolled copy prefetched (64 bytes step)        :   1722.7 MB/s
 NEON copy backwards                                  :   1642.4 MB/s (0.5%)
 NEON copy backwards prefetched (32 bytes step)       :   1723.1 MB/s
 NEON copy backwards prefetched (64 bytes step)       :   1721.7 MB/s
 NEON 2-pass copy                                     :   1357.2 MB/s
 NEON 2-pass copy prefetched (32 bytes step)          :   1439.8 MB/s
 NEON 2-pass copy prefetched (64 bytes step)          :   1442.1 MB/s (0.6%)
 NEON unrolled 2-pass copy                            :   1338.6 MB/s
 NEON unrolled 2-pass copy prefetched (32 bytes step) :   1554.0 MB/s
 NEON unrolled 2-pass copy prefetched (64 bytes step) :   1577.1 MB/s
 NEON fill                                            :   4531.5 MB/s (0.3%)
 NEON fill backwards                                  :   4530.7 MB/s (0.4%)
 VFP copy                                             :   1530.8 MB/s (0.4%)
 VFP 2-pass copy                                      :   1329.3 MB/s
 ARM fill (STRD)                                      :   3701.6 MB/s
 ARM fill (STM with 8 registers)                      :   4481.6 MB/s
 ARM fill (STM with 4 registers)                      :   4479.0 MB/s
 ARM copy prefetched (incr pld)                       :   1649.7 MB/s (0.5%)
 ARM copy prefetched (wrap pld)                       :   1616.7 MB/s
 ARM 2-pass copy prefetched (incr pld)                :   1393.8 MB/s
 ARM 2-pass copy prefetched (wrap pld)                :   1387.7 MB/s

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON read (from framebuffer)                         :     64.3 MB/s
 NEON copy (from framebuffer)                         :     63.7 MB/s (0.1%)
 NEON 2-pass copy (from framebuffer)                  :     63.1 MB/s
 NEON unrolled copy (from framebuffer)                :     63.6 MB/s
 NEON 2-pass unrolled copy (from framebuffer)         :     62.7 MB/s
 VFP copy (from framebuffer)                          :    423.6 MB/s
 VFP 2-pass copy (from framebuffer)                   :    395.4 MB/s
 ARM copy (from framebuffer)                          :    229.4 MB/s
 ARM 2-pass copy (from framebuffer)                   :    220.9 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    4.9 ns          /     8.3 ns 
    131072 :    7.5 ns          /    11.5 ns 
    262144 :    8.8 ns          /    12.9 ns 
    524288 :   10.8 ns          /    15.4 ns 
   1048576 :   80.3 ns          /   122.7 ns 
   2097152 :  117.2 ns          /   156.8 ns 
   4194304 :  141.6 ns          /   176.3 ns 
   8388608 :  154.3 ns          /   186.4 ns 
  16777216 :  162.1 ns          /   194.3 ns 
  33554432 :  166.6 ns          /   198.8 ns 
  67108864 :  169.4 ns          /   201.9 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    4.9 ns          /     8.3 ns 
    131072 :    7.5 ns          /    11.5 ns 
    262144 :    8.8 ns          /    12.9 ns 
    524288 :   10.9 ns          /    15.3 ns 
   1048576 :   80.6 ns          /   123.3 ns 
   2097152 :  118.2 ns          /   158.2 ns 
   4194304 :  135.2 ns          /   167.2 ns 
   8388608 :  144.4 ns          /   171.1 ns 
  16777216 :  149.0 ns          /   172.9 ns 
  33554432 :  151.4 ns          /   173.7 ns 
  67108864 :  152.4 ns          /   174.0 ns 

##########################################################################

7-Zip (A) 9.20  Copyright (c) 1999-2010 Igor Pavlov  2010-11-18
p7zip Version 9.20 (locale=C,Utf16=off,HugeFiles=on,8 CPUs)

RAM size:    1959 MB,  # CPU hardware threads:   8
RAM usage:   1701 MB,  # Benchmark threads:      8

Dict        Compressing          |        Decompressing
      Speed Usage    R/U Rating  |    Speed Usage    R/U Rating
       KB/s     %   MIPS   MIPS  |     KB/s     %   MIPS   MIPS

22:     669   100    650    650  |    13014   100   1173   1173
23:     664   100    677    677  |    12850   100   1175   1175
24:     658   100    708    708  |    12695   100   1177   1177
25:     636   100    727    727  |    12607   100   1185   1185
----------------------------------------------------------------
Avr:          100    690    690               100   1178   1178
Tot:          100    934    934

7-Zip (A) 9.20  Copyright (c) 1999-2010 Igor Pavlov  2010-11-18
p7zip Version 9.20 (locale=C,Utf16=off,HugeFiles=on,8 CPUs)

RAM size:    1959 MB,  # CPU hardware threads:   8
RAM usage:   1701 MB,  # Benchmark threads:      8

Dict        Compressing          |        Decompressing
      Speed Usage    R/U Rating  |    Speed Usage    R/U Rating
       KB/s     %   MIPS   MIPS  |     KB/s     %   MIPS   MIPS

22:     686   100    667    667  |    13078   100   1179   1179
23:     677   100    689    689  |    12928   100   1182   1182
24:     669   100    720    720  |    12759   100   1183   1183
25:     649   100    741    741  |    12570   100   1182   1182
----------------------------------------------------------------
Avr:          100    704    704               100   1181   1181
Tot:          100    943    943

##########################################################################

7-Zip (A) 9.20  Copyright (c) 1999-2010 Igor Pavlov  2010-11-18
p7zip Version 9.20 (locale=C,Utf16=off,HugeFiles=on,8 CPUs)

RAM size:    1959 MB,  # CPU hardware threads:   8
RAM usage:   1701 MB,  # Benchmark threads:      8

Dict        Compressing          |        Decompressing
      Speed Usage    R/U Rating  |    Speed Usage    R/U Rating
       KB/s     %   MIPS   MIPS  |     KB/s     %   MIPS   MIPS

22:    3890   617    613   3784  |   102407   779   1185   9235
23:    3859   624    630   3932  |   101158   783   1181   9254
24:    3806   627    652   4093  |   100341   787   1182   9307
25:    3763   634    677   4297  |    95747   765   1176   9003
----------------------------------------------------------------
Avr:          626    643   4026               779   1181   9200
Tot:          702    912   6613

7-Zip (A) 9.20  Copyright (c) 1999-2010 Igor Pavlov  2010-11-18
p7zip Version 9.20 (locale=C,Utf16=off,HugeFiles=on,8 CPUs)

RAM size:    1959 MB,  # CPU hardware threads:   8
RAM usage:   1701 MB,  # Benchmark threads:      8

Dict        Compressing          |        Decompressing
      Speed Usage    R/U Rating  |    Speed Usage    R/U Rating
       KB/s     %   MIPS   MIPS  |     KB/s     %   MIPS   MIPS

22:    3838   612    610   3734  |    91906   704   1176   8288
23:    3804   617    628   3876  |    92756   721   1177   8486
24:    3785   622    654   4069  |    92717   732   1174   8600
25:    3740   629    679   4270  |    95058   761   1175   8939
----------------------------------------------------------------
Avr:          620    643   3987               730   1175   8578
Tot:          675    909   6283

7-Zip (A) 9.20  Copyright (c) 1999-2010 Igor Pavlov  2010-11-18
p7zip Version 9.20 (locale=C,Utf16=off,HugeFiles=on,8 CPUs)

RAM size:    1959 MB,  # CPU hardware threads:   8
RAM usage:   1701 MB,  # Benchmark threads:      8

Dict        Compressing          |        Decompressing
      Speed Usage    R/U Rating  |    Speed Usage    R/U Rating
       KB/s     %   MIPS   MIPS  |     KB/s     %   MIPS   MIPS

22:    3867   618    609   3761  |    94768   728   1174   8547
23:    3820   623    624   3892  |    94927   737   1178   8684
24:    3770   618    655   4054  |    94882   747   1177   8801
25:    3743   631    677   4274  |    99291   791   1181   9337
----------------------------------------------------------------
Avr:          622    641   3995               751   1177   8842
Tot:          687    909   6419

Compression: 4026,3987,3995
Decompression: 9200,8578,8842
Total: 6613,6283,6419

##########################################################################

OpenSSL 1.0.2g  1 Mar 2016
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes
aes-128-cbc     144039.81k   408517.80k   747687.25k   959278.10k  1050957.14k
aes-128-cbc     143569.39k   410488.36k   747940.10k   960143.22k  1051369.47k
aes-192-cbc     135727.87k   359225.54k   601403.79k   738692.10k   790719.15k
aes-192-cbc     136252.92k   360075.03k   601700.53k   739367.94k   788454.14k
aes-256-cbc     132938.87k   330114.70k   520920.06k   617044.31k   650194.41k
aes-256-cbc     131460.35k   327970.68k   519592.70k   614981.40k   652621.14k

##########################################################################

System health while running tinymembench:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
19:34:43: 1400/1400MHz  0.35  17%   0%  16%   0%   0%   0%  42.0°C
19:35:43: 1400/1400MHz  0.73  11%   0%  11%   0%   0%   0%  46.0°C
19:36:43: 1400/1400MHz  0.90  12%   0%  12%   0%   0%   0%  46.0°C
19:37:43: 1400/1400MHz  0.97  12%   0%  12%   0%   0%   0%  46.0°C
19:38:43: 1400/1400MHz  1.14  13%   0%  13%   0%   0%   0%  42.0°C
19:39:43: 1400/1400MHz  1.17  14%   0%  13%   0%   0%   0%  42.0°C
19:40:43: 1400/1400MHz  1.20  14%   0%  13%   0%   0%   0%  42.0°C
19:41:43: 1400/1400MHz  1.14  13%   0%  13%   0%   0%   0%  42.0°C
19:42:43: 1400/1400MHz  1.11  12%   0%  12%   0%   0%   0%  42.0°C
19:43:43: 1400/1400MHz  1.04  12%   0%  12%   0%   0%   0%  42.0°C
19:44:43: 1400/1400MHz  1.01  12%   0%  12%   0%   0%   0%  42.0°C
19:45:43: 1400/1400MHz  1.00  12%   0%  12%   0%   0%   0%  42.0°C
19:46:44: 1400/1400MHz  1.11  13%   0%  13%   0%   0%   0%  46.0°C
19:47:44: 1400/1400MHz  1.33  15%   0%  14%   0%   0%   0%  46.0°C
19:48:44: 1400/1400MHz  1.28  15%   0%  14%   0%   0%   0%  46.0°C
19:49:44: 1400/1400MHz  1.19  13%   0%  13%   0%   0%   0%  42.0°C
19:50:44: 1400/1400MHz  1.07  12%   0%  12%   0%   0%   0%  42.0°C
19:51:44: 1400/1400MHz  1.02  12%   0%  12%   0%   0%   0%  42.0°C
19:52:44: 1400/1400MHz  1.01  12%   0%  12%   0%   0%   0%  42.0°C
19:53:44: 1400/1400MHz  1.00  12%   0%  12%   0%   0%   0%  42.0°C
19:54:44: 1400/1400MHz  1.00  13%   0%  13%   0%   0%   0%  42.0°C
19:55:44: 1400/1400MHz  1.21  14%   0%  14%   0%   0%   0%  42.0°C
19:56:44: 1400/1400MHz  1.22  14%   0%  14%   0%   0%   0%  42.0°C

System health while running 7-zip single core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
19:56:56: 1400/1400MHz  1.19  16%   0%  15%   0%   0%   0%  42.0°C
19:57:11: 1400/1400MHz  2.08  14%   0%  13%   0%   0%   0%  42.0°C
19:57:26: 1400/1400MHz  2.96  13%   0%  12%   0%   0%   0%  42.0°C
19:57:41: 1400/1400MHz  4.08  12%   0%  12%   0%   0%   0%  42.0°C
19:57:56: 1400/1400MHz  4.95  12%   0%  12%   0%   0%   0%  42.0°C
19:58:11: 1400/1400MHz  5.30  12%   0%  12%   0%   0%   0%  42.0°C
19:58:26: 1400/1400MHz  5.17  12%   0%  12%   0%   0%   0%  42.0°C
19:58:41: 1400/1400MHz  5.05  12%   0%  12%   0%   0%   0%  42.0°C
19:58:56: 1400/1400MHz  4.81  12%   0%  12%   0%   0%   0%  42.0°C
19:59:11: 1400/1400MHz  5.52  12%   0%  12%   0%   0%   0%  42.0°C
19:59:26: 1400/1400MHz  6.07  12%   0%  12%   0%   0%   0%  42.0°C
19:59:42: 1400/1400MHz  6.50  12%   0%  12%   0%   0%   0%  42.0°C
19:59:57: 1400/1400MHz  5.82  12%   0%  12%   0%   0%   0%  42.0°C
20:00:12: 1400/1400MHz  5.49  12%   0%  12%   0%   0%   0%  42.0°C
20:00:27: 1400/1400MHz  5.32  12%   0%  12%   0%   0%   0%  42.0°C
20:00:42: 1400/1400MHz  5.16  12%   0%  12%   0%   0%   0%  42.0°C
20:00:57: 1400/1400MHz  5.28  12%   0%  12%   0%   0%   0%  42.0°C
20:01:12: 1400/1400MHz  5.22  12%   0%  12%   0%   0%   0%  42.0°C
20:01:27: 1400/1400MHz  5.09  12%   0%  12%   0%   0%   0%  42.0°C
20:01:42: 1400/1400MHz  5.74  12%   0%  12%   0%   0%   0%  42.0°C
20:01:57: 1400/1400MHz  6.31  12%   0%  12%   0%   0%   0%  42.0°C
20:02:12: 1400/1400MHz  6.69  12%   0%  12%   0%   0%   0%  42.0°C
20:02:27: 1400/1400MHz  6.21  14%   0%  13%   0%   0%   0%  42.0°C
20:02:42: 1400/1400MHz  5.58  14%   0%  13%   0%   0%   0%  42.0°C
20:02:57: 1400/1400MHz  5.37  14%   0%  13%   0%   0%   0%  42.0°C
20:03:12: 1400/1400MHz  5.07  14%   0%  14%   0%   0%   0%  42.0°C
20:03:28: 1400/1400MHz  5.04  14%   0%  13%   0%   0%   0%  42.0°C
20:03:43: 1400/1400MHz  4.96  14%   0%  13%   0%   0%   0%  42.0°C
20:03:58: 1400/1400MHz  5.03  14%   0%  13%   0%   0%   0%  42.0°C
20:04:13: 1400/1400MHz  5.08  14%   0%  13%   0%   0%   0%  42.0°C
20:04:28: 1400/1400MHz  4.99  14%   0%  13%   0%   0%   0%  42.0°C
20:04:43: 1400/1400MHz  5.00  14%   0%  13%   0%   0%   0%  42.0°C
20:04:58: 1400/1400MHz  5.18  20%   1%  19%   0%   0%   0%  42.0°C
20:05:13: 1400/1400MHz  5.06  14%   0%  13%   0%   0%   0%  42.0°C
20:05:28: 1400/1400MHz  4.90  12%   0%  12%   0%   0%   0%  42.0°C
20:05:43: 1400/1400MHz  4.94  12%   0%  12%   0%   0%   0%  42.0°C
20:05:58: 1400/1400MHz  5.62  12%   0%  12%   0%   0%   0%  42.0°C
20:06:13: 1400/1400MHz  6.15  12%   0%  12%   0%   0%   0%  42.0°C
20:06:28: 1400/1400MHz  6.56  12%   0%  12%   0%   0%   0%  42.0°C
20:06:43: 1400/1400MHz  6.88  12%   0%  12%   0%   0%   0%  42.0°C
20:06:59: 1400/1400MHz  6.04  12%   0%  12%   0%   0%   0%  42.0°C
20:07:14: 1400/1400MHz  6.05  12%   0%  12%   0%   0%   0%  42.0°C
20:07:29: 1400/1400MHz  6.48  12%   0%  12%   0%   0%   0%  42.0°C
20:07:44: 1400/1400MHz  6.82  12%   0%  12%   0%   0%   0%  42.0°C
20:07:59: 1400/1400MHz  6.76  12%   0%  12%   0%   0%   0%  42.0°C
20:08:14: 1400/1400MHz  6.15  12%   0%  12%   0%   0%   0%  42.0°C
20:08:29: 1400/1400MHz  5.67  12%   0%  12%   0%   0%   0%  42.0°C
20:08:44: 1400/1400MHz  5.53  12%   0%  12%   0%   0%   0%  42.0°C
20:08:59: 1400/1400MHz  6.08  12%   0%  12%   0%   0%   0%  42.0°C
20:09:14: 1400/1400MHz  6.50  12%   0%  12%   0%   0%   0%  42.0°C
20:09:29: 1400/1400MHz  6.83  12%   0%  12%   0%   0%   0%  42.0°C
20:09:44: 1400/1400MHz  6.28  12%   0%  12%   0%   0%   0%  42.0°C
20:09:59: 1400/1400MHz  6.07  12%   0%  12%   0%   0%   0%  42.0°C
20:10:14: 1400/1400MHz  5.69  13%   0%  12%   0%   0%   0%  42.0°C
20:10:29: 1400/1400MHz  5.32  14%   0%  13%   0%   0%   0%  42.0°C
20:10:45: 1400/1400MHz  5.17  14%   0%  13%   0%   0%   0%  42.0°C
20:11:00: 1400/1400MHz  5.15  14%   0%  14%   0%   0%   0%  42.0°C
20:11:15: 1400/1400MHz  5.42  14%   0%  14%   0%   0%   0%  42.0°C
20:11:30: 1400/1400MHz  5.99  14%   0%  14%   0%   0%   0%  42.0°C
20:11:45: 1400/1400MHz  6.51  14%   0%  14%   0%   0%   0%  42.0°C
20:12:00: 1400/1400MHz  6.84  14%   0%  13%   0%   0%   0%  42.0°C
20:12:15: 1400/1400MHz  6.24  14%   0%  13%   0%   0%   0%  42.0°C
20:12:30: 1400/1400MHz  5.81  14%   0%  14%   0%   0%   0%  42.0°C
20:12:45: 1400/1400MHz  5.71  14%   0%  13%   0%   0%   0%  42.0°C
20:13:00: 1400/1400MHz  5.33  14%   0%  13%   0%   0%   0%  42.0°C
20:13:15: 1400/1400MHz  5.11  14%   0%  13%   0%   0%   0%  42.0°C
20:13:30: 1400/1400MHz  4.86  12%   0%  12%   0%   0%   0%  42.0°C
20:13:45: 1400/1400MHz  4.74  12%   0%  12%   0%   0%   0%  42.0°C
20:14:00: 1400/1400MHz  4.88  13%   0%  12%   0%   0%   0%  42.0°C
20:14:16: 1400/1400MHz  4.69  12%   0%  12%   0%   0%   0%  42.0°C
20:14:31: 1400/1400MHz  4.76  12%   0%  12%   0%   0%   0%  42.0°C
20:14:46: 1400/1400MHz  4.73  12%   0%  12%   0%   0%   0%  42.0°C
20:15:01: 1400/1400MHz  4.57  12%   0%  12%   0%   0%   0%  42.0°C
20:15:16: 1400/1400MHz  4.59  12%   0%  12%   0%   0%   0%  42.0°C
20:15:31: 1400/1400MHz  4.38  12%   0%  12%   0%   0%   0%  42.0°C
20:15:46: 1400/1400MHz  5.18  12%   0%  12%   0%   0%   0%  42.0°C
20:16:01: 1400/1400MHz  5.80  12%   0%  12%   0%   0%   0%  42.0°C
20:16:16: 1400/1400MHz  6.29  12%   0%  12%   0%   0%   0%  42.0°C

System health while running 7-zip multi core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
20:16:31: 1400/1400MHz  6.67  15%   0%  14%   0%   0%   0%  42.0°C
20:17:03: 1400/1400MHz  6.20  55%   0%  55%   0%   0%   0%  51.0°C
20:17:33: 1400/1400MHz  5.93  78%   0%  77%   0%   0%   0%  48.0°C
20:18:03: 1400/1400MHz  6.44  73%   1%  72%   0%   0%   0%  52.0°C
20:18:34: 1400/1400MHz  7.00  83%   1%  82%   0%   0%   0%  52.0°C
20:19:04: 1400/1400MHz  6.91  79%   0%  78%   0%   0%   0%  53.0°C
20:19:34: 1400/1400MHz  6.39  73%   0%  72%   0%   0%   0%  52.0°C
20:20:04: 1400/1400MHz  7.30  86%   1%  84%   0%   0%   0%  54.0°C
20:20:34: 1400/1400MHz  7.55  78%   0%  77%   0%   0%   0%  53.0°C
20:21:05: 1400/1400MHz  7.31  74%   0%  73%   0%   0%   0%  52.0°C
20:21:37: 1400/1400MHz  7.82  85%   1%  84%   0%   0%   0%  55.0°C

System health while running OpenSSL benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
20:21:38: 1400/1400MHz  7.82  18%   0%  17%   0%   0%   0%  53.0°C
20:21:48: 1400/1400MHz  6.69   0%   0%   0%   0%   0%   0%  47.0°C
20:21:58: 1400/1400MHz  5.89  12%   0%  12%   0%   0%   0%  47.0°C
20:22:08: 1400/1400MHz  4.88  12%   0%  12%   0%   0%   0%  47.0°C
20:22:18: 1400/1400MHz  4.28  12%   0%  12%   0%   0%   0%  46.0°C
20:22:28: 1400/1400MHz  3.78  12%   0%  12%   0%   0%   0%  46.0°C
20:22:38: 1400/1400MHz  3.35  12%   0%  12%   0%   0%   0%  46.0°C
20:22:48: 1400/1400MHz  2.99  12%   0%  12%   0%   0%   0%  46.0°C
20:22:59: 1400/1400MHz  2.68  12%   0%  12%   0%   0%   0%  46.0°C
20:23:09: 1400/1400MHz  2.50  12%   0%  12%   0%   0%   0%  46.0°C

##########################################################################

Linux 4.4.49-s5p6818 (FriendlyELEC) 	07/27/18 	_armv7l_	(8 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          17.74    0.08    0.44    0.12    0.00   81.61

Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
mmcblk0           4.01       105.96      1594.89     694614   10455452
mmcblk0boot1      0.01         0.03         0.00        216          0
mmcblk0boot0      0.01         0.03         0.00        216          0

              total        used        free      shared  buff/cache   available
Mem:           1.9G        189M        1.6G        9.8M         93M        1.6G
Swap:            0B          0B          0B

Filename				Type		Size	Used	Priority
