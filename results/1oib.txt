sbc-bench v0.6.1 FriendlyElec NanoPi NEO4 (Thu, 04 Oct 2018 13:27:06 +0000)

Distributor ID:	Debian
Description:	Debian GNU/Linux 9.5 (stretch)
Release:	9.5
Codename:	stretch

Armbian release info:
BOARD=nanopineo4
BOARD_NAME="Nanopi NEO4"
BOARDFAMILY=rk3399
VERSION=5.60
LINUXFAMILY=rk3399
BRANCH=default
ARCH=arm64
IMAGE_TYPE=stable
BOARD_TYPE=conf
INITRD_ARCH=arm64
KERNEL_IMAGE_TYPE=Image

/usr/bin/gcc (Debian 6.3.0-18+deb9u1) 6.3.0 20170516

Uptime: 13:27:07 up 7 min,  2 users,  load average: 0.97, 0.59, 0.29

Linux 4.4.156-rk3399 (nanopineo-shim) 	10/04/18 	_aarch64_	(6 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           5.38    0.00    3.83    0.28    0.00   90.51

Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
mmcblk0          15.45       611.59       393.65     257037     165444
zram0             2.86         1.75         9.68        736       4068
zram1             0.71         2.85         0.01       1196          4
zram2             0.71         2.85         0.01       1196          4
zram3             0.71         2.85         0.01       1196          4
zram4             0.71         2.85         0.01       1196          4

              total        used        free      shared  buff/cache   available
Mem:           919M         70M        466M        8.1M        382M        762M
Swap:          459M          0B        459M

Filename				Type		Size	Used	Priority
/dev/zram1                             	partition	117744	0	5
/dev/zram2                             	partition	117744	0	5
/dev/zram3                             	partition	117744	0	5
/dev/zram4                             	partition	117744	0	5

##########################################################################

Checking cpufreq OPP for cpu0-cpu3:

Cpufreq OPP: 1512    Measured: 1501.949/1500.693/1501.705
Cpufreq OPP: 1416    Measured: 1405.956/1406.293/1406.308
Cpufreq OPP: 1200    Measured: 1190.058/1190.552/1189.990
Cpufreq OPP: 1008    Measured: 998.519/998.350/998.169
Cpufreq OPP:  816    Measured: 806.406/806.337/806.209
Cpufreq OPP:  600    Measured: 589.974/590.271/586.937
Cpufreq OPP:  408    Measured: 397.128/398.263/397.203

Checking cpufreq OPP for cpu4-cpu5:

Cpufreq OPP: 1992    Measured: 1985.273/1984.809/1984.931
Cpufreq OPP: 1800    Measured: 1793.710/1792.256/1792.814
Cpufreq OPP: 1608    Measured: 1600.979/1599.809/1600.404
Cpufreq OPP: 1416    Measured: 1408.118/1408.963/1408.901
Cpufreq OPP: 1200    Measured: 1193.399/1193.178/1192.889
Cpufreq OPP: 1008    Measured: 1000.429/1001.241/1000.380
Cpufreq OPP:  816    Measured: 808.694/808.783/809.041
Cpufreq OPP:  600    Measured: 592.307/592.207/592.293
Cpufreq OPP:  408    Measured: 400.147/400.194/400.194

##########################################################################

Executing tinymembench on a little core:

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   1254.8 MB/s (0.8%)
 C copy backwards (32 byte blocks)                    :   1265.3 MB/s (0.5%)
 C copy backwards (64 byte blocks)                    :   1269.6 MB/s (0.5%)
 C copy                                               :   1262.1 MB/s (0.4%)
 C copy prefetched (32 bytes step)                    :    996.2 MB/s
 C copy prefetched (64 bytes step)                    :   1143.3 MB/s
 C 2-pass copy                                        :   1173.8 MB/s (0.1%)
 C 2-pass copy prefetched (32 bytes step)             :    843.8 MB/s
 C 2-pass copy prefetched (64 bytes step)             :    657.3 MB/s (0.2%)
 C fill                                               :   4625.2 MB/s
 C fill (shuffle within 16 byte blocks)               :   4626.4 MB/s
 C fill (shuffle within 32 byte blocks)               :   4625.9 MB/s
 C fill (shuffle within 64 byte blocks)               :   4624.5 MB/s
 ---
 standard memcpy                                      :   1305.4 MB/s
 standard memset                                      :   4629.7 MB/s
 ---
 NEON LDP/STP copy                                    :   1305.4 MB/s
 NEON LDP/STP copy pldl2strm (32 bytes step)          :    924.7 MB/s (0.5%)
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   1132.3 MB/s
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   1468.5 MB/s
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   1468.2 MB/s
 NEON LD1/ST1 copy                                    :   1296.4 MB/s (0.1%)
 NEON STP fill                                        :   4629.8 MB/s
 NEON STNP fill                                       :   1496.6 MB/s (1.5%)
 ARM LDP/STP copy                                     :   1307.5 MB/s
 ARM STP fill                                         :   4629.9 MB/s
 ARM STNP fill                                        :   1555.0 MB/s (4.1%)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :     97.5 MB/s (3.2%)
 NEON LDP/STP 2-pass copy (from framebuffer)          :     86.0 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :     23.6 MB/s
 NEON LD1/ST1 2-pass copy (from framebuffer)          :     22.8 MB/s
 ARM LDP/STP copy (from framebuffer)                  :     45.3 MB/s
 ARM LDP/STP 2-pass copy (from framebuffer)           :     44.6 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.1 ns          /     0.1 ns 
     65536 :    4.6 ns          /     7.7 ns 
    131072 :    7.1 ns          /    10.6 ns 
    262144 :    8.4 ns          /    11.9 ns 
    524288 :   30.8 ns          /    47.5 ns 
   1048576 :  219.1 ns          /   338.5 ns 
   2097152 :  311.1 ns          /   427.8 ns 
   4194304 :  357.7 ns          /   463.0 ns 
   8388608 :  381.0 ns          /   479.3 ns 
  16777216 :  386.1 ns          /   474.5 ns 
  33554432 :  398.0 ns          /   492.7 ns 
  67108864 :  403.9 ns          /   489.3 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.1 ns          /     0.1 ns 
     65536 :    4.6 ns          /     7.7 ns 
    131072 :    7.0 ns          /    10.7 ns 
    262144 :    8.4 ns          /    11.8 ns 
    524288 :   30.4 ns          /    45.6 ns 
   1048576 :  217.2 ns          /   335.2 ns 
   2097152 :  307.4 ns          /   422.0 ns 
   4194304 :  347.8 ns          /   453.0 ns 
   8388608 :  366.9 ns          /   465.6 ns 
  16777216 :  376.4 ns          /   471.2 ns 
  33554432 :  381.1 ns          /   473.9 ns 
  67108864 :  383.5 ns          /   406.9 ns 

Executing tinymembench on a big core:

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   2247.5 MB/s
 C copy backwards (32 byte blocks)                    :   2243.1 MB/s
 C copy backwards (64 byte blocks)                    :   2225.2 MB/s
 C copy                                               :   2224.2 MB/s
 C copy prefetched (32 bytes step)                    :   2202.8 MB/s
 C copy prefetched (64 bytes step)                    :   2200.8 MB/s
 C 2-pass copy                                        :   2022.0 MB/s
 C 2-pass copy prefetched (32 bytes step)             :   2034.7 MB/s
 C 2-pass copy prefetched (64 bytes step)             :   2033.7 MB/s
 C fill                                               :   4767.1 MB/s (0.3%)
 C fill (shuffle within 16 byte blocks)               :   4764.4 MB/s
 C fill (shuffle within 32 byte blocks)               :   4766.4 MB/s
 C fill (shuffle within 64 byte blocks)               :   4772.4 MB/s (1.3%)
 ---
 standard memcpy                                      :   2234.4 MB/s
 standard memset                                      :   4771.1 MB/s (0.3%)
 ---
 NEON LDP/STP copy                                    :   2240.9 MB/s
 NEON LDP/STP copy pldl2strm (32 bytes step)          :   2231.5 MB/s
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   2230.7 MB/s
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   2199.8 MB/s
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   2199.1 MB/s
 NEON LD1/ST1 copy                                    :   2238.7 MB/s
 NEON STP fill                                        :   4765.7 MB/s (0.3%)
 NEON STNP fill                                       :   4736.7 MB/s
 ARM LDP/STP copy                                     :   2240.8 MB/s
 ARM STP fill                                         :   4766.8 MB/s (0.3%)
 ARM STNP fill                                        :   4736.9 MB/s

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :    651.5 MB/s (0.2%)
 NEON LDP/STP 2-pass copy (from framebuffer)          :    563.4 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :    708.7 MB/s
 NEON LD1/ST1 2-pass copy (from framebuffer)          :    574.8 MB/s (1.2%)
 ARM LDP/STP copy (from framebuffer)                  :    463.5 MB/s (3.5%)
 ARM LDP/STP 2-pass copy (from framebuffer)           :    459.3 MB/s (0.1%)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    4.1 ns          /     6.5 ns 
    131072 :    6.2 ns          /     8.7 ns 
    262144 :    9.0 ns          /    11.6 ns 
    524288 :   10.4 ns          /    13.3 ns 
   1048576 :   21.5 ns          /    34.1 ns 
   2097152 :  218.9 ns          /   348.2 ns 
   4194304 :  308.6 ns          /   441.1 ns 
   8388608 :  356.4 ns          /   488.9 ns 
  16777216 :  302.4 ns          /   418.6 ns 
  33554432 :  393.5 ns          /   518.8 ns 
  67108864 :  342.6 ns          /   477.6 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    4.1 ns          /     6.5 ns 
    131072 :    6.2 ns          /     8.7 ns 
    262144 :    7.2 ns          /     9.5 ns 
    524288 :    7.8 ns          /     9.9 ns 
   1048576 :   18.5 ns          /    29.4 ns 
   2097152 :  217.1 ns          /   347.1 ns 
   4194304 :  186.4 ns          /   316.3 ns 
   8388608 :  344.8 ns          /   468.6 ns 
  16777216 :  365.2 ns          /   481.4 ns 
  33554432 :  375.6 ns          /   488.5 ns 
  67108864 :  382.4 ns          /   493.0 ns 

##########################################################################

OpenSSL 1.1.0f, built on 25 May 2017
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes
aes-128-cbc     103366.22k   326133.89k   683586.90k   979250.18k  1118778.71k  1130288.47k
aes-128-cbc     342621.36k   855561.60k  1263228.84k  1400367.79k  1487863.81k  1493079.38k
aes-192-cbc      98771.26k   293434.18k   565733.80k   759853.74k   843535.70k   849947.31k
aes-192-cbc     335661.52k   798613.27k  1062101.93k  1246531.93k  1305545.39k  1310135.64k
aes-256-cbc      96386.19k   273021.99k   495674.20k   638784.85k   696808.79k   697718.10k
aes-256-cbc     311135.55k   708827.67k   985984.77k  1071937.88k  1121965.40k  1121381.03k

##########################################################################

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq:  1483  1496  1493  1502  1501  1502  1501  1502  1502

RAM size:     919 MB,  # CPU hardware threads:   6
RAM usage:    675 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:        466   100    454    453  |      14378   100   1226   1226
23:        442   100    451    451  |      13859   100   1200   1199
24:        416   100    448    448  |      13337   100   1171   1171
----------------------------------  | ------------------------------
Avr:             100    451    451  |              100   1199   1199
Tot:             100    825    825

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq:  1982  1985  1985  1983  1984  1984  1984  1984  1984

RAM size:     919 MB,  # CPU hardware threads:   6
RAM usage:    675 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       1039   100   1012   1012  |      20979   100   1790   1789
23:        811   100    827    827  |      20217   100   1751   1749
24:        912   100    981    981  |      19399   100   1704   1703
----------------------------------  | ------------------------------
Avr:             100    940    940  |              100   1748   1747
Tot:             100   1344   1343

##########################################################################

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq:  1787  1979  1974  1979  1982  1984  1984  1984  1984

RAM size:     919 MB,  # CPU hardware threads:   6
RAM usage:    675 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       4456   505    859   4335  |      91804   515   1519   7829
23:       4019   475    862   4095  |      91999   524   1521   7961
24:       4105   524    843   4415  |      86147   519   1458   7561
----------------------------------  | ------------------------------
Avr:             501    855   4281  |              519   1499   7784
Tot:             510   1177   6033

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq:  1983  1984  1980  1984  1984  1984  1984  1984  1984

RAM size:     919 MB,  # CPU hardware threads:   6
RAM usage:    675 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       4334   481    876   4217  |      92555   519   1520   7893
23:       4167   493    862   4246  |      90006   521   1496   7788
24:       4085   521    844   4393  |      87696   524   1469   7697
----------------------------------  | ------------------------------
Avr:             498    861   4285  |              521   1495   7793
Tot:             510   1178   6039

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq:  1984  1985  1982  1984  1985  1984  1985  1985  1985

RAM size:     919 MB,  # CPU hardware threads:   6
RAM usage:    675 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       4250   467    886   4135  |      92313   518   1521   7873
23:       4001   478    854   4077  |      89520   517   1498   7746
24:       4173   535    839   4487  |      88845   522   1493   7798
----------------------------------  | ------------------------------
Avr:             493    859   4233  |              519   1504   7806
Tot:             506   1182   6019

Compression: 4281,4285,4233
Decompression: 7784,7793,7806
Total: 6033,6039,6019

##########################################################################

** cpuminer-multi 1.3.3 by tpruvot@github **
BTC donation address: 1FhDPLPpw18X4srecguG3MxJYe4a1JsZnd (tpruvot)

[2018-10-04 14:07:03] 6 miner threads started, using 'scrypt' algorithm.
[2018-10-04 14:07:03] CPU #5: 2.07 kH/s
[2018-10-04 14:07:03] CPU #4: 2.07 kH/s
[2018-10-04 14:07:03] CPU #1: 1.12 kH/s
[2018-10-04 14:07:03] CPU #3: 1.11 kH/s
[2018-10-04 14:07:03] CPU #2: 1.10 kH/s
[2018-10-04 14:07:03] CPU #0: 1.09 kH/s
[2018-10-04 14:07:08] Total: 8.55 kH/s
[2018-10-04 14:07:13] CPU #5: 2.07 kH/s
[2018-10-04 14:07:13] Total: 8.56 kH/s
[2018-10-04 14:07:13] CPU #4: 2.07 kH/s
[2018-10-04 14:07:13] CPU #1: 1.12 kH/s
[2018-10-04 14:07:13] CPU #0: 1.09 kH/s
[2018-10-04 14:07:13] CPU #2: 1.11 kH/s
[2018-10-04 14:07:13] CPU #3: 1.11 kH/s
[2018-10-04 14:07:18] Total: 8.57 kH/s
[2018-10-04 14:07:23] CPU #5: 2.07 kH/s
[2018-10-04 14:07:23] Total: 8.57 kH/s
[2018-10-04 14:07:23] CPU #4: 2.07 kH/s
[2018-10-04 14:07:23] CPU #1: 1.12 kH/s
[2018-10-04 14:07:23] CPU #2: 1.11 kH/s
[2018-10-04 14:07:23] CPU #3: 1.11 kH/s
[2018-10-04 14:07:23] CPU #0: 1.09 kH/s
[2018-10-04 14:07:28] Total: 8.55 kH/s
[2018-10-04 14:07:33] CPU #4: 2.07 kH/s
[2018-10-04 14:07:33] CPU #5: 2.04 kH/s
[2018-10-04 14:07:33] Total: 8.53 kH/s
[2018-10-04 14:07:33] CPU #1: 1.12 kH/s
[2018-10-04 14:07:33] CPU #0: 1.09 kH/s
[2018-10-04 14:07:33] CPU #2: 1.11 kH/s
[2018-10-04 14:07:33] CPU #3: 1.11 kH/s
[2018-10-04 14:07:38] Total: 8.57 kH/s
[2018-10-04 14:07:43] CPU #4: 2.07 kH/s
[2018-10-04 14:07:43] CPU #5: 2.07 kH/s
[2018-10-04 14:07:43] Total: 8.57 kH/s
[2018-10-04 14:07:43] CPU #1: 1.12 kH/s
[2018-10-04 14:07:43] CPU #0: 1.10 kH/s
[2018-10-04 14:07:43] CPU #2: 1.11 kH/s
[2018-10-04 14:07:43] CPU #3: 1.11 kH/s
[2018-10-04 14:07:48] Total: 8.57 kH/s
[2018-10-04 14:07:53] CPU #5: 2.06 kH/s
[2018-10-04 14:07:53] Total: 8.57 kH/s
[2018-10-04 14:07:53] CPU #4: 2.05 kH/s
[2018-10-04 14:07:53] CPU #1: 1.12 kH/s
[2018-10-04 14:07:53] CPU #0: 1.09 kH/s
[2018-10-04 14:07:53] CPU #2: 1.11 kH/s
[2018-10-04 14:07:53] CPU #3: 1.11 kH/s
[2018-10-04 14:07:58] Total: 8.55 kH/s
[2018-10-04 14:08:03] CPU #5: 2.07 kH/s
[2018-10-04 14:08:03] Total: 8.52 kH/s
[2018-10-04 14:08:03] CPU #4: 2.06 kH/s
[2018-10-04 14:08:03] CPU #1: 1.12 kH/s
[2018-10-04 14:08:03] CPU #2: 1.11 kH/s
[2018-10-04 14:08:03] CPU #0: 1.09 kH/s
[2018-10-04 14:08:03] CPU #3: 1.11 kH/s
[2018-10-04 14:08:08] Total: 8.56 kH/s
[2018-10-04 14:08:13] CPU #5: 2.07 kH/s
[2018-10-04 14:08:13] Total: 8.57 kH/s
[2018-10-04 14:08:13] CPU #4: 2.07 kH/s
[2018-10-04 14:08:13] CPU #1: 1.12 kH/s
[2018-10-04 14:08:13] CPU #0: 1.10 kH/s
[2018-10-04 14:08:13] CPU #2: 1.11 kH/s
[2018-10-04 14:08:13] CPU #3: 1.11 kH/s
[2018-10-04 14:08:18] Total: 8.57 kH/s
[2018-10-04 14:08:23] CPU #5: 2.07 kH/s
[2018-10-04 14:08:23] Total: 8.57 kH/s
[2018-10-04 14:08:23] CPU #4: 2.03 kH/s
[2018-10-04 14:08:23] CPU #1: 1.12 kH/s
[2018-10-04 14:08:23] CPU #3: 1.11 kH/s
[2018-10-04 14:08:23] CPU #2: 1.11 kH/s
[2018-10-04 14:08:23] CPU #0: 1.09 kH/s
[2018-10-04 14:08:28] Total: 8.53 kH/s
[2018-10-04 14:08:33] CPU #4: 2.07 kH/s
[2018-10-04 14:08:33] CPU #5: 2.07 kH/s
[2018-10-04 14:08:33] Total: 8.56 kH/s
[2018-10-04 14:08:33] CPU #1: 1.12 kH/s
[2018-10-04 14:08:33] CPU #0: 1.09 kH/s
[2018-10-04 14:08:33] CPU #3: 1.11 kH/s
[2018-10-04 14:08:33] CPU #2: 1.10 kH/s
[2018-10-04 14:08:38] Total: 8.57 kH/s
[2018-10-04 14:08:43] CPU #4: 2.07 kH/s
[2018-10-04 14:08:43] CPU #5: 2.07 kH/s
[2018-10-04 14:08:43] Total: 8.57 kH/s
[2018-10-04 14:08:43] CPU #1: 1.12 kH/s
[2018-10-04 14:08:43] CPU #0: 1.10 kH/s
[2018-10-04 14:08:43] CPU #3: 1.11 kH/s
[2018-10-04 14:08:43] CPU #2: 1.11 kH/s
[2018-10-04 14:08:48] Total: 8.56 kH/s
[2018-10-04 14:08:53] CPU #4: 2.05 kH/s
[2018-10-04 14:08:53] CPU #5: 2.04 kH/s
[2018-10-04 14:08:53] Total: 8.52 kH/s
[2018-10-04 14:08:53] CPU #1: 1.12 kH/s
[2018-10-04 14:08:53] CPU #0: 1.09 kH/s
[2018-10-04 14:08:53] CPU #3: 1.11 kH/s
[2018-10-04 14:08:53] CPU #2: 1.11 kH/s
[2018-10-04 14:08:58] Total: 8.54 kH/s
[2018-10-04 14:09:03] CPU #4: 2.07 kH/s
[2018-10-04 14:09:03] CPU #5: 2.07 kH/s
[2018-10-04 14:09:03] Total: 8.57 kH/s
[2018-10-04 14:09:03] CPU #0: 1.10 kH/s
[2018-10-04 14:09:03] CPU #1: 1.12 kH/s
[2018-10-04 14:09:03] CPU #3: 1.11 kH/s
[2018-10-04 14:09:03] CPU #2: 1.11 kH/s
[2018-10-04 14:09:08] Total: 8.57 kH/s
[2018-10-04 14:09:13] CPU #4: 2.07 kH/s
[2018-10-04 14:09:13] CPU #5: 2.07 kH/s
[2018-10-04 14:09:13] Total: 8.57 kH/s
[2018-10-04 14:09:13] CPU #1: 1.12 kH/s
[2018-10-04 14:09:13] CPU #0: 1.09 kH/s
[2018-10-04 14:09:13] CPU #3: 1.11 kH/s
[2018-10-04 14:09:13] CPU #2: 1.11 kH/s
[2018-10-04 14:09:18] Total: 8.56 kH/s
[2018-10-04 14:09:23] CPU #4: 2.07 kH/s
[2018-10-04 14:09:23] CPU #5: 2.02 kH/s
[2018-10-04 14:09:23] Total: 8.52 kH/s
[2018-10-04 14:09:23] CPU #1: 1.12 kH/s
[2018-10-04 14:09:23] CPU #2: 1.11 kH/s
[2018-10-04 14:09:23] CPU #0: 1.09 kH/s
[2018-10-04 14:09:23] CPU #3: 1.11 kH/s
[2018-10-04 14:09:28] Total: 8.56 kH/s
[2018-10-04 14:09:33] CPU #4: 2.07 kH/s
[2018-10-04 14:09:33] CPU #5: 2.07 kH/s
[2018-10-04 14:09:33] Total: 8.57 kH/s
[2018-10-04 14:09:33] CPU #0: 1.10 kH/s
[2018-10-04 14:09:33] CPU #1: 1.12 kH/s
[2018-10-04 14:09:33] CPU #2: 1.11 kH/s
[2018-10-04 14:09:33] CPU #3: 1.11 kH/s
[2018-10-04 14:09:38] Total: 8.57 kH/s
[2018-10-04 14:09:43] CPU #4: 2.07 kH/s
[2018-10-04 14:09:43] CPU #5: 2.07 kH/s
[2018-10-04 14:09:43] Total: 8.57 kH/s
[2018-10-04 14:09:43] CPU #0: 1.10 kH/s
[2018-10-04 14:09:43] CPU #1: 1.12 kH/s
[2018-10-04 14:09:43] CPU #2: 1.11 kH/s
[2018-10-04 14:09:43] CPU #3: 1.11 kH/s
[2018-10-04 14:09:48] Total: 8.57 kH/s
[2018-10-04 14:09:53] CPU #5: 2.06 kH/s
[2018-10-04 14:09:53] Total: 8.52 kH/s
[2018-10-04 14:09:53] CPU #4: 2.04 kH/s
[2018-10-04 14:09:53] CPU #1: 1.12 kH/s
[2018-10-04 14:09:53] CPU #0: 1.09 kH/s
[2018-10-04 14:09:53] CPU #2: 1.11 kH/s
[2018-10-04 14:09:53] CPU #3: 1.11 kH/s
[2018-10-04 14:09:58] Total: 8.57 kH/s
[2018-10-04 14:10:03] CPU #4: 2.07 kH/s
[2018-10-04 14:10:03] CPU #5: 2.07 kH/s
[2018-10-04 14:10:03] Total: 8.57 kH/s
[2018-10-04 14:10:03] CPU #0: 1.10 kH/s
[2018-10-04 14:10:03] CPU #1: 1.12 kH/s
[2018-10-04 14:10:03] CPU #2: 1.11 kH/s
[2018-10-04 14:10:03] CPU #3: 1.11 kH/s
[2018-10-04 14:10:08] Total: 8.57 kH/s
[2018-10-04 14:10:13] CPU #4: 2.06 kH/s
[2018-10-04 14:10:13] CPU #5: 2.06 kH/s
[2018-10-04 14:10:13] Total: 8.56 kH/s
[2018-10-04 14:10:13] CPU #1: 1.12 kH/s
[2018-10-04 14:10:13] CPU #0: 1.09 kH/s
[2018-10-04 14:10:13] CPU #2: 1.11 kH/s
[2018-10-04 14:10:13] CPU #3: 1.11 kH/s
[2018-10-04 14:10:18] Total: 8.52 kH/s
[2018-10-04 14:10:23] CPU #4: 2.07 kH/s
[2018-10-04 14:10:23] CPU #5: 2.05 kH/s
[2018-10-04 14:10:23] Total: 8.55 kH/s
[2018-10-04 14:10:23] CPU #1: 1.12 kH/s
[2018-10-04 14:10:23] CPU #0: 1.09 kH/s
[2018-10-04 14:10:23] CPU #2: 1.11 kH/s
[2018-10-04 14:10:23] CPU #3: 1.11 kH/s
[2018-10-04 14:10:28] Total: 8.57 kH/s
[2018-10-04 14:10:33] CPU #4: 2.07 kH/s
[2018-10-04 14:10:33] CPU #5: 2.07 kH/s
[2018-10-04 14:10:33] Total: 8.57 kH/s
[2018-10-04 14:10:33] CPU #1: 1.12 kH/s
[2018-10-04 14:10:33] CPU #0: 1.10 kH/s
[2018-10-04 14:10:33] CPU #2: 1.11 kH/s
[2018-10-04 14:10:33] CPU #3: 1.11 kH/s
[2018-10-04 14:10:38] Total: 8.57 kH/s
[2018-10-04 14:10:43] CPU #4: 2.07 kH/s
[2018-10-04 14:10:43] CPU #5: 2.04 kH/s
[2018-10-04 14:10:43] Total: 8.54 kH/s
[2018-10-04 14:10:43] CPU #1: 1.12 kH/s
[2018-10-04 14:10:43] CPU #0: 1.09 kH/s
[2018-10-04 14:10:43] CPU #2: 1.11 kH/s
[2018-10-04 14:10:43] CPU #3: 1.11 kH/s
[2018-10-04 14:10:48] Total: 8.52 kH/s
[2018-10-04 14:10:53] CPU #4: 2.07 kH/s
[2018-10-04 14:10:53] CPU #5: 2.07 kH/s
[2018-10-04 14:10:53] Total: 8.56 kH/s
[2018-10-04 14:10:53] CPU #1: 1.12 kH/s
[2018-10-04 14:10:53] CPU #0: 1.09 kH/s
[2018-10-04 14:10:53] CPU #2: 1.11 kH/s
[2018-10-04 14:10:53] CPU #3: 1.11 kH/s
[2018-10-04 14:10:58] Total: 8.57 kH/s
[2018-10-04 14:11:03] CPU #4: 2.07 kH/s
[2018-10-04 14:11:03] CPU #5: 2.07 kH/s
[2018-10-04 14:11:03] Total: 8.57 kH/s
[2018-10-04 14:11:03] CPU #1: 1.12 kH/s
[2018-10-04 14:11:03] CPU #0: 1.09 kH/s
[2018-10-04 14:11:03] CPU #2: 1.11 kH/s
[2018-10-04 14:11:03] CPU #3: 1.11 kH/s
[2018-10-04 14:11:08] Total: 8.57 kH/s
[2018-10-04 14:11:13] CPU #5: 2.06 kH/s
[2018-10-04 14:11:13] Total: 8.56 kH/s
[2018-10-04 14:11:13] CPU #4: 2.04 kH/s
[2018-10-04 14:11:13] CPU #1: 1.12 kH/s
[2018-10-04 14:11:13] CPU #0: 1.09 kH/s
[2018-10-04 14:11:13] CPU #3: 1.11 kH/s
[2018-10-04 14:11:13] CPU #2: 1.10 kH/s
[2018-10-04 14:11:18] Total: 8.53 kH/s
[2018-10-04 14:11:23] CPU #4: 2.07 kH/s
[2018-10-04 14:11:23] CPU #5: 2.07 kH/s
[2018-10-04 14:11:23] Total: 8.56 kH/s
[2018-10-04 14:11:23] CPU #1: 1.12 kH/s
[2018-10-04 14:11:23] CPU #0: 1.10 kH/s
[2018-10-04 14:11:23] CPU #2: 1.11 kH/s
[2018-10-04 14:11:23] CPU #3: 1.11 kH/s
[2018-10-04 14:11:28] Total: 8.57 kH/s
[2018-10-04 14:11:33] CPU #4: 2.07 kH/s
[2018-10-04 14:11:33] CPU #5: 2.07 kH/s
[2018-10-04 14:11:33] Total: 8.57 kH/s
[2018-10-04 14:11:33] CPU #0: 1.10 kH/s
[2018-10-04 14:11:33] CPU #1: 1.12 kH/s
[2018-10-04 14:11:33] CPU #3: 1.11 kH/s
[2018-10-04 14:11:33] CPU #2: 1.11 kH/s
[2018-10-04 14:11:38] Total: 8.57 kH/s
[2018-10-04 14:11:43] CPU #5: 2.07 kH/s
[2018-10-04 14:11:43] Total: 8.56 kH/s
[2018-10-04 14:11:43] CPU #4: 2.03 kH/s
[2018-10-04 14:11:43] CPU #1: 1.12 kH/s
[2018-10-04 14:11:43] CPU #0: 1.09 kH/s
[2018-10-04 14:11:43] CPU #3: 1.11 kH/s
[2018-10-04 14:11:43] CPU #2: 1.10 kH/s
[2018-10-04 14:11:48] Total: 8.52 kH/s
[2018-10-04 14:11:53] CPU #4: 2.07 kH/s
[2018-10-04 14:11:53] CPU #5: 2.07 kH/s
[2018-10-04 14:11:53] Total: 8.57 kH/s
[2018-10-04 14:11:53] CPU #1: 1.12 kH/s
[2018-10-04 14:11:53] CPU #0: 1.10 kH/s
[2018-10-04 14:11:53] CPU #3: 1.11 kH/s
[2018-10-04 14:11:53] CPU #2: 1.11 kH/s
[2018-10-04 14:11:58] Total: 8.57 kH/s

Total Scores: 8.57,8.56,8.55,8.54,8.53,8.52

##########################################################################

Testing clockspeeds again. System health now:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
14:11:44: 1992/1512MHz  6.26 100%   0%  99%   0%   0%   0%  82.8°C

Checking cpufreq OPP for cpu0-cpu3:

Cpufreq OPP: 1512    Measured: 1502.054/1502.264/1499.821
Cpufreq OPP: 1416    Measured: 1406.109/1406.293/1406.201
Cpufreq OPP: 1200    Measured: 1190.017/1189.168/1189.921
Cpufreq OPP: 1008    Measured: 996.845/998.277/998.181
Cpufreq OPP:  816    Measured: 806.170/806.042/806.101
Cpufreq OPP:  600    Measured: 590.198/590.343/590.363
Cpufreq OPP:  408    Measured: 398.427/398.493/398.231

Checking cpufreq OPP for cpu4-cpu5:

Cpufreq OPP: 1992    Measured: 1984.955/1985.248/1985.150
Cpufreq OPP: 1800    Measured: 1792.216/1793.092/1792.973
Cpufreq OPP: 1608    Measured: 1599.968/1601.198/1601.158
Cpufreq OPP: 1416    Measured: 1408.317/1409.178/1409.009
Cpufreq OPP: 1200    Measured: 1192.999/1193.027/1192.738
Cpufreq OPP: 1008    Measured: 1001.047/1000.489/1001.095
Cpufreq OPP:  816    Measured: 809.070/809.169/809.150
Cpufreq OPP:  600    Measured: 592.021/592.035/592.307
Cpufreq OPP:  408    Measured: 399.660/400.175/400.014

##########################################################################

System health while running tinymembench:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
13:27:19: 1992/1512MHz  0.98   9%   2%   5%   0%   0%   1%  41.7°C
13:29:19: 1992/1512MHz  1.00  16%   0%  16%   0%   0%   0%  41.1°C
13:31:19: 1992/1512MHz  1.00  16%   0%  16%   0%   0%   0%  41.1°C
13:33:19: 1992/1512MHz  1.00  16%   0%  16%   0%   0%   0%  40.6°C
13:35:19: 1992/1512MHz  1.00  16%   0%  16%   0%   0%   0%  41.1°C
13:37:19: 1992/1512MHz  1.00  16%   0%  16%   0%   0%   0%  40.6°C
13:39:20: 1992/1512MHz  1.00  16%   0%  16%   0%   0%   0%  40.0°C
13:41:20: 1992/1512MHz  1.00  16%   0%  16%   0%   0%   0%  40.6°C
13:43:22: 1992/1512MHz  1.07  16%   0%  16%   0%   0%   0%  45.0°C
13:45:23: 1992/1512MHz  1.02  17%   0%  16%   0%   0%   0%  45.6°C
13:47:23: 1992/1512MHz  1.00  16%   0%  16%   0%   0%   0%  44.4°C
13:49:23: 1992/1512MHz  1.00  16%   0%  16%   0%   0%   0%  45.0°C
13:51:23: 1992/1512MHz  1.00  16%   0%  16%   0%   0%   0%  45.6°C
13:53:23: 1992/1512MHz  1.00  16%   0%  16%   0%   0%   0%  45.6°C

System health while running OpenSSL benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
13:55:17: 1992/1512MHz  1.00  15%   0%  14%   0%   0%   0%  46.9°C
13:55:27: 1992/1512MHz  1.00  16%   0%  16%   0%   0%   0%  44.4°C
13:55:38: 1992/1512MHz  1.00  16%   0%  16%   0%   0%   0%  48.8°C
13:55:48: 1992/1512MHz  1.00  16%   0%  16%   0%   0%   0%  48.8°C
13:55:58: 1992/1512MHz  1.00  16%   0%  16%   0%   0%   0%  44.4°C
13:56:08: 1992/1512MHz  1.00  16%   0%  16%   0%   0%   0%  44.4°C
13:56:18: 1992/1512MHz  1.00  16%   0%  16%   0%   0%   0%  48.8°C
13:56:28: 1992/1512MHz  1.00  16%   0%  16%   0%   0%   0%  49.4°C
13:56:38: 1992/1512MHz  1.00  16%   0%  16%   0%   0%   0%  45.6°C
13:56:48: 1992/1512MHz  1.00  16%   0%  16%   0%   0%   0%  48.1°C
13:56:58: 1992/1512MHz  1.00  16%   0%  16%   0%   0%   0%  49.4°C

System health while running 7-zip single core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
13:57:06: 1992/1512MHz  1.00  15%   0%  14%   0%   0%   0%  50.0°C
13:58:06: 1992/1512MHz  3.43  16%   0%  16%   0%   0%   0%  44.4°C
13:59:06: 1992/1512MHz  3.89  16%   0%  16%   0%   0%   0%  44.4°C
14:00:06: 1992/1512MHz  4.36  16%   0%  16%   0%   0%   0%  44.4°C
14:01:06: 1992/1512MHz  3.81  16%   0%  16%   0%   0%   0%  43.9°C
14:02:06: 1992/1512MHz  4.69  16%   0%  16%   0%   0%   0%  46.2°C
14:03:06: 1992/1512MHz  4.82  16%   0%  16%   0%   0%   0%  46.9°C
14:04:06: 1992/1512MHz  4.60  16%   0%  16%   0%   0%   0%  47.5°C

System health while running 7-zip multi core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
14:04:56: 1992/1512MHz  5.16  15%   0%  14%   0%   0%   0%  48.1°C
14:05:18: 1992/1512MHz  5.19  78%   1%  77%   0%   0%   0%  58.9°C
14:05:38: 1992/1512MHz  5.17  82%   1%  80%   0%   0%   0%  57.8°C
14:06:00: 1992/1512MHz  5.54  77%   1%  76%   0%   0%   0%  60.0°C
14:06:20: 1992/1512MHz  5.42  82%   1%  80%   0%   0%   0%  60.0°C
14:06:43: 1992/1512MHz  4.90  76%   1%  75%   0%   0%   0%  61.2°C

System health while running cpuminer:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
14:07:03: 1992/1512MHz  4.76  18%   0%  17%   0%   0%   0%  57.8°C
14:07:29: 1992/1512MHz  5.12  99%   0%  99%   0%   0%   0%  67.8°C
14:07:57: 1992/1512MHz  5.53 100%   0%  99%   0%   0%   0%  69.4°C
14:08:25: 1992/1512MHz  5.83 100%   0%  99%   0%   0%   0%  71.1°C
14:08:54: 1992/1512MHz  6.06 100%   0%  99%   0%   0%   0%  72.8°C
14:09:22: 1992/1512MHz  6.16 100%   0%  99%   0%   0%   0%  73.9°C
14:09:50: 1992/1512MHz  6.26 100%   0%  99%   0%   0%   0%  76.2°C
14:10:19: 1992/1512MHz  6.27 100%   0%  99%   0%   0%   0%  78.1°C
14:10:47: 1992/1512MHz  6.23 100%   0%  99%   0%   0%   0%  79.4°C
14:11:16: 1992/1512MHz  6.25 100%   0%  99%   0%   0%   0%  80.6°C
14:11:44: 1992/1512MHz  6.26 100%   0%  99%   0%   0%   0%  82.8°C

##########################################################################

Linux 4.4.156-rk3399 (nanopineo-shim) 	10/04/18 	_aarch64_	(6 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          25.62    0.01    0.70    0.04    0.00   73.63

Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
mmcblk0           2.16        84.13        53.29     263253     166748
zram0             0.39         0.24         1.33        736       4152
zram1             0.26         0.39         0.64       1224       1996
zram2             0.26         0.40         0.64       1248       1996
zram3             0.26         0.39         0.64       1232       1996
zram4             0.26         0.40         0.64       1264       1992

              total        used        free      shared  buff/cache   available
Mem:           919M         69M        691M        4.1M        158M        769M
Swap:          459M        7.7M        452M

Filename				Type		Size	Used	Priority
/dev/zram1                             	partition	117744	1984	5
/dev/zram2                             	partition	117744	1980	5
/dev/zram3                             	partition	117744	1976	5
/dev/zram4                             	partition	117744	1960	5

Architecture:          aarch64
Byte Order:            Little Endian
CPU(s):                6
On-line CPU(s) list:   0-5
Thread(s) per core:    1
Core(s) per socket:    3
Socket(s):             2
Model:                 4
CPU max MHz:           1512.0000
CPU min MHz:           408.0000
BogoMIPS:              48.00
Flags:                 fp asimd evtstrm aes pmull sha1 sha2 crc32
