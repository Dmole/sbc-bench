sbc-bench v0.6.2 Pine64 RockPro64 (Thu, 22 Nov 2018 16:11:46 +0000)

Distributor ID:	Debian
Description:	Debian GNU/Linux 9.6 (stretch)
Release:	9.6
Codename:	stretch
Architecture:	arm64

/usr/bin/gcc (Debian 6.3.0-18+deb9u1) 6.3.0 20170516

Uptime: 16:11:46 up 43 min,  1 user,  load average: 0.10, 0.49, 1.29

Linux 4.4.154-1124-rockchip-ayufan-ged3ce4d15ec1 (rockpro64) 	11/22/18 	_aarch64_	(6 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          15.17    0.00    0.41    0.10    0.00   84.32

Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
mmcblk0           5.11        91.24       229.48     239729     602956

              total        used        free      shared  buff/cache   available
Mem:           3.8G         60M        3.2G        8.2M        540M        3.7G
Swap:            0B          0B          0B



##########################################################################

Checking cpufreq OPP for cpu0-cpu3:

Cpufreq OPP: 1416    Measured: 1413.466/1413.079/1413.652
Cpufreq OPP: 1200    Measured: 1197.827/1197.688/1197.730
Cpufreq OPP: 1008    Measured: 1005.529/1005.823/1005.798
Cpufreq OPP:  816    Measured: 813.851/813.551/813.831
Cpufreq OPP:  600    Measured: 597.614/597.904/597.458
Cpufreq OPP:  408    Measured: 405.982/405.671/405.812

Checking cpufreq OPP for cpu4-cpu5:

Cpufreq OPP: 1800    Measured: 1798.307/1798.447/1798.146
Cpufreq OPP: 1608    Measured: 1606.377/1606.297/1606.637
Cpufreq OPP: 1416    Measured: 1414.286/1414.519/1414.379
Cpufreq OPP: 1200    Measured: 1198.327/1198.452/1198.369
Cpufreq OPP: 1008    Measured: 1006.190/1006.459/1006.521
Cpufreq OPP:  816    Measured: 814.402/814.513/814.422
Cpufreq OPP:  600    Measured: 598.398/598.378/598.344
Cpufreq OPP:  408    Measured: 406.250/406.211/406.158

##########################################################################

Executing tinymembench on a little core:

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   1759.4 MB/s (0.4%)
 C copy backwards (32 byte blocks)                    :   1764.6 MB/s (0.7%)
 C copy backwards (64 byte blocks)                    :   1767.0 MB/s (0.9%)
 C copy                                               :   1858.3 MB/s (0.7%)
 C copy prefetched (32 bytes step)                    :   1299.0 MB/s (0.2%)
 C copy prefetched (64 bytes step)                    :   1495.5 MB/s
 C 2-pass copy                                        :   1526.0 MB/s
 C 2-pass copy prefetched (32 bytes step)             :   1072.0 MB/s
 C 2-pass copy prefetched (64 bytes step)             :   1023.8 MB/s
 C fill                                               :   8286.5 MB/s
 C fill (shuffle within 16 byte blocks)               :   8285.2 MB/s
 C fill (shuffle within 32 byte blocks)               :   8281.5 MB/s
 C fill (shuffle within 64 byte blocks)               :   8276.2 MB/s
 ---
 standard memcpy                                      :   1807.2 MB/s
 standard memset                                      :   8312.9 MB/s
 ---
 NEON LDP/STP copy                                    :   1853.0 MB/s (0.2%)
 NEON LDP/STP copy pldl2strm (32 bytes step)          :   1232.3 MB/s (1.1%)
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   1545.7 MB/s
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   2021.2 MB/s
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   2026.4 MB/s
 NEON LD1/ST1 copy                                    :   1852.9 MB/s (0.2%)
 NEON STP fill                                        :   8312.8 MB/s
 NEON STNP fill                                       :   2647.2 MB/s (0.6%)
 ARM LDP/STP copy                                     :   1854.5 MB/s (0.2%)
 ARM STP fill                                         :   8312.6 MB/s
 ARM STNP fill                                        :   2670.9 MB/s (0.7%)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :    234.5 MB/s
 NEON LDP/STP 2-pass copy (from framebuffer)          :    226.7 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :     61.2 MB/s
 NEON LD1/ST1 2-pass copy (from framebuffer)          :     60.6 MB/s
 ARM LDP/STP copy (from framebuffer)                  :    118.7 MB/s
 ARM LDP/STP 2-pass copy (from framebuffer)           :    116.8 MB/s (0.1%)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    4.8 ns          /     8.2 ns 
    131072 :    7.4 ns          /    11.2 ns 
    262144 :    8.7 ns          /    12.4 ns 
    524288 :   11.8 ns          /    16.0 ns 
   1048576 :   85.0 ns          /   129.7 ns 
   2097152 :  124.0 ns          /   167.2 ns 
   4194304 :  148.9 ns          /   187.0 ns 
   8388608 :  161.8 ns          /   196.4 ns 
  16777216 :  169.9 ns          /   203.4 ns 
  33554432 :  173.7 ns          /   207.1 ns 
  67108864 :  176.7 ns          /   211.4 ns 

Executing tinymembench on a big core:

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   3691.1 MB/s
 C copy backwards (32 byte blocks)                    :   3691.4 MB/s
 C copy backwards (64 byte blocks)                    :   3692.0 MB/s
 C copy                                               :   3720.3 MB/s
 C copy prefetched (32 bytes step)                    :   3700.5 MB/s
 C copy prefetched (64 bytes step)                    :   3697.4 MB/s (0.8%)
 C 2-pass copy                                        :   3357.4 MB/s
 C 2-pass copy prefetched (32 bytes step)             :   3426.8 MB/s
 C 2-pass copy prefetched (64 bytes step)             :   3425.3 MB/s
 C fill                                               :   8410.1 MB/s (0.5%)
 C fill (shuffle within 16 byte blocks)               :   8422.3 MB/s
 C fill (shuffle within 32 byte blocks)               :   8434.9 MB/s
 C fill (shuffle within 64 byte blocks)               :   8438.4 MB/s
 ---
 standard memcpy                                      :   3724.1 MB/s
 standard memset                                      :   8402.4 MB/s (0.5%)
 ---
 NEON LDP/STP copy                                    :   3720.5 MB/s
 NEON LDP/STP copy pldl2strm (32 bytes step)          :   3726.4 MB/s (0.1%)
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   3724.5 MB/s
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   3697.1 MB/s
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   3695.8 MB/s
 NEON LD1/ST1 copy                                    :   3720.5 MB/s
 NEON STP fill                                        :   8402.8 MB/s (0.5%)
 NEON STNP fill                                       :   8402.5 MB/s
 ARM LDP/STP copy                                     :   3720.1 MB/s
 ARM STP fill                                         :   8403.8 MB/s (0.5%)
 ARM STNP fill                                        :   8398.9 MB/s

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :    719.4 MB/s (0.6%)
 NEON LDP/STP 2-pass copy (from framebuffer)          :    691.8 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :    809.2 MB/s (0.3%)
 NEON LD1/ST1 2-pass copy (from framebuffer)          :    749.6 MB/s
 ARM LDP/STP copy (from framebuffer)                  :    536.6 MB/s
 ARM LDP/STP 2-pass copy (from framebuffer)           :    526.9 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    4.5 ns          /     7.1 ns 
    131072 :    6.8 ns          /     9.6 ns 
    262144 :    9.8 ns          /    12.8 ns 
    524288 :   11.4 ns          /    14.6 ns 
   1048576 :   13.8 ns          /    17.7 ns 
   2097152 :   93.7 ns          /   142.2 ns 
   4194304 :  133.6 ns          /   179.8 ns 
   8388608 :  158.1 ns          /   200.3 ns 
  16777216 :  170.3 ns          /   208.3 ns 
  33554432 :  176.4 ns          /   213.7 ns 
  67108864 :  186.4 ns          /   227.3 ns 

##########################################################################

OpenSSL 1.1.0f, built on 25 May 2017
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes
aes-128-cbc      97185.54k   307223.77k   643733.93k   921871.36k  1053032.45k  1064075.26k
aes-128-cbc     312690.00k   778289.47k  1148811.43k  1274324.65k  1348815.53k  1353012.57k
aes-192-cbc      92873.19k   276135.08k   532569.09k   715182.76k   794146.13k   793324.20k
aes-192-cbc     285943.50k   710344.17k   954446.42k  1123025.24k  1187826.35k  1190259.37k
aes-256-cbc      90741.53k   257208.60k   466623.57k   601252.86k   655734.10k   653781.67k
aes-256-cbc     279155.16k   638876.03k   891925.85k   971621.03k  1020231.68k  1018478.59k

##########################################################################

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq:  1409  1412  1413  1413  1413  1413  1413  1413  1413

RAM size:    3875 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:        755   100    735    735  |      15566   100   1328   1328
23:        728   100    742    742  |      15250   100   1320   1320
24:        702   100    755    755  |      14925   100   1311   1310
25:        674   100    770    770  |      14414   100   1283   1283
----------------------------------  | ------------------------------
Avr:             100    751    750  |              100   1310   1310
Tot:             100   1030   1030

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq:  1794  1795  1798  1798  1798  1798  1798  1798  1798

RAM size:    3875 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       1518   100   1477   1477  |      21937   100   1872   1871
23:       1462   100   1490   1490  |      21509   100   1862   1861
24:       1388   100   1494   1493  |      21056   100   1849   1848
25:       1329   100   1518   1518  |      20534   100   1828   1827
----------------------------------  | ------------------------------
Avr:             100   1495   1494  |              100   1853   1852
Tot:             100   1674   1673

##########################################################################

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq:  1360  1794  1798  1798  1798  1798  1798  1796  1798

RAM size:    3875 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       4831   491    958   4700  |      96809   531   1556   8256
23:       4375   463    963   4458  |      94356   529   1542   8165
24:       4370   498    944   4700  |      91981   528   1530   8073
25:       4468   548    931   5102  |      89753   530   1507   7988
----------------------------------  | ------------------------------
Avr:             500    949   4740  |              529   1534   8120
Tot:             515   1241   6430

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq:  1793  1798  1798  1798  1798  1798  1798  1798  1798

RAM size:    3875 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       4385   445    958   4266  |      96926   532   1554   8266
23:       4561   491    946   4648  |      94327   529   1543   8162
24:       4254   481    951   4574  |      91729   527   1528   8051
25:       4356   530    938   4974  |      89745   530   1506   7987
----------------------------------  | ------------------------------
Avr:             487    948   4616  |              530   1533   8117
Tot:             508   1241   6366

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq:  1796  1798  1797  1798  1798  1798  1798  1798  1798

RAM size:    3875 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       4517   448    981   4394  |      96750   530   1556   8251
23:       4613   494    951   4700  |      95047   532   1545   8224
24:       4688   536    940   5041  |      92276   529   1531   8099
25:       4308   525    937   4920  |      89888   531   1507   8000
----------------------------------  | ------------------------------
Avr:             501    952   4764  |              531   1535   8144
Tot:             516   1244   6454

Compression: 4740,4616,4764
Decompression: 8120,8117,8144
Total: 6430,6366,6454

##########################################################################

** cpuminer-multi 1.3.3 by tpruvot@github **
BTC donation address: 1FhDPLPpw18X4srecguG3MxJYe4a1JsZnd (tpruvot)

[2018-11-22 16:37:18] 6 miner threads started, using 'scrypt' algorithm.
[2018-11-22 16:37:18] CPU #5: 1.87 kH/s
[2018-11-22 16:37:18] CPU #4: 1.88 kH/s
[2018-11-22 16:37:18] CPU #0: 1.12 kH/s
[2018-11-22 16:37:18] CPU #1: 1.12 kH/s
[2018-11-22 16:37:18] CPU #2: 1.12 kH/s
[2018-11-22 16:37:18] CPU #3: 1.12 kH/s
[2018-11-22 16:37:23] Total: 8.22 kH/s
[2018-11-22 16:37:28] CPU #5: 1.88 kH/s
[2018-11-22 16:37:28] Total: 8.25 kH/s
[2018-11-22 16:37:28] CPU #4: 1.88 kH/s
[2018-11-22 16:37:28] CPU #3: 1.12 kH/s
[2018-11-22 16:37:28] CPU #0: 1.12 kH/s
[2018-11-22 16:37:28] CPU #1: 1.12 kH/s
[2018-11-22 16:37:28] CPU #2: 1.13 kH/s
[2018-11-22 16:37:33] Total: 8.25 kH/s
[2018-11-22 16:37:38] CPU #5: 1.88 kH/s
[2018-11-22 16:37:38] Total: 8.25 kH/s
[2018-11-22 16:37:38] CPU #4: 1.88 kH/s
[2018-11-22 16:37:38] CPU #0: 1.12 kH/s
[2018-11-22 16:37:38] CPU #3: 1.12 kH/s
[2018-11-22 16:37:38] CPU #1: 1.12 kH/s
[2018-11-22 16:37:38] CPU #2: 1.13 kH/s
[2018-11-22 16:37:43] Total: 8.25 kH/s
[2018-11-22 16:37:48] CPU #5: 1.88 kH/s
[2018-11-22 16:37:48] Total: 8.24 kH/s
[2018-11-22 16:37:48] CPU #4: 1.88 kH/s
[2018-11-22 16:37:48] CPU #3: 1.12 kH/s
[2018-11-22 16:37:48] CPU #0: 1.12 kH/s
[2018-11-22 16:37:48] CPU #1: 1.12 kH/s
[2018-11-22 16:37:48] CPU #2: 1.13 kH/s
[2018-11-22 16:37:53] Total: 8.25 kH/s
[2018-11-22 16:37:58] CPU #5: 1.88 kH/s
[2018-11-22 16:37:58] Total: 8.24 kH/s
[2018-11-22 16:37:58] CPU #4: 1.88 kH/s
[2018-11-22 16:37:58] CPU #1: 1.12 kH/s
[2018-11-22 16:37:58] CPU #3: 1.12 kH/s
[2018-11-22 16:37:58] CPU #0: 1.12 kH/s
[2018-11-22 16:37:58] CPU #2: 1.12 kH/s
[2018-11-22 16:38:03] Total: 8.23 kH/s
[2018-11-22 16:38:08] CPU #5: 1.88 kH/s
[2018-11-22 16:38:08] Total: 8.24 kH/s
[2018-11-22 16:38:08] CPU #4: 1.88 kH/s
[2018-11-22 16:38:08] CPU #0: 1.12 kH/s
[2018-11-22 16:38:08] CPU #1: 1.12 kH/s
[2018-11-22 16:38:08] CPU #3: 1.12 kH/s
[2018-11-22 16:38:08] CPU #2: 1.12 kH/s
[2018-11-22 16:38:13] Total: 8.25 kH/s
[2018-11-22 16:38:18] CPU #5: 1.88 kH/s
[2018-11-22 16:38:18] Total: 8.25 kH/s
[2018-11-22 16:38:18] CPU #4: 1.88 kH/s
[2018-11-22 16:38:18] CPU #1: 1.12 kH/s
[2018-11-22 16:38:18] CPU #0: 1.12 kH/s
[2018-11-22 16:38:18] CPU #3: 1.12 kH/s
[2018-11-22 16:38:18] CPU #2: 1.13 kH/s
[2018-11-22 16:38:23] Total: 8.24 kH/s
[2018-11-22 16:38:28] CPU #5: 1.88 kH/s
[2018-11-22 16:38:28] Total: 8.25 kH/s
[2018-11-22 16:38:28] CPU #4: 1.88 kH/s
[2018-11-22 16:38:28] CPU #0: 1.12 kH/s
[2018-11-22 16:38:28] CPU #1: 1.12 kH/s
[2018-11-22 16:38:28] CPU #3: 1.12 kH/s
[2018-11-22 16:38:28] CPU #2: 1.12 kH/s
[2018-11-22 16:38:33] Total: 8.25 kH/s
[2018-11-22 16:38:38] CPU #5: 1.88 kH/s
[2018-11-22 16:38:38] Total: 8.25 kH/s
[2018-11-22 16:38:38] CPU #4: 1.88 kH/s
[2018-11-22 16:38:38] CPU #1: 1.12 kH/s
[2018-11-22 16:38:38] CPU #3: 1.12 kH/s
[2018-11-22 16:38:38] CPU #0: 1.12 kH/s
[2018-11-22 16:38:38] CPU #2: 1.13 kH/s
[2018-11-22 16:38:43] Total: 8.23 kH/s
[2018-11-22 16:38:48] CPU #5: 1.88 kH/s
[2018-11-22 16:38:48] Total: 8.25 kH/s
[2018-11-22 16:38:48] CPU #4: 1.88 kH/s
[2018-11-22 16:38:48] CPU #1: 1.12 kH/s
[2018-11-22 16:38:48] CPU #0: 1.12 kH/s
[2018-11-22 16:38:48] CPU #3: 1.12 kH/s
[2018-11-22 16:38:48] CPU #2: 1.13 kH/s
[2018-11-22 16:38:53] Total: 8.25 kH/s
[2018-11-22 16:38:58] CPU #5: 1.88 kH/s
[2018-11-22 16:38:58] Total: 8.25 kH/s
[2018-11-22 16:38:58] CPU #4: 1.88 kH/s
[2018-11-22 16:38:58] CPU #1: 1.12 kH/s
[2018-11-22 16:38:58] CPU #0: 1.12 kH/s
[2018-11-22 16:38:58] CPU #3: 1.12 kH/s
[2018-11-22 16:38:58] CPU #2: 1.13 kH/s
[2018-11-22 16:39:03] Total: 8.24 kH/s
[2018-11-22 16:39:08] CPU #4: 1.88 kH/s
[2018-11-22 16:39:08] CPU #5: 1.87 kH/s
[2018-11-22 16:39:08] Total: 8.24 kH/s
[2018-11-22 16:39:08] CPU #1: 1.12 kH/s
[2018-11-22 16:39:08] CPU #3: 1.12 kH/s
[2018-11-22 16:39:08] CPU #0: 1.12 kH/s
[2018-11-22 16:39:08] CPU #2: 1.13 kH/s
[2018-11-22 16:39:13] Total: 8.25 kH/s
[2018-11-22 16:39:18] CPU #5: 1.88 kH/s
[2018-11-22 16:39:18] Total: 8.25 kH/s
[2018-11-22 16:39:18] CPU #4: 1.88 kH/s
[2018-11-22 16:39:18] CPU #1: 1.12 kH/s
[2018-11-22 16:39:18] CPU #3: 1.12 kH/s
[2018-11-22 16:39:18] CPU #0: 1.12 kH/s
[2018-11-22 16:39:18] CPU #2: 1.13 kH/s
[2018-11-22 16:39:23] Total: 8.25 kH/s
[2018-11-22 16:39:28] CPU #5: 1.87 kH/s
[2018-11-22 16:39:28] Total: 8.24 kH/s
[2018-11-22 16:39:28] CPU #4: 1.87 kH/s
[2018-11-22 16:39:28] CPU #1: 1.12 kH/s
[2018-11-22 16:39:28] CPU #0: 1.12 kH/s
[2018-11-22 16:39:28] CPU #3: 1.12 kH/s
[2018-11-22 16:39:28] CPU #2: 1.12 kH/s
[2018-11-22 16:39:33] Total: 8.24 kH/s
[2018-11-22 16:39:38] CPU #5: 1.88 kH/s
[2018-11-22 16:39:38] Total: 8.25 kH/s
[2018-11-22 16:39:38] CPU #4: 1.88 kH/s
[2018-11-22 16:39:38] CPU #1: 1.12 kH/s
[2018-11-22 16:39:38] CPU #0: 1.12 kH/s
[2018-11-22 16:39:38] CPU #3: 1.12 kH/s
[2018-11-22 16:39:38] CPU #2: 1.13 kH/s
[2018-11-22 16:39:43] Total: 8.25 kH/s
[2018-11-22 16:39:48] CPU #5: 1.88 kH/s
[2018-11-22 16:39:48] Total: 8.25 kH/s
[2018-11-22 16:39:48] CPU #4: 1.86 kH/s
[2018-11-22 16:39:48] CPU #1: 1.12 kH/s
[2018-11-22 16:39:48] CPU #0: 1.12 kH/s
[2018-11-22 16:39:48] CPU #3: 1.12 kH/s
[2018-11-22 16:39:48] CPU #2: 1.12 kH/s
[2018-11-22 16:39:53] Total: 8.25 kH/s
[2018-11-22 16:39:58] CPU #4: 1.88 kH/s
[2018-11-22 16:39:58] CPU #5: 1.88 kH/s
[2018-11-22 16:39:58] Total: 8.25 kH/s
[2018-11-22 16:39:58] CPU #1: 1.12 kH/s
[2018-11-22 16:39:58] CPU #0: 1.12 kH/s
[2018-11-22 16:39:58] CPU #3: 1.12 kH/s
[2018-11-22 16:39:58] CPU #2: 1.13 kH/s
[2018-11-22 16:40:03] Total: 8.25 kH/s
[2018-11-22 16:40:08] CPU #5: 1.88 kH/s
[2018-11-22 16:40:08] Total: 8.24 kH/s
[2018-11-22 16:40:08] CPU #4: 1.86 kH/s
[2018-11-22 16:40:08] CPU #1: 1.12 kH/s
[2018-11-22 16:40:08] CPU #0: 1.12 kH/s
[2018-11-22 16:40:08] CPU #3: 1.12 kH/s
[2018-11-22 16:40:08] CPU #2: 1.12 kH/s
[2018-11-22 16:40:13] Total: 8.25 kH/s
[2018-11-22 16:40:18] CPU #4: 1.88 kH/s
[2018-11-22 16:40:18] CPU #5: 1.88 kH/s
[2018-11-22 16:40:18] Total: 8.25 kH/s
[2018-11-22 16:40:18] CPU #1: 1.12 kH/s
[2018-11-22 16:40:18] CPU #0: 1.12 kH/s
[2018-11-22 16:40:18] CPU #3: 1.12 kH/s
[2018-11-22 16:40:18] CPU #2: 1.13 kH/s
[2018-11-22 16:40:23] Total: 8.25 kH/s
[2018-11-22 16:40:28] CPU #5: 1.87 kH/s
[2018-11-22 16:40:28] Total: 8.25 kH/s
[2018-11-22 16:40:28] CPU #4: 1.87 kH/s
[2018-11-22 16:40:28] CPU #1: 1.12 kH/s
[2018-11-22 16:40:28] CPU #3: 1.12 kH/s
[2018-11-22 16:40:28] CPU #0: 1.12 kH/s
[2018-11-22 16:40:28] CPU #2: 1.12 kH/s
[2018-11-22 16:40:33] Total: 8.25 kH/s
[2018-11-22 16:40:38] CPU #4: 1.88 kH/s
[2018-11-22 16:40:38] CPU #5: 1.88 kH/s
[2018-11-22 16:40:38] Total: 8.25 kH/s
[2018-11-22 16:40:38] CPU #1: 1.12 kH/s
[2018-11-22 16:40:38] CPU #0: 1.12 kH/s
[2018-11-22 16:40:38] CPU #3: 1.12 kH/s
[2018-11-22 16:40:38] CPU #2: 1.13 kH/s
[2018-11-22 16:40:43] Total: 8.25 kH/s
[2018-11-22 16:40:48] CPU #4: 1.88 kH/s
[2018-11-22 16:40:48] CPU #5: 1.86 kH/s
[2018-11-22 16:40:48] Total: 8.23 kH/s
[2018-11-22 16:40:48] CPU #1: 1.12 kH/s
[2018-11-22 16:40:48] CPU #0: 1.12 kH/s
[2018-11-22 16:40:48] CPU #3: 1.12 kH/s
[2018-11-22 16:40:48] CPU #2: 1.12 kH/s
[2018-11-22 16:40:53] Total: 8.25 kH/s
[2018-11-22 16:40:58] CPU #4: 1.88 kH/s
[2018-11-22 16:40:58] CPU #5: 1.88 kH/s
[2018-11-22 16:40:58] Total: 8.25 kH/s
[2018-11-22 16:40:58] CPU #1: 1.12 kH/s
[2018-11-22 16:40:58] CPU #0: 1.12 kH/s
[2018-11-22 16:40:58] CPU #3: 1.12 kH/s
[2018-11-22 16:40:58] CPU #2: 1.12 kH/s
[2018-11-22 16:41:03] Total: 8.25 kH/s
[2018-11-22 16:41:08] CPU #4: 1.88 kH/s
[2018-11-22 16:41:08] CPU #5: 1.88 kH/s
[2018-11-22 16:41:08] Total: 8.24 kH/s
[2018-11-22 16:41:08] CPU #1: 1.12 kH/s
[2018-11-22 16:41:08] CPU #0: 1.12 kH/s
[2018-11-22 16:41:08] CPU #3: 1.12 kH/s
[2018-11-22 16:41:08] CPU #2: 1.12 kH/s
[2018-11-22 16:41:13] Total: 8.24 kH/s
[2018-11-22 16:41:18] CPU #4: 1.88 kH/s
[2018-11-22 16:41:18] CPU #5: 1.88 kH/s
[2018-11-22 16:41:18] Total: 8.25 kH/s
[2018-11-22 16:41:18] CPU #1: 1.12 kH/s
[2018-11-22 16:41:18] CPU #0: 1.12 kH/s
[2018-11-22 16:41:18] CPU #2: 1.12 kH/s
[2018-11-22 16:41:18] CPU #3: 1.12 kH/s
[2018-11-22 16:41:23] Total: 8.25 kH/s
[2018-11-22 16:41:28] CPU #4: 1.88 kH/s
[2018-11-22 16:41:28] CPU #5: 1.88 kH/s
[2018-11-22 16:41:28] Total: 8.25 kH/s
[2018-11-22 16:41:28] CPU #1: 1.12 kH/s
[2018-11-22 16:41:28] CPU #0: 1.12 kH/s
[2018-11-22 16:41:28] CPU #2: 1.12 kH/s
[2018-11-22 16:41:28] CPU #3: 1.12 kH/s
[2018-11-22 16:41:33] Total: 8.23 kH/s
[2018-11-22 16:41:38] CPU #4: 1.88 kH/s
[2018-11-22 16:41:38] CPU #5: 1.88 kH/s
[2018-11-22 16:41:38] Total: 8.25 kH/s
[2018-11-22 16:41:38] CPU #1: 1.12 kH/s
[2018-11-22 16:41:38] CPU #2: 1.12 kH/s
[2018-11-22 16:41:38] CPU #0: 1.12 kH/s
[2018-11-22 16:41:38] CPU #3: 1.12 kH/s
[2018-11-22 16:41:43] Total: 8.25 kH/s
[2018-11-22 16:41:48] CPU #4: 1.88 kH/s
[2018-11-22 16:41:48] CPU #5: 1.88 kH/s
[2018-11-22 16:41:48] Total: 8.25 kH/s
[2018-11-22 16:41:48] CPU #1: 1.12 kH/s
[2018-11-22 16:41:48] CPU #2: 1.13 kH/s
[2018-11-22 16:41:48] CPU #0: 1.12 kH/s
[2018-11-22 16:41:48] CPU #3: 1.12 kH/s
[2018-11-22 16:41:53] Total: 8.25 kH/s
[2018-11-22 16:41:58] CPU #4: 1.88 kH/s
[2018-11-22 16:41:58] CPU #5: 1.88 kH/s
[2018-11-22 16:41:58] Total: 8.25 kH/s
[2018-11-22 16:41:58] CPU #1: 1.12 kH/s
[2018-11-22 16:41:58] CPU #2: 1.13 kH/s
[2018-11-22 16:41:58] CPU #0: 1.12 kH/s
[2018-11-22 16:41:58] CPU #3: 1.12 kH/s
[2018-11-22 16:42:03] Total: 8.24 kH/s
[2018-11-22 16:42:08] CPU #4: 1.88 kH/s
[2018-11-22 16:42:08] CPU #5: 1.88 kH/s
[2018-11-22 16:42:08] Total: 8.25 kH/s
[2018-11-22 16:42:08] CPU #1: 1.12 kH/s
[2018-11-22 16:42:08] CPU #2: 1.13 kH/s
[2018-11-22 16:42:08] CPU #0: 1.12 kH/s
[2018-11-22 16:42:08] CPU #3: 1.12 kH/s
[2018-11-22 16:42:13] Total: 8.23 kH/s

Total Scores: 8.25,8.24,8.23,8.22

##########################################################################

Testing clockspeeds again. System health now:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
16:42:11: 1800/1416MHz  6.02 100%   0%  99%   0%   0%   0%  68.9°C

Checking cpufreq OPP for cpu0-cpu3:

Cpufreq OPP: 1416    Measured: 1396.876/1413.961/1413.435
Cpufreq OPP: 1200    Measured: 1197.952/1197.605/1197.924
Cpufreq OPP: 1008    Measured: 1005.823/1005.712/1005.578
Cpufreq OPP:  816    Measured: 813.701/813.751/813.410
Cpufreq OPP:  600    Measured: 597.837/597.796/597.580
Cpufreq OPP:  408    Measured: 405.739/405.647/405.793

Checking cpufreq OPP for cpu4-cpu5:

Cpufreq OPP: 1800    Measured: 1798.407/1798.727/1798.387
Cpufreq OPP: 1608    Measured: 1606.417/1606.437/1606.477
Cpufreq OPP: 1416    Measured: 1414.054/1414.503/1414.457
Cpufreq OPP: 1200    Measured: 1198.355/1198.494/1198.341
Cpufreq OPP: 1008    Measured: 1006.349/1006.435/1006.337
Cpufreq OPP:  816    Measured: 814.392/814.362/814.453
Cpufreq OPP:  600    Measured: 598.371/598.181/598.330
Cpufreq OPP:  408    Measured: 406.284/406.167/406.192

##########################################################################

System health while running tinymembench:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
16:11:56: 1800/1416MHz  0.24  15%   0%  15%   0%   0%   0%  41.1°C
16:13:56: 1800/1416MHz  0.90  16%   0%  16%   0%   0%   0%  39.4°C
16:15:56: 1800/1416MHz  0.99  16%   0%  16%   0%   0%   0%  40.0°C
16:17:57: 1800/1416MHz  1.00  16%   0%  16%   0%   0%   0%  42.2°C
16:19:57: 1800/1416MHz  1.00  16%   0%  16%   0%   0%   0%  42.8°C
16:21:57: 1800/1416MHz  1.00  16%   0%  16%   0%   0%   0%  42.2°C

System health while running OpenSSL benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
16:22:36: 1800/1416MHz  1.00  15%   0%  15%   0%   0%   0%  43.3°C
16:22:46: 1800/1416MHz  1.00  16%   0%  16%   0%   0%   0%  42.2°C
16:22:56: 1800/1416MHz  1.00  16%   0%  16%   0%   0%   0%  43.3°C
16:23:06: 1800/1416MHz  1.00  16%   0%  16%   0%   0%   0%  43.3°C
16:23:16: 1800/1416MHz  1.00  16%   0%  16%   0%   0%   0%  42.2°C
16:23:26: 1800/1416MHz  1.00  16%   0%  16%   0%   0%   0%  41.7°C
16:23:36: 1800/1416MHz  1.00  16%   0%  16%   0%   0%   0%  43.9°C
16:23:46: 1800/1416MHz  1.00  16%   0%  16%   0%   0%   0%  45.0°C
16:23:56: 1800/1416MHz  1.00  16%   0%  16%   0%   0%   0%  41.7°C
16:24:06: 1800/1416MHz  1.00  16%   0%  16%   0%   0%   0%  43.9°C
16:24:16: 1800/1416MHz  1.00  16%   0%  16%   0%   0%   0%  43.9°C

System health while running 7-zip single core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
16:24:24: 1800/1416MHz  1.00  15%   0%  15%   0%   0%   0%  44.4°C
16:25:24: 1800/1416MHz  3.04  16%   0%  16%   0%   0%   0%  41.7°C
16:26:24: 1800/1416MHz  4.16  16%   0%  16%   0%   0%   0%  41.1°C
16:27:24: 1800/1416MHz  4.10  16%   0%  16%   0%   0%   0%  40.6°C
16:28:24: 1800/1416MHz  3.58  16%   0%  16%   0%   0%   0%  41.7°C
16:29:24: 1800/1416MHz  3.47  16%   0%  16%   0%   0%   0%  41.7°C
16:30:24: 1800/1416MHz  4.08  16%   0%  16%   0%   0%   0%  42.2°C
16:31:24: 1800/1416MHz  4.74  16%   0%  16%   0%   0%   0%  43.3°C
16:32:24: 1800/1416MHz  4.68  16%   0%  16%   0%   0%   0%  43.9°C
16:33:24: 1800/1416MHz  4.10  16%   0%  16%   0%   0%   0%  43.9°C

System health while running 7-zip multi core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
16:34:01: 1800/1416MHz  4.57  16%   0%  15%   0%   0%   0%  45.0°C
16:34:21: 1800/1416MHz  4.60  76%   0%  75%   0%   0%   0%  51.1°C
16:34:41: 1800/1416MHz  4.61  76%   1%  74%   0%   0%   0%  52.2°C
16:35:01: 1800/1416MHz  5.24  92%   1%  91%   0%   0%   0%  48.1°C
16:35:21: 1800/1416MHz  5.27  75%   0%  74%   0%   0%   0%  52.2°C
16:35:42: 1800/1416MHz  5.14  80%   1%  79%   0%   0%   0%  53.3°C
16:36:02: 1800/1416MHz  5.55  84%   1%  82%   0%   0%   0%  51.7°C
16:36:22: 1800/1416MHz  5.10  77%   0%  76%   0%   0%   0%  54.4°C
16:36:43: 1800/1416MHz  5.45  84%   1%  82%   0%   0%   0%  52.2°C
16:37:04: 1800/1416MHz  5.46  81%   1%  80%   0%   0%   0%  53.3°C

System health while running cpuminer:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
16:37:19: 1800/1416MHz  5.35  19%   0%  18%   0%   0%   0%  52.8°C
16:37:40: 1800/1416MHz  5.53 100%   0% 100%   0%   0%   0%  57.8°C
16:38:01: 1800/1416MHz  5.67 100%   0%  99%   0%   0%   0%  60.6°C
16:38:22: 1800/1416MHz  5.76 100%   0%  99%   0%   0%   0%  60.0°C
16:38:42: 1800/1416MHz  5.83 100%   0%  99%   0%   0%   0%  61.2°C
16:39:03: 1800/1416MHz  5.95 100%   0%  99%   0%   0%   0%  61.2°C
16:39:24: 1800/1416MHz  5.96 100%   0%  99%   0%   0%   0%  61.9°C
16:39:45: 1800/1416MHz  5.97 100%   0%  99%   0%   0%   0%  63.8°C
16:40:06: 1800/1416MHz  5.98 100%   0%  99%   0%   0%   0%  65.6°C
16:40:27: 1800/1416MHz  5.99 100%   0%  99%   0%   0%   0%  65.0°C
16:40:48: 1800/1416MHz  5.99 100%   0%  99%   0%   0%   0%  65.0°C
16:41:08: 1800/1416MHz  6.05 100%   0%  99%   0%   0%   0%  65.6°C
16:41:29: 1800/1416MHz  6.04 100%   0%  99%   0%   0%   0%  67.8°C
16:41:50: 1800/1416MHz  6.02 100%   0%  99%   0%   0%   0%  66.7°C
16:42:11: 1800/1416MHz  6.02 100%   0%  99%   0%   0%   0%  68.9°C

##########################################################################

Linux 4.4.154-1124-rockchip-ayufan-ged3ce4d15ec1 (rockpro64) 	11/22/18 	_aarch64_	(6 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          24.15    0.00    0.35    0.06    0.00   75.44

Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
mmcblk0           3.15        53.64       136.11     239737     608324

              total        used        free      shared  buff/cache   available
Mem:           3.8G         65M        3.2G        8.3M        541M        3.7G
Swap:            0B          0B          0B



Architecture:          aarch64
Byte Order:            Little Endian
CPU(s):                6
On-line CPU(s) list:   0-5
Thread(s) per core:    1
Core(s) per socket:    3
Socket(s):             2
Model:                 4
CPU max MHz:           1416.0000
CPU min MHz:           408.0000
BogoMIPS:              48.00
Flags:                 fp asimd evtstrm aes pmull sha1 sha2 crc32
