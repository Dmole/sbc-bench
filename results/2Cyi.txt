sbc-bench v0.7.4 Raspberry Pi 400 Rev 1.0 (Sat, 31 Oct 2020 12:18:12 +0700)

Distributor ID:	Raspbian
Description:	Raspbian GNU/Linux 10 (buster)
Release:	10
Codename:	buster
Architecture:	armhf

Raspberry Pi ThreadX version:
Oct 22 2020 13:59:27 
Copyright (c) 2012 Broadcom
version 74e754ff8947c58d2773253f77f6f68a303188f8 (clean) (release) (start)

ThreadX configuration (/boot/config.txt):
disable_overscan=1
dtparam=audio=on
[pi4]
dtoverlay=vc4-fkms-v3d
max_framebuffers=2
[all]

Actual ThreadX settings:
arm_freq=1800
audio_pwm_mode=514
config_hdmi_boost=5
core_freq=500
core_freq_min=200
disable_commandline_tags=2
disable_l2cache=1
disable_overscan=1
display_hdmi_rotate=-1
display_lcd_rotate=-1
enable_gic=1
force_eeprom_read=1
force_pwm_open=1
framebuffer_ignore_alpha=1
framebuffer_swap=1
gpu_freq=500
gpu_freq_min=250
init_uart_clock=0x2dc6c00
lcd_framerate=60
mask_gpu_interrupt0=1024
mask_gpu_interrupt1=0x10000
max_framebuffers=2
over_voltage=0x11170
over_voltage_avs=-30000
pause_burst_frames=1
program_serial_random=1
total_mem=4096
hdmi_force_cec_address:0=65535
hdmi_force_cec_address:1=65535
hdmi_pixel_freq_limit:0=0x11e1a300
hdmi_pixel_freq_limit:1=0x11e1a300

/usr/bin/gcc (Raspbian 8.3.0-6+rpi1) 8.3.0

Uptime: 12:18:13 up 11 min,  3 users,  load average: 1.04, 0.63, 0.32

Linux 5.4.72-v7l+ (raspberrypi) 	10/31/2020 	_armv7l_	(4 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           6.32    0.03    2.23    1.10    0.00   90.33

Device             tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
mmcblk0          24.08       567.39       601.71     391475     415156

              total        used        free      shared  buff/cache   available
Mem:          3.7Gi       141Mi       3.0Gi        42Mi       611Mi       3.4Gi
Swap:          99Mi          0B        99Mi

Filename				Type		Size	Used	Priority
/var/swap                              	file    	102396	0	-2

##########################################################################

Checking cpufreq OPP:

Cpufreq OPP: 1800    ThreadX: 1800    Measured: 1796.905/1798.387/1797.626
Cpufreq OPP: 1700    ThreadX: 1700    Measured: 1697.790/1698.737/1698.397
Cpufreq OPP: 1600    ThreadX: 1600    Measured: 1598.403/1598.561/1596.309
Cpufreq OPP: 1500    ThreadX: 1500    Measured: 1498.429/1497.108/1497.525
Cpufreq OPP: 1400    ThreadX: 1400    Measured: 1377.137/1385.158/1398.434
Cpufreq OPP: 1300    ThreadX: 1300    Measured: 1297.931/1297.671/1298.284
Cpufreq OPP: 1200    ThreadX: 1200    Measured: 1197.494/1194.738/1197.563
Cpufreq OPP: 1100    ThreadX: 1100    Measured: 1098.314/1097.194/1097.555
Cpufreq OPP: 1000    ThreadX: 1000    Measured: 998.036/997.254/997.819
Cpufreq OPP:  900    ThreadX:  900    Measured: 898.805/898.492/897.409
Cpufreq OPP:  800    ThreadX:  800    Measured: 798.420/797.698/797.939
Cpufreq OPP:  700    ThreadX:  700    Measured: 697.251/695.578/698.577
Cpufreq OPP:  600    ThreadX:  600    Measured: 596.112/598.493/598.554

##########################################################################

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :    988.0 MB/s (0.3%)
 C copy backwards (32 byte blocks)                    :    992.8 MB/s
 C copy backwards (64 byte blocks)                    :   1007.8 MB/s (1.4%)
 C copy                                               :   2321.7 MB/s (0.8%)
 C copy prefetched (32 bytes step)                    :   1095.1 MB/s (0.8%)
 C copy prefetched (64 bytes step)                    :   1090.3 MB/s (0.5%)
 C 2-pass copy                                        :   1671.8 MB/s (0.4%)
 C 2-pass copy prefetched (32 bytes step)             :   1092.2 MB/s (0.3%)
 C 2-pass copy prefetched (64 bytes step)             :   1098.0 MB/s
 C fill                                               :   3128.7 MB/s (1.4%)
 C fill (shuffle within 16 byte blocks)               :   3146.2 MB/s (1.4%)
 C fill (shuffle within 32 byte blocks)               :   3142.6 MB/s (1.3%)
 C fill (shuffle within 64 byte blocks)               :   3144.3 MB/s (1.5%)
 ---
 standard memcpy                                      :   2675.4 MB/s
 standard memset                                      :   3107.4 MB/s (0.9%)
 ---
 NEON read                                            :   4094.7 MB/s (0.2%)
 NEON read prefetched (32 bytes step)                 :   4123.1 MB/s
 NEON read prefetched (64 bytes step)                 :   4124.7 MB/s (0.4%)
 NEON read 2 data streams                             :   3822.4 MB/s
 NEON read 2 data streams prefetched (32 bytes step)  :   3817.7 MB/s
 NEON read 2 data streams prefetched (64 bytes step)  :   3820.8 MB/s
 NEON copy                                            :   2681.1 MB/s (1.0%)
 NEON copy prefetched (32 bytes step)                 :   2673.0 MB/s (0.5%)
 NEON copy prefetched (64 bytes step)                 :   2673.3 MB/s
 NEON unrolled copy                                   :   2686.4 MB/s
 NEON unrolled copy prefetched (32 bytes step)        :   2681.5 MB/s (0.5%)
 NEON unrolled copy prefetched (64 bytes step)        :   2679.4 MB/s (0.5%)
 NEON copy backwards                                  :   2651.6 MB/s
 NEON copy backwards prefetched (32 bytes step)       :   2652.9 MB/s (0.5%)
 NEON copy backwards prefetched (64 bytes step)       :   2651.9 MB/s (0.7%)
 NEON 2-pass copy                                     :   2223.4 MB/s (0.6%)
 NEON 2-pass copy prefetched (32 bytes step)          :   2309.9 MB/s (0.3%)
 NEON 2-pass copy prefetched (64 bytes step)          :   2328.4 MB/s (0.3%)
 NEON unrolled 2-pass copy                            :   2188.0 MB/s (0.7%)
 NEON unrolled 2-pass copy prefetched (32 bytes step) :   2352.3 MB/s (0.5%)
 NEON unrolled 2-pass copy prefetched (64 bytes step) :   2387.8 MB/s (0.4%)
 NEON fill                                            :   3129.0 MB/s (1.4%)
 NEON fill backwards                                  :   3144.9 MB/s (1.4%)
 VFP copy                                             :   2681.2 MB/s
 VFP 2-pass copy                                      :   2125.4 MB/s (0.6%)
 ARM fill (STRD)                                      :   3138.9 MB/s (1.6%)
 ARM fill (STM with 8 registers)                      :   3145.4 MB/s (1.5%)
 ARM fill (STM with 4 registers)                      :   3129.1 MB/s (1.4%)
 ARM copy prefetched (incr pld)                       :   2670.4 MB/s (0.5%)
 ARM copy prefetched (wrap pld)                       :   2671.6 MB/s (0.5%)
 ARM 2-pass copy prefetched (incr pld)                :   2233.6 MB/s (0.3%)
 ARM 2-pass copy prefetched (wrap pld)                :   2230.5 MB/s (0.4%)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON read (from framebuffer)                         :   1321.4 MB/s
 NEON copy (from framebuffer)                         :    814.0 MB/s (0.5%)
 NEON 2-pass copy (from framebuffer)                  :    719.7 MB/s (0.2%)
 NEON unrolled copy (from framebuffer)                :    719.9 MB/s (0.1%)
 NEON 2-pass unrolled copy (from framebuffer)         :    605.9 MB/s (0.2%)
 VFP copy (from framebuffer)                          :    791.4 MB/s
 VFP 2-pass copy (from framebuffer)                   :    670.5 MB/s (0.4%)
 ARM copy (from framebuffer)                          :    796.3 MB/s (0.6%)
 ARM 2-pass copy (from framebuffer)                   :    711.4 MB/s (0.3%)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    4.7 ns          /     7.4 ns 
    131072 :    7.2 ns          /     9.9 ns 
    262144 :   10.3 ns          /    13.1 ns 
    524288 :   11.8 ns          /    15.1 ns 
   1048576 :   22.2 ns          /    34.2 ns 
   2097152 :   80.4 ns          /   117.2 ns 
   4194304 :  108.5 ns          /   140.1 ns 
   8388608 :  129.0 ns          /   159.7 ns 
  16777216 :  139.2 ns          /   168.3 ns 
  33554432 :  144.6 ns          /   173.1 ns 
  67108864 :  155.5 ns          /   187.1 ns 

##########################################################################

OpenSSL 1.1.1d, built on 10 Sep 2019
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes
aes-128-cbc      74936.49k    91939.58k    99726.17k   101606.74k   102298.97k   102263.47k
aes-128-cbc      75166.77k    92169.83k    99692.63k   101724.50k   102206.12k   102285.31k
aes-192-cbc      67517.95k    80832.83k    86475.95k    87858.52k    88342.53k    88457.22k
aes-192-cbc      67460.47k    80889.83k    86204.16k    87939.75k    88473.60k    88397.14k
aes-256-cbc      61194.19k    72072.73k    76320.00k    77589.85k    77914.11k    77949.61k
aes-256-cbc      61098.42k    72037.61k    76419.50k    77493.59k    77933.23k    77824.00k

##########################################################################

7-Zip (a) [32] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,32 bits,4 CPUs LE)

LE
CPU Freq:  1779  1779  1786  1798  1798  1798  1797  1798  1798

RAM size:    3827 MB,  # CPU hardware threads:   4
RAM usage:    882 MB,  # Benchmark threads:      4

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       1459   100   1420   1420  |      28166   100   2406   2403
23:       1407   100   1434   1434  |      27550   100   2384   2384
24:       1352   100   1454   1454  |      26654   100   2342   2340
25:       1309   100   1496   1495  |      25741   100   2291   2291
----------------------------------  | ------------------------------
Avr:             100   1451   1451  |              100   2356   2354
Tot:             100   1904   1903

##########################################################################

7-Zip (a) [32] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,32 bits,4 CPUs LE)

LE
CPU Freq:  1784  1780  1787  1797  1797  1798  1798  1798  1798

RAM size:    3827 MB,  # CPU hardware threads:   4
RAM usage:    882 MB,  # Benchmark threads:      4

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       3987   360   1077   3879  |     110549   398   2368   9432
23:       3835   361   1083   3908  |     107902   400   2336   9336
24:       3754   373   1082   4037  |     104274   399   2292   9154
25:       3597   379   1084   4108  |      98852   394   2230   8798
----------------------------------  | ------------------------------
Avr:             368   1081   3983  |              398   2307   9180
Tot:             383   1694   6581

7-Zip (a) [32] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,32 bits,4 CPUs LE)

LE
CPU Freq:  1796  1797  1798  1798  1797  1797  1798  1798  1798

RAM size:    3827 MB,  # CPU hardware threads:   4
RAM usage:    882 MB,  # Benchmark threads:      4

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       3917   354   1076   3811  |     109246   395   2360   9320
23:       3885   366   1081   3959  |     106245   395   2327   9193
24:       3771   374   1083   4055  |     103041   395   2288   9046
25:       3603   377   1092   4114  |      98658   395   2225   8780
----------------------------------  | ------------------------------
Avr:             368   1083   3985  |              395   2300   9085
Tot:             381   1691   6535

7-Zip (a) [32] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,32 bits,4 CPUs LE)

LE
CPU Freq:  1796  1797  1798  1798  1798  1712  1797  1798  1798

RAM size:    3827 MB,  # CPU hardware threads:   4
RAM usage:    882 MB,  # Benchmark threads:      4

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       4011   362   1078   3902  |     108272   392   2356   9237
23:       3866   365   1079   3940  |     106340   395   2330   9201
24:       3771   373   1086   4055  |     102852   395   2287   9029
25:       3602   377   1092   4113  |      98732   396   2222   8787
----------------------------------  | ------------------------------
Avr:             369   1084   4003  |              394   2299   9064
Tot:             382   1691   6533

Compression: 3983,3985,4003
Decompression: 9180,9085,9064
Total: 6581,6535,6533

##########################################################################

Testing clockspeeds again. System health now:

Time        fake/real   load %cpu %sys %usr %nice %io %irq   Temp   VCore
12:34:34: 1800/1800MHz  3.83  93%   3%  90%   0%   0%   0%  51.1°C  0.9200V

Checking cpufreq OPP:

Cpufreq OPP: 1800    ThreadX: 1800    Measured: 1798.387/1798.587/1797.646
Cpufreq OPP: 1700    ThreadX: 1700    Measured: 1697.683/1537.141/1695.062
Cpufreq OPP: 1600    ThreadX: 1600    Measured: 1598.067/1598.581/1598.680
Cpufreq OPP: 1500    ThreadX: 1500    Measured: 1496.987/1493.818/1495.531
Cpufreq OPP: 1400    ThreadX: 1400    Measured: 1396.740/1396.332/1395.472
Cpufreq OPP: 1300    ThreadX: 1300    Measured: 1440.926/1297.253/1178.256
Cpufreq OPP: 1200    ThreadX: 1200    Measured: 1197.869/1197.785/1198.063
Cpufreq OPP: 1100    ThreadX: 1100    Measured: 538.081/598.967/1097.373
Cpufreq OPP: 1000    ThreadX: 1000    Measured: 583.571/997.972/994.570
Cpufreq OPP:  900    ThreadX:  900    Measured: 435.059/1137.966/897.355
Cpufreq OPP:  800    ThreadX:  800    Measured: 796.893/797.662/795.899
Cpufreq OPP:  700    ThreadX:  700    Measured: 325.788/578.323/696.697
Cpufreq OPP:  600    ThreadX:  600    Measured: 270.301/598.092/597.182

##########################################################################

System health while running tinymembench:

Time        fake/real   load %cpu %sys %usr %nice %io %irq   Temp   VCore
12:18:23: 1800/1800MHz  1.04   9%   2%   6%   0%   1%   0%  41.9°C  0.9200V
12:20:23: 1800/1800MHz  1.00  25%   0%  24%   0%   0%   0%  44.3°C  0.9200V
12:22:23: 1800/1800MHz  1.00  25%   0%  25%   0%   0%   0%  43.3°C  0.9200V
12:24:23: 1800/1800MHz  1.00  25%   0%  25%   0%   0%   0%  42.8°C  0.9200V
12:26:23: 1800/1800MHz  1.00  25%   0%  24%   0%   0%   0%  41.4°C  0.9200V

System health while running OpenSSL benchmark:

Time        fake/real   load %cpu %sys %usr %nice %io %irq   Temp   VCore
12:27:59: 1800/1800MHz  1.00  16%   1%  14%   0%   0%   0%  41.4°C  0.9200V
12:28:10: 1800/1800MHz  1.00  25%   0%  25%   0%   0%   0%  42.8°C  0.9200V
12:28:20: 1800/1800MHz  1.00  25%   0%  25%   0%   0%   0%  41.9°C  0.9200V
12:28:30: 1800/1800MHz  1.00  25%   0%  24%   0%   0%   0%  42.8°C  0.9200V
12:28:40: 1800/1800MHz  1.00  25%   0%  24%   0%   0%   0%  42.8°C  0.9200V
12:28:50: 1800/1800MHz  1.00  25%   0%  24%   0%   0%   0%  43.3°C  0.9200V
12:29:00: 1800/1800MHz  1.00  25%   0%  24%   0%   0%   0%  44.8°C  0.9200V
12:29:10: 1800/1800MHz  1.00  25%   0%  25%   0%   0%   0%  44.3°C  0.9200V
12:29:20: 1800/1800MHz  1.00  25%   0%  24%   0%   0%   0%  43.3°C  0.9200V
12:29:30: 1800/1800MHz  1.00  25%   0%  24%   0%   0%   0%  43.8°C  0.9200V
12:29:40: 1800/1800MHz  1.00  25%   0%  24%   0%   0%   0%  44.3°C  0.9200V

System health while running 7-zip single core benchmark:

Time        fake/real   load %cpu %sys %usr %nice %io %irq   Temp   VCore
12:29:48: 1800/1800MHz  1.00  17%   1%  15%   0%   0%   0%  44.3°C  0.9200V
12:30:48: 1800/1800MHz  2.67  25%   0%  24%   0%   0%   0%  43.3°C  0.9200V
12:31:48: 1800/1800MHz  2.56  25%   1%  23%   0%   0%   0%  43.8°C  0.9200V

System health while running 7-zip multi core benchmark:

Time        fake/real   load %cpu %sys %usr %nice %io %irq   Temp   VCore
12:32:08: 1800/1800MHz  2.90  18%   1%  16%   0%   0%   0%  43.8°C  0.9200V
12:32:29: 1800/1800MHz  3.43  83%   2%  80%   0%   0%   0%  48.2°C  0.9200V
12:32:50: 1800/1800MHz  3.81  92%   3%  89%   0%   0%   0%  48.2°C  0.9200V
12:33:11: 1800/1800MHz  3.78  86%   2%  84%   0%   0%   0%  50.6°C  0.9200V
12:33:32: 1800/1800MHz  3.99  88%   3%  84%   0%   0%   0%  50.1°C  0.9200V
12:33:53: 1800/1800MHz  3.84  89%   2%  86%   0%   0%   0%  51.6°C  0.9200V
12:34:13: 1800/1800MHz  3.75  90%   3%  87%   0%   0%   0%  49.7°C  0.9200V
12:34:34: 1800/1800MHz  3.83  93%   3%  90%   0%   0%   0%  51.1°C  0.9200V

##########################################################################

Linux 5.4.72-v7l+ (raspberrypi) 	10/31/2020 	_armv7l_	(4 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          22.90    0.03    1.40    0.47    0.00   75.20

Device             tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
mmcblk0          11.13       233.06       252.76     392119     425260

              total        used        free      shared  buff/cache   available
Mem:          3.7Gi       162Mi       3.0Gi        42Mi       614Mi       3.4Gi
Swap:          99Mi          0B        99Mi

Filename				Type		Size	Used	Priority
/var/swap                              	file    	102396	0	-2

Architecture:        armv7l
Byte Order:          Little Endian
CPU(s):              4
On-line CPU(s) list: 0-3
Thread(s) per core:  1
Core(s) per socket:  4
Socket(s):           1
Vendor ID:           ARM
Model:               3
Model name:          Cortex-A72
Stepping:            r0p3
CPU max MHz:         1800.0000
CPU min MHz:         600.0000
BogoMIPS:            324.00
Flags:               half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt vfpd32 lpae evtstrm crc32
