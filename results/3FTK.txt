sbc-bench v0.8.4  (Tue, 23 Nov 2021 18:18:14 +0100)

Distributor ID:	Ubuntu
Description:	Ubuntu 21.10
Release:	21.10
Codename:	impish

Armbian release info:
BOARD=uefi-arm64
BOARD_NAME="uefi-arm64"
BOARDFAMILY=uefi-arm64
BUILD_REPOSITORY_URL=https://github.com/rpardini/armbian-build
BUILD_REPOSITORY_COMMIT=422a78f
DISTRIBUTION_CODENAME=impish
DISTRIBUTION_STATUS=csc
VERSION=20211122g-rpardini
LINUXFAMILY=arm64
ARCH=arm64
IMAGE_TYPE=user-built
BOARD_TYPE=wip
INITRD_ARCH=arm64
KERNEL_IMAGE_TYPE=Image

/usr/bin/gcc (Ubuntu 11.2.0-7ubuntu2) 11.2.0

Uptime: 18:18:14 up  2:08,  2 users,  load average: 0.16, 0.05, 0.10

Linux 5.13.0-21-generic (uefi-arm64) 	11/23/21 	_aarch64_	(8 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           0.63    0.00    0.04    0.05    0.00   99.28

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
nvme0n1           0.05         1.44         0.00         0.00      11148          0          0
sda               1.25        30.64        27.19         0.00     236983     210301          0
sr0               0.00         0.00         0.00         0.00          0          0          0
zram0             0.08         0.31         0.00         0.00       2360          4          0
zram1             0.05         0.06         0.40         0.00        464       3068          0

               total        used        free      shared  buff/cache   available
Mem:            15Gi       349Mi        14Gi       9.0Mi       300Mi        14Gi
Swap:          7.8Gi          0B       7.8Gi

Filename				Type		Size	Used	Priority
/dev/zram0                             	partition	8141576	0	5

##########################################################################

##########################################################################

Executing tinymembench on a little core:

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   2861.9 MB/s
 C copy backwards (32 byte blocks)                    :   2859.8 MB/s
 C copy backwards (64 byte blocks)                    :   2878.4 MB/s
 C copy                                               :   2942.8 MB/s
 C copy prefetched (32 bytes step)                    :   3092.1 MB/s
 C copy prefetched (64 bytes step)                    :   3092.0 MB/s
 C 2-pass copy                                        :   2786.4 MB/s
 C 2-pass copy prefetched (32 bytes step)             :   2881.7 MB/s
 C 2-pass copy prefetched (64 bytes step)             :   2895.6 MB/s
 C fill                                               :   8314.4 MB/s (4.5%)
 C fill (shuffle within 16 byte blocks)               :   7149.4 MB/s (0.3%)
 C fill (shuffle within 32 byte blocks)               :   7121.0 MB/s
 C fill (shuffle within 64 byte blocks)               :   7118.0 MB/s
 ---
 standard memcpy                                      :   2963.7 MB/s
 standard memset                                      :   8146.2 MB/s (3.9%)
 ---
 NEON LDP/STP copy                                    :   2941.6 MB/s
 NEON LDP/STP copy pldl2strm (32 bytes step)          :   1731.0 MB/s
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   1730.5 MB/s
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   3143.9 MB/s
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   3145.4 MB/s
 NEON LD1/ST1 copy                                    :   2950.6 MB/s
 NEON STP fill                                        :   8231.0 MB/s (5.5%)
 NEON STNP fill                                       :   6874.2 MB/s (1.2%)
 ARM LDP/STP copy                                     :   2940.6 MB/s
 ARM STP fill                                         :   8221.1 MB/s (4.7%)
 ARM STNP fill                                        :   7104.3 MB/s (1.4%)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :     91.9 MB/s
 NEON LDP/STP 2-pass copy (from framebuffer)          :     91.2 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :    159.5 MB/s
 NEON LD1/ST1 2-pass copy (from framebuffer)          :    157.7 MB/s
 ARM LDP/STP copy (from framebuffer)                  :     31.7 MB/s (9.0%)
 ARM LDP/STP 2-pass copy (from framebuffer)           :     22.8 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    3.9 ns          /     6.1 ns 
    131072 :    5.9 ns          /     8.1 ns 
    262144 :    8.4 ns          /    10.7 ns 
    524288 :    9.7 ns          /    12.2 ns 
   1048576 :   10.5 ns          /    13.1 ns 
   2097152 :   11.6 ns          /    14.2 ns 
   4194304 :   22.2 ns          /    27.7 ns 
   8388608 :   72.9 ns          /   112.4 ns 
  16777216 :  124.6 ns          /   172.1 ns 
  33554432 :  151.2 ns          /   191.4 ns 
  67108864 :  171.0 ns          /   209.2 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    3.9 ns          /     6.1 ns 
    131072 :    5.9 ns          /     8.1 ns 
    262144 :    6.9 ns          /     8.8 ns 
    524288 :    7.5 ns          /     9.1 ns 
   1048576 :    7.8 ns          /     9.2 ns 
   2097152 :    8.2 ns          /    10.0 ns 
   4194304 :   17.4 ns          /    23.6 ns 
   8388608 :   61.5 ns          /    92.9 ns 
  16777216 :  109.4 ns          /   146.8 ns 
  33554432 :  133.9 ns          /   163.3 ns 
  67108864 :  147.9 ns          /   169.8 ns 

Executing tinymembench on a big core:

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   2899.5 MB/s
 C copy backwards (32 byte blocks)                    :   2894.9 MB/s
 C copy backwards (64 byte blocks)                    :   2916.2 MB/s
 C copy                                               :   2958.8 MB/s
 C copy prefetched (32 bytes step)                    :   3108.4 MB/s
 C copy prefetched (64 bytes step)                    :   3106.3 MB/s
 C 2-pass copy                                        :   2779.3 MB/s
 C 2-pass copy prefetched (32 bytes step)             :   2876.7 MB/s
 C 2-pass copy prefetched (64 bytes step)             :   2891.3 MB/s
 C fill                                               :   8413.0 MB/s (5.9%)
 C fill (shuffle within 16 byte blocks)               :   6898.0 MB/s (1.2%)
 C fill (shuffle within 32 byte blocks)               :   6912.7 MB/s (1.0%)
 C fill (shuffle within 64 byte blocks)               :   6901.8 MB/s (1.1%)
 ---
 standard memcpy                                      :   2975.9 MB/s
 standard memset                                      :   8033.3 MB/s (4.8%)
 ---
 NEON LDP/STP copy                                    :   2956.5 MB/s
 NEON LDP/STP copy pldl2strm (32 bytes step)          :   1733.1 MB/s
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   1732.3 MB/s
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   3156.4 MB/s
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   3156.2 MB/s
 NEON LD1/ST1 copy                                    :   2965.7 MB/s
 NEON STP fill                                        :   8333.5 MB/s (5.4%)
 NEON STNP fill                                       :   7062.4 MB/s
 ARM LDP/STP copy                                     :   2956.4 MB/s
 ARM STP fill                                         :   8554.0 MB/s (6.4%)
 ARM STNP fill                                        :   6934.3 MB/s (1.4%)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :     92.1 MB/s (0.1%)
 NEON LDP/STP 2-pass copy (from framebuffer)          :     91.3 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :    159.7 MB/s
 NEON LD1/ST1 2-pass copy (from framebuffer)          :    158.1 MB/s
 ARM LDP/STP copy (from framebuffer)                  :     31.7 MB/s (8.9%)
 ARM LDP/STP 2-pass copy (from framebuffer)           :     22.8 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    3.9 ns          /     6.1 ns 
    131072 :    5.9 ns          /     8.1 ns 
    262144 :    8.4 ns          /    10.7 ns 
    524288 :    9.8 ns          /    12.2 ns 
   1048576 :   10.5 ns          /    13.1 ns 
   2097152 :   11.9 ns          /    14.6 ns 
   4194304 :   20.5 ns          /    27.5 ns 
   8388608 :   73.4 ns          /   114.0 ns 
  16777216 :  125.0 ns          /   172.8 ns 
  33554432 :  151.9 ns          /   191.9 ns 
  67108864 :  171.6 ns          /   209.8 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    3.9 ns          /     6.2 ns 
    131072 :    5.9 ns          /     8.1 ns 
    262144 :    6.9 ns          /     8.8 ns 
    524288 :    7.5 ns          /     9.1 ns 
   1048576 :    7.9 ns          /     9.2 ns 
   2097152 :    8.8 ns          /    10.4 ns 
   4194304 :   17.4 ns          /    23.5 ns 
   8388608 :   62.6 ns          /    94.1 ns 
  16777216 :  109.6 ns          /   147.3 ns 
  33554432 :  134.5 ns          /   163.7 ns 
  67108864 :  148.3 ns          /   170.0 ns 

##########################################################################

OpenSSL 1.1.1l, built on 24 Aug 2021
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes
aes-128-cbc     448477.58k   838539.58k  1071532.89k  1140897.45k  1175683.07k  1177245.01k
aes-128-cbc     448059.86k   837775.77k  1070435.58k  1135903.74k  1174151.17k  1176873.64k
aes-192-cbc     417895.21k   732567.04k   902595.58k   950658.39k   974536.70k   976027.65k
aes-192-cbc     417513.76k   731924.84k   901539.58k   949801.30k   973662.89k   975361.37k
aes-256-cbc     386612.36k   645184.85k   774801.24k   811664.38k   827831.64k   828467.88k
aes-256-cbc     386155.67k   644563.61k   774073.94k   808907.43k   826922.33k   828205.74k

##########################################################################

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,64 bits,8 CPUs LE)

LE
CPU Freq: - - 64000000 - - - - - -

RAM size:   15901 MB,  # CPU hardware threads:   8
RAM usage:   1765 MB,  # Benchmark threads:      8

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       1954   100   1901   1901  |      27171   100   2318   2318
23:       1831   100   1866   1866  |      26578   100   2300   2300
24:       1735   100   1866   1866  |      25980   100   2280   2280
25:       1640   100   1874   1873  |      25298   100   2252   2251
----------------------------------  | ------------------------------
Avr:             100   1877   1877  |              100   2288   2287
Tot:             100   2082   2082

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,64 bits,8 CPUs LE)

LE
CPU Freq: - - - - - - - - -

RAM size:   15901 MB,  # CPU hardware threads:   8
RAM usage:   1765 MB,  # Benchmark threads:      8

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       1939   100   1889   1887  |      27000   100   2305   2303
23:       1825   100   1862   1860  |      26431   100   2289   2287
24:       1731   100   1863   1862  |      25817   100   2268   2266
25:       1630   100   1864   1862  |      25138   100   2239   2237
----------------------------------  | ------------------------------
Avr:             100   1870   1868  |              100   2275   2273
Tot:             100   2072   2070

##########################################################################

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,64 bits,8 CPUs LE)

LE
CPU Freq: - 64000000 - - - - - - -

RAM size:   15901 MB,  # CPU hardware threads:   8
RAM usage:   1765 MB,  # Benchmark threads:      8

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:      15028   723   2022  14620  |     222446   799   2376  18974
23:      14146   736   1958  14413  |     217980   799   2361  18863
24:      13895   759   1969  14941  |     212722   798   2338  18670
25:      13127   765   1960  14989  |     206703   797   2307  18396
----------------------------------  | ------------------------------
Avr:             746   1977  14741  |              798   2345  18726
Tot:             772   2161  16733

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,64 bits,8 CPUs LE)

LE
CPU Freq: - - - - - - - - -

RAM size:   15901 MB,  # CPU hardware threads:   8
RAM usage:   1765 MB,  # Benchmark threads:      8

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:      14633   722   1971  14235  |     221739   797   2373  18913
23:      14032   745   1920  14297  |     217478   798   2359  18820
24:      13602   744   1965  14625  |     212774   799   2338  18675
25:      13248   769   1967  15126  |     206462   797   2307  18374
----------------------------------  | ------------------------------
Avr:             745   1956  14571  |              798   2344  18696
Tot:             771   2150  16633

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,64 bits,8 CPUs LE)

LE
CPU Freq: - - - - - - - - -

RAM size:   15901 MB,  # CPU hardware threads:   8
RAM usage:   1765 MB,  # Benchmark threads:      8

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:      15225   727   2038  14811  |     222091   797   2377  18943
23:      14154   748   1929  14421  |     217512   797   2361  18823
24:      14096   762   1988  15156  |     212052   796   2337  18611
25:      13360   775   1969  15254  |     206897   798   2309  18413
----------------------------------  | ------------------------------
Avr:             753   1981  14911  |              797   2346  18698
Tot:             775   2164  16804

Compression: 14741,14571,14911
Decompression: 18726,18696,18698
Total: 16733,16633,16804

##########################################################################

Testing clockspeeds again. System health now:

Time      CPU n/a    load %cpu %sys %usr %nice %io %irq   Temp
18:45:17:   ---      7.80  92%   2%  90%   0%   0%   0%  20.9°C

##########################################################################

System health while running tinymembench:

Time      CPU n/a    load %cpu %sys %usr %nice %io %irq   Temp
18:18:14:   ---      0.16   0%   0%   0%   0%   0%   0%  17.9°C
18:19:14:   ---      0.69  12%   0%  12%   0%   0%   0%  17.9°C
18:20:14:   ---      0.96  12%   0%  12%   0%   0%   0%  17.9°C
18:21:14:   ---      0.99  12%   0%  12%   0%   0%   0%  18.9°C
18:22:15:   ---      1.00  12%   0%  12%   0%   0%   0%  18.9°C
18:23:15:   ---      1.13  12%   0%  12%   0%   0%   0%  18.9°C
18:24:15:   ---      1.05  12%   0%  12%   0%   0%   0%  18.9°C
18:25:15:   ---      1.02  12%   0%  12%   0%   0%   0%  18.9°C
18:26:15:   ---      1.00  12%   0%  12%   0%   0%   0%  18.9°C
18:27:15:   ---      1.00  12%   0%  12%   0%   0%   0%  18.9°C

System health while running OpenSSL benchmark:

Time      CPU n/a    load %cpu %sys %usr %nice %io %irq   Temp
18:28:02:   ---      1.00   1%   0%   1%   0%   0%   0%  18.9°C
18:28:22:   ---      1.00  12%   0%  12%   0%   0%   0%  18.9°C
18:28:42:   ---      1.00  12%   0%  12%   0%   0%   0%  18.9°C
18:29:03:   ---      1.00  12%   0%  12%   0%   0%   0%  18.9°C
18:29:23:   ---      1.00  12%   0%  12%   0%   0%   0%  18.9°C
18:29:43:   ---      1.00  12%   0%  12%   0%   0%   0%  18.9°C

System health while running 7-zip single core benchmark:

Time      CPU n/a    load %cpu %sys %usr %nice %io %irq   Temp
18:29:51:   ---      1.00   1%   0%   1%   0%   0%   0%  18.9°C
18:30:51:   ---      4.90  12%   0%  12%   0%   0%   0%  18.9°C
18:31:51:   ---      6.15  12%   0%  12%   0%   0%   0%  18.9°C
18:32:51:   ---      6.52  12%   0%  12%   0%   0%   0%  18.9°C
18:33:51:   ---      6.95  12%   0%  12%   0%   0%   0%  18.9°C
18:34:51:   ---      5.79  12%   0%  12%   0%   0%   0%  18.9°C
18:35:51:   ---      5.94  12%   0%  12%   0%   0%   0%  18.9°C
18:36:51:   ---      6.15  12%   0%  12%   0%   0%   0%  18.9°C
18:37:52:   ---      7.00  12%   0%  12%   0%   0%   0%  18.9°C
18:38:52:   ---      7.25  12%   0%  12%   0%   0%   0%  19.9°C
18:39:52:   ---      6.17  12%   0%  12%   0%   0%   0%  19.9°C
18:40:52:   ---      6.79  12%   0%  12%   0%   0%   0%  19.9°C
18:41:52:   ---      5.32  12%   0%  12%   0%   0%   0%  19.9°C
18:42:52:   ---      6.75  12%   0%  12%   0%   0%   0%  19.9°C

System health while running 7-zip multi core benchmark:

Time      CPU n/a    load %cpu %sys %usr %nice %io %irq   Temp
18:42:53:   ---      6.85   2%   0%   2%   0%   0%   0%  19.9°C
18:43:13:   ---      7.18  95%   0%  95%   0%   0%   0%  19.9°C
18:43:34:   ---      7.34  89%   1%  88%   0%   0%   0%  19.9°C
18:43:54:   ---      7.53  95%   0%  94%   0%   0%   0%  19.9°C
18:44:16:   ---      7.66  94%   1%  93%   0%   0%   0%  19.9°C
18:44:36:   ---      7.83  91%   1%  89%   0%   0%   0%  19.9°C
18:44:57:   ---      7.88  94%   0%  93%   0%   0%   0%  20.9°C
18:45:17:   ---      7.80  92%   2%  90%   0%   0%   0%  20.9°C

##########################################################################

dmesg output while running the benchmarks:

[ 8430.751177] sbc-bench (3112): drop_caches: 3

##########################################################################

Linux 5.13.0-21-generic (uefi-arm64) 	11/23/21 	_aarch64_	(8 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           3.96    0.00    0.08    0.04    0.00   95.92

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
nvme0n1           0.04         1.19         0.00         0.00      11148          0          0
sda               1.08        26.28        22.62         0.00     246119     211781          0
sr0               0.00         0.00         0.00         0.00          0          0          0
zram0             0.06         0.25         0.00         0.00       2360          4          0
zram1             0.05         0.06         0.34         0.00        544       3212          0

               total        used        free      shared  buff/cache   available
Mem:            15Gi       364Mi        15Gi       9.0Mi        78Mi        15Gi
Swap:          7.8Gi          0B       7.8Gi

Filename				Type		Size	Used	Priority
/dev/zram0                             	partition	8141576	0	5

Architecture:                    aarch64
CPU op-mode(s):                  32-bit, 64-bit
Byte Order:                      Little Endian
CPU(s):                          8
On-line CPU(s) list:             0-7
Thread(s) per core:              1
Core(s) per socket:              8
Socket(s):                       1
NUMA node(s):                    1
Vendor ID:                       0x70
Model:                           3
Stepping:                        0x1
BogoMIPS:                        96.00
L1d cache:                       256 KiB
L1i cache:                       256 KiB
L2 cache:                        8 MiB
L3 cache:                        4 MiB
NUMA node0 CPU(s):               0-7
Vulnerability Itlb multihit:     Not affected
Vulnerability L1tf:              Not affected
Vulnerability Mds:               Not affected
Vulnerability Meltdown:          Mitigation; PTI
Vulnerability Spec store bypass: Not affected
Vulnerability Spectre v1:        Mitigation; __user pointer sanitization
Vulnerability Spectre v2:        Not affected
Vulnerability Srbds:             Not affected
Vulnerability Tsx async abort:   Not affected
Flags:                           fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid

/sys/devices/system/cpu/cpu0/cache/index2/size: 2048K, level: 2, type: Unified
/sys/devices/system/cpu/cpu0/cache/index0/size: 32K, level: 1, type: Data
/sys/devices/system/cpu/cpu0/cache/index3/size: 4096K, level: 3, type: Unified
/sys/devices/system/cpu/cpu0/cache/index1/size: 32K, level: 1, type: Instruction
/sys/devices/system/cpu/cpu1/cache/index2/size: 2048K, level: 2, type: Unified
/sys/devices/system/cpu/cpu1/cache/index0/size: 32K, level: 1, type: Data
/sys/devices/system/cpu/cpu1/cache/index3/size: 4096K, level: 3, type: Unified
/sys/devices/system/cpu/cpu1/cache/index1/size: 32K, level: 1, type: Instruction
/sys/devices/system/cpu/cpu2/cache/index2/size: 2048K, level: 2, type: Unified
/sys/devices/system/cpu/cpu2/cache/index0/size: 32K, level: 1, type: Data
/sys/devices/system/cpu/cpu2/cache/index3/size: 4096K, level: 3, type: Unified
/sys/devices/system/cpu/cpu2/cache/index1/size: 32K, level: 1, type: Instruction
/sys/devices/system/cpu/cpu3/cache/index2/size: 2048K, level: 2, type: Unified
/sys/devices/system/cpu/cpu3/cache/index0/size: 32K, level: 1, type: Data
/sys/devices/system/cpu/cpu3/cache/index3/size: 4096K, level: 3, type: Unified
/sys/devices/system/cpu/cpu3/cache/index1/size: 32K, level: 1, type: Instruction
/sys/devices/system/cpu/cpu4/cache/index2/size: 2048K, level: 2, type: Unified
/sys/devices/system/cpu/cpu4/cache/index0/size: 32K, level: 1, type: Data
/sys/devices/system/cpu/cpu4/cache/index3/size: 4096K, level: 3, type: Unified
/sys/devices/system/cpu/cpu4/cache/index1/size: 32K, level: 1, type: Instruction
/sys/devices/system/cpu/cpu5/cache/index2/size: 2048K, level: 2, type: Unified
/sys/devices/system/cpu/cpu5/cache/index0/size: 32K, level: 1, type: Data
/sys/devices/system/cpu/cpu5/cache/index3/size: 4096K, level: 3, type: Unified
/sys/devices/system/cpu/cpu5/cache/index1/size: 32K, level: 1, type: Instruction
/sys/devices/system/cpu/cpu6/cache/index2/size: 2048K, level: 2, type: Unified
/sys/devices/system/cpu/cpu6/cache/index0/size: 32K, level: 1, type: Data
/sys/devices/system/cpu/cpu6/cache/index3/size: 4096K, level: 3, type: Unified
/sys/devices/system/cpu/cpu6/cache/index1/size: 32K, level: 1, type: Instruction
/sys/devices/system/cpu/cpu7/cache/index2/size: 2048K, level: 2, type: Unified
/sys/devices/system/cpu/cpu7/cache/index0/size: 32K, level: 1, type: Data
/sys/devices/system/cpu/cpu7/cache/index3/size: 4096K, level: 3, type: Unified
/sys/devices/system/cpu/cpu7/cache/index1/size: 32K, level: 1, type: Instruction
|  |  MHz | 5.13 | Impish arm64 | 16720 | 448270 | 828340 | 2962980 | 8158030 | - | []() |
