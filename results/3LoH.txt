sbc-bench v0.9.1 Hardkernel ODROID-N2Plus (Fri, 07 Jan 2022 11:36:27 -0500)

Distributor ID:	Ubuntu
Description:	Ubuntu 21.04
Release:	21.04
Codename:	hirsute
Architecture:	arm64

/usr/bin/gcc (Ubuntu 10.3.0-1ubuntu1) 10.3.0

Uptime: 11:36:27 up 6 min,  1 user,  load average: 0.48, 0.14, 0.04

Linux 5.14.0-odroid-arm64 (odroid01) 	01/07/22 	_aarch64_	(6 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           1.15    0.35    0.62    0.28    0.00   97.60

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk0          42.38      1008.21       777.88         0.00     416854     321624          0
mmcblk0boot0      0.14         0.87         0.00         0.00        360          0          0
mmcblk0boot1      0.14         0.87         0.00         0.00        360          0          0

              total        used        free      shared  buff/cache   available
Mem:          3.6Gi       185Mi       3.3Gi       0.0Ki       168Mi       3.4Gi
Swap:         2.0Gi          0B       2.0Gi

Filename				Type		Size	Used	Priority
/swapfile                              	file    	2097148	0	-2

##########################################################################

Checking cpufreq OPP for cpu0-cpu1 (Cortex-A53):

Cpufreq OPP: 2016    Measured: 2015 (2013.806/2014.108/2013.907)
Cpufreq OPP: 1908    Measured: 1910 (1905.899/1906.237/1905.089)
Cpufreq OPP: 1800    Measured: 1800 (1798.086/1798.287/1798.166)
Cpufreq OPP: 1704    Measured: 1705 (1702.195/1702.159/1702.195)
Cpufreq OPP: 1608    Measured: 1610 (1605.338/1606.257/1606.217)
Cpufreq OPP: 1512    Measured: 1500 (1498.133/1498.098/1498.098)
Cpufreq OPP: 1398    Measured: 1400 (1395.970/1396.166/1395.035)
Cpufreq OPP: 1200    Measured: 1200 (1198.063/1198.313/1197.910)
Cpufreq OPP: 1000    Measured: 1000 (998.048/998.362/997.326)

Checking cpufreq OPP for cpu2-cpu5 (Cortex-A73):

Cpufreq OPP: 2400    Measured: 2400 (2398.859/2398.944/2398.745)
Cpufreq OPP: 2304    Measured: 2305 (2302.839/2302.812/2302.576)
Cpufreq OPP: 2208    Measured: 2210 (2206.895/2206.075/2206.678)
Cpufreq OPP: 2108    Measured: 2100 (2098.901/2099.054/2097.440)
Cpufreq OPP: 2100    Measured: 2100 (2098.945/2097.788/2098.836)
Cpufreq OPP: 2016    Measured: 2015 (2014.887/2014.912/2014.912)
Cpufreq OPP: 1908    Measured: 1910 (1906.935/1905.517/1906.845)
Cpufreq OPP: 1800    Measured: 1800 (1798.928/1799.088/1798.307)
Cpufreq OPP: 1704    Measured: 1705 (1702.859/1703.075/1703.039)
Cpufreq OPP: 1608    Measured: 1610 (1605.458/1607.057/1606.717)
Cpufreq OPP: 1512    Measured: 1500 (1498.898/1499.055/1497.803)
Cpufreq OPP: 1398    Measured: 1400 (1397.012/1397.223/1393.454)
Cpufreq OPP: 1200    Measured: 1200 (1198.953/1199.092/1199.051)
Cpufreq OPP: 1000    Measured: 1000 (998.953/997.928/999.014)

##########################################################################

Hardware sensors:

cpu_thermal-virtual-0
CPU Temp:     +30.4 C  (crit = +110.0 C)

ddr_thermal-virtual-0
DDR Temp:     +32.4 C  (crit = +110.0 C)

##########################################################################

Executing benchmark on cpu0 (Cortex-A53):

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   2050.2 MB/s (1.7%)
 C copy backwards (32 byte blocks)                    :   2053.8 MB/s (1.4%)
 C copy backwards (64 byte blocks)                    :   2059.3 MB/s (1.9%)
 C copy                                               :   2136.8 MB/s (0.8%)
 C copy prefetched (32 bytes step)                    :   1593.5 MB/s (0.3%)
 C copy prefetched (64 bytes step)                    :   1864.5 MB/s
 C 2-pass copy                                        :   1853.9 MB/s (0.2%)
 C 2-pass copy prefetched (32 bytes step)             :   1336.7 MB/s
 C 2-pass copy prefetched (64 bytes step)             :   1176.3 MB/s (0.1%)
 C fill                                               :   7684.0 MB/s
 C fill (shuffle within 16 byte blocks)               :   7684.3 MB/s
 C fill (shuffle within 32 byte blocks)               :   7685.1 MB/s (0.3%)
 C fill (shuffle within 64 byte blocks)               :   7684.5 MB/s
 ---
 standard memcpy                                      :   2166.3 MB/s (0.6%)
 standard memset                                      :   7692.1 MB/s
 ---
 NEON LDP/STP copy                                    :   2184.0 MB/s (0.2%)
 NEON LDP/STP copy pldl2strm (32 bytes step)          :   1418.6 MB/s (0.9%)
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   1820.0 MB/s (0.3%)
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   2424.9 MB/s
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   2421.2 MB/s
 NEON LD1/ST1 copy                                    :   2149.9 MB/s (0.4%)
 NEON STP fill                                        :   7691.4 MB/s
 NEON STNP fill                                       :   6307.4 MB/s (0.3%)
 ARM LDP/STP copy                                     :   2181.7 MB/s
 ARM STP fill                                         :   7690.3 MB/s (0.3%)
 ARM STNP fill                                        :   6305.7 MB/s

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :    243.4 MB/s
 NEON LDP/STP 2-pass copy (from framebuffer)          :    262.1 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :     70.5 MB/s
 NEON LD1/ST1 2-pass copy (from framebuffer)          :     73.0 MB/s
 ARM LDP/STP copy (from framebuffer)                  :    135.1 MB/s
 ARM LDP/STP 2-pass copy (from framebuffer)           :    137.1 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    3.4 ns          /     5.7 ns 
    131072 :    5.2 ns          /     8.0 ns 
    262144 :    6.4 ns          /     9.3 ns 
    524288 :   60.5 ns          /    94.9 ns 
   1048576 :   92.8 ns          /   127.0 ns 
   2097152 :  109.1 ns          /   138.1 ns 
   4194304 :  122.3 ns          /   145.3 ns 
   8388608 :  129.4 ns          /   149.6 ns 
  16777216 :  133.8 ns          /   152.9 ns 
  33554432 :  136.6 ns          /   155.4 ns 
  67108864 :  145.7 ns          /   171.5 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    3.4 ns          /     5.8 ns 
    131072 :    5.2 ns          /     8.0 ns 
    262144 :    6.4 ns          /     9.4 ns 
    524288 :   61.1 ns          /    97.2 ns 
   1048576 :   94.3 ns          /   131.6 ns 
   2097152 :  108.7 ns          /   137.7 ns 
   4194304 :  116.7 ns          /   141.4 ns 
   8388608 :  120.8 ns          /   142.8 ns 
  16777216 :  122.9 ns          /   143.3 ns 
  33554432 :  123.9 ns          /   143.6 ns 
  67108864 :  124.4 ns          /   143.7 ns 

Executing benchmark on cpu2 (Cortex-A73):

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   3965.4 MB/s
 C copy backwards (32 byte blocks)                    :   3965.6 MB/s
 C copy backwards (64 byte blocks)                    :   3964.2 MB/s
 C copy                                               :   4026.5 MB/s (0.4%)
 C copy prefetched (32 bytes step)                    :   4011.4 MB/s
 C copy prefetched (64 bytes step)                    :   4023.0 MB/s
 C 2-pass copy                                        :   3137.9 MB/s
 C 2-pass copy prefetched (32 bytes step)             :   2922.9 MB/s (0.5%)
 C 2-pass copy prefetched (64 bytes step)             :   2959.7 MB/s
 C fill                                               :   7116.7 MB/s (0.5%)
 C fill (shuffle within 16 byte blocks)               :   7118.5 MB/s
 C fill (shuffle within 32 byte blocks)               :   7110.9 MB/s
 C fill (shuffle within 64 byte blocks)               :   7116.7 MB/s (0.3%)
 ---
 standard memcpy                                      :   4026.9 MB/s
 standard memset                                      :   7115.4 MB/s
 ---
 NEON LDP/STP copy                                    :   4035.4 MB/s
 NEON LDP/STP copy pldl2strm (32 bytes step)          :   4036.3 MB/s (0.7%)
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   4036.4 MB/s (1.0%)
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   3887.3 MB/s (1.0%)
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   4012.7 MB/s
 NEON LD1/ST1 copy                                    :   4035.8 MB/s
 NEON STP fill                                        :   7118.4 MB/s (0.5%)
 NEON STNP fill                                       :   7118.2 MB/s
 ARM LDP/STP copy                                     :   4034.6 MB/s
 ARM STP fill                                         :   7117.1 MB/s (0.5%)
 ARM STNP fill                                        :   7116.9 MB/s

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :    421.5 MB/s
 NEON LDP/STP 2-pass copy (from framebuffer)          :    434.1 MB/s (0.1%)
 NEON LD1/ST1 copy (from framebuffer)                 :    422.3 MB/s (0.2%)
 NEON LD1/ST1 2-pass copy (from framebuffer)          :    434.0 MB/s
 ARM LDP/STP copy (from framebuffer)                  :    422.1 MB/s (0.2%)
 ARM LDP/STP 2-pass copy (from framebuffer)           :    425.1 MB/s (0.1%)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    4.6 ns          /     7.7 ns 
    131072 :    6.9 ns          /    10.8 ns 
    262144 :    8.6 ns          /    12.1 ns 
    524288 :   10.0 ns          /    12.6 ns 
   1048576 :   18.4 ns          /    27.1 ns 
   2097152 :   72.1 ns          /   107.8 ns 
   4194304 :  102.5 ns          /   136.2 ns 
   8388608 :  120.7 ns          /   151.5 ns 
  16777216 :  130.6 ns          /   157.8 ns 
  33554432 :  136.5 ns          /   160.8 ns 
  67108864 :  140.2 ns          /   162.0 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    4.6 ns          /     7.7 ns 
    131072 :    6.9 ns          /    10.8 ns 
    262144 :    8.0 ns          /    12.1 ns 
    524288 :    8.7 ns          /    12.7 ns 
   1048576 :    9.4 ns          /    13.6 ns 
   2097152 :   69.3 ns          /   104.2 ns 
   4194304 :   98.8 ns          /   131.5 ns 
   8388608 :  113.2 ns          /   140.8 ns 
  16777216 :  120.2 ns          /   144.4 ns 
  33554432 :  123.7 ns          /   146.0 ns 
  67108864 :  125.7 ns          /   146.2 ns 

##########################################################################

Executing benchmark on each cluster individually

OpenSSL 1.1.1j, built on 16 Feb 2021
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes
aes-128-cbc     176063.52k   523957.63k  1013658.37k  1359812.61k  1510055.94k  1519659.69k
aes-128-cbc     421746.62k  1042929.51k  1585134.85k  1811030.70k  1904754.69k  1911799.81k
aes-192-cbc     167821.67k   465423.21k   827167.49k  1048469.16k  1136801.11k  1141407.74k
aes-192-cbc     390297.64k   926339.90k  1326071.89k  1521311.74k  1589026.82k  1593922.90k
aes-256-cbc     162734.04k   429321.30k   717065.98k   877187.41k   938314.41k   942189.23k
aes-256-cbc     354916.11k   830943.94k  1178667.95k  1302321.15k  1361666.05k  1366087.00k

##########################################################################

Executing benchmark single-threaded on cpu0 (Cortex-A53)

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: 32000000 - - - 128000000 - 512000000 - -

RAM size:    3698 MB,  # CPU hardware threads:   6
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       1161    99   1137   1130  |      21512   100   1844   1837
23:       1152    99   1181   1174  |      21024   100   1828   1820
24:       1146    99   1239   1232  |      20608   100   1816   1809
25:       1137    99   1306   1298  |      20229   100   1808   1801
----------------------------------  | ------------------------------
Avr:              99   1216   1209  |              100   1824   1817
Tot:             100   1520   1513

Executing benchmark single-threaded on cpu2 (Cortex-A73)

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: 64000000 - - - - - - 1024000000 2048000000

RAM size:    3698 MB,  # CPU hardware threads:   6
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       2069   100   2018   2013  |      31453   100   2688   2685
23:       2027   100   2071   2066  |      30721   100   2662   2659
24:       2003   100   2159   2154  |      29972   100   2634   2631
25:       1980   100   2267   2262  |      29403   100   2620   2617
----------------------------------  | ------------------------------
Avr:             100   2129   2124  |              100   2651   2648
Tot:             100   2390   2386

##########################################################################

Executing benchmark 3 times multi-threaded

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: 64000000 32000000 - 64000000 128000000 256000000 - - -

RAM size:    3698 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       7614   555   1334   7407  |     140255   510   2344  11961
23:       7243   545   1354   7380  |     136760   509   2323  11834
24:       7265   554   1410   7812  |     133816   509   2309  11745
25:       7312   564   1481   8349  |     131942   511   2299  11742
----------------------------------  | ------------------------------
Avr:             554   1395   7737  |              510   2319  11821
Tot:             532   1857   9779

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: - - - 64000000 - - - 1024000000 2048000000

RAM size:    3698 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       7581   553   1334   7376  |     140157   510   2344  11953
23:       7313   551   1353   7451  |     136783   509   2324  11836
24:       7267   556   1406   7814  |     134244   510   2312  11783
25:       7275   563   1476   8307  |     131657   510   2298  11717
----------------------------------  | ------------------------------
Avr:             556   1392   7737  |              510   2319  11822
Tot:             533   1856   9780

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: - - - - - 256000000 512000000 - -

RAM size:    3698 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       7413   541   1334   7212  |     140327   510   2346  11967
23:       7327   551   1355   7466  |     137293   511   2324  11880
24:       7285   557   1406   7833  |     133306   505   2318  11701
25:       7362   567   1484   8406  |     131797   510   2301  11729
----------------------------------  | ------------------------------
Avr:             554   1395   7729  |              509   2322  11819
Tot:             531   1858   9774

Compression: 7737,7737,7729
Decompression: 11821,11822,11819
Total: 9779,9780,9774

##########################################################################

Testing clockspeeds again. System health now:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
11:58:42: 2400/2016MHz  5.78  98%   0%  96%   0%   0%   0%  44.3°C

Checking cpufreq OPP for cpu0-cpu1 (Cortex-A53):

Cpufreq OPP: 2016    Measured: 2005 (2001.967/2006.546/2004.876)
Cpufreq OPP: 1908    Measured: 1900 (1898.837/1899.283/1894.669)
Cpufreq OPP: 1800    Measured: 1795 (1791.918/1795.526/1787.295)
Cpufreq OPP: 1704    Measured: 1695 (1694.849/1694.599/1693.373)
Cpufreq OPP: 1608    Measured: 1615 (1614.814/1600.483/1602.649)
Cpufreq OPP: 1512    Measured: 1495 (1491.282/1491.868/1491.971)
Cpufreq OPP: 1398    Measured: 1395 (1390.723/1391.052/1389.884)
Cpufreq OPP: 1200    Measured: 1200 (1196.883/1196.481/1196.287)
Cpufreq OPP: 1000    Measured: 1000 (997.759/998.036/997.856)

Checking cpufreq OPP for cpu2-cpu5 (Cortex-A73):

Cpufreq OPP: 2400    Measured: 2400 (2397.747/1864.259/2398.488)
Cpufreq OPP: 2304    Measured: 2305 (2300.423/1032.798/2303.259)
Cpufreq OPP: 2208    Measured: 1750 (1746.399/1075.738/1149.183)
Cpufreq OPP: 2108    Measured: 1865 (1862.332/1049.107/1049.194)
Cpufreq OPP: 2100    Measured: 1065 (1061.565/1061.401/944.830)
Cpufreq OPP: 2016    Measured: 2015 (2012.551/1258.611/2013.831)
Cpufreq OPP: 1908    Measured: 1905 (1904.056/904.124/1903.517)
Cpufreq OPP: 1800    Measured: 1800 (1798.567/1416.205/1799.148)
Cpufreq OPP: 1704    Measured:  970 (966.918/2153.405/1700.043)
Cpufreq OPP: 1608    Measured: 1610 (1605.817/1606.337/1606.057)
Cpufreq OPP: 1512    Measured: 1500 (1497.108/1496.987/1497.942)
Cpufreq OPP: 1398    Measured: 1395 (1392.387/1396.000/1395.005)
Cpufreq OPP: 1200    Measured: 1155 (1154.198/1110.403/687.609)
Cpufreq OPP: 1000    Measured: 1000 (996.544/997.783/997.506)

##########################################################################

Hardware sensors:

cpu_thermal-virtual-0
CPU Temp:     +34.4 C  (crit = +110.0 C)

ddr_thermal-virtual-0
DDR Temp:     +37.6 C  (crit = +110.0 C)

##########################################################################

Thermal source: /sys/class/hwmon/hwmon0/ (cpu_thermal)

System health while running tinymembench:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
11:36:44: 2400/2016MHz  0.60   2%   0%   1%   0%   0%   0%  32.1°C
11:38:04: 2400/2016MHz  0.90  16%   0%  16%   0%   0%   0%  31.9°C
11:39:24: 2400/2016MHz  0.97  16%   0%  16%   0%   0%   0%  31.0°C
11:40:44: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  31.0°C
11:42:04: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  30.8°C
11:43:24: 2400/2016MHz  1.34  16%   0%  16%   0%   0%   0%  30.8°C
11:44:44: 2400/2016MHz  1.23  16%   0%  16%   0%   0%   0%  34.3°C
11:46:04: 2400/2016MHz  1.19  16%   0%  16%   0%   0%   0%  32.3°C
11:47:24: 2400/2016MHz  1.12  17%   0%  16%   0%   0%   0%  32.3°C
11:48:44: 2400/2016MHz  1.03  16%   0%  16%   0%   0%   0%  32.3°C
11:50:04: 2400/2016MHz  1.09  16%   0%  16%   0%   0%   0%  31.7°C

System health while running OpenSSL benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
11:51:07: 2400/2016MHz  1.03  12%   0%  11%   0%   0%   0%  32.9°C
11:51:23: 2400/2016MHz  1.02  16%   0%  16%   0%   0%   0%  30.8°C
11:51:39: 2400/2016MHz  1.02  16%   0%  16%   0%   0%   0%  32.9°C
11:51:55: 2400/2016MHz  1.01  16%   0%  16%   0%   0%   0%  30.8°C
11:52:11: 2400/2016MHz  1.01  16%   0%  16%   0%   0%   0%  33.3°C
11:52:27: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  30.9°C
11:52:43: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  33.4°C

System health while running 7-zip single core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
11:52:55: 2400/2016MHz  1.00  12%   0%  12%   0%   0%   0%  34.1°C
11:53:02: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  31.0°C
11:53:09: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  30.8°C
11:53:16: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  30.7°C
11:53:23: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  30.7°C
11:53:30: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  30.6°C
11:53:37: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  30.8°C
11:53:44: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  30.8°C
11:53:51: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  30.7°C
11:53:58: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  30.7°C
11:54:05: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  30.8°C
11:54:12: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  30.7°C
11:54:19: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  30.6°C
11:54:26: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  30.6°C
11:54:33: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  31.1°C
11:54:40: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  32.3°C
11:54:47: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  32.5°C
11:54:54: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  32.5°C
11:55:01: 2400/2016MHz  1.00  17%   0%  16%   0%   0%   0%  32.5°C
11:55:08: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  32.5°C
11:55:15: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  32.6°C
11:55:22: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  32.5°C
11:55:29: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  32.7°C

System health while running 7-zip multi core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
11:55:34: 2400/2016MHz  1.00  12%   0%  12%   0%   0%   0%  33.9°C
11:55:44: 2400/2016MHz  1.77  92%   0%  91%   0%   0%   0%  44.9°C
11:55:56: 2400/2016MHz  2.57  86%   0%  84%   0%   0%   1%  45.4°C
11:56:03: 2400/2016MHz  2.85  82%   0%  80%   0%   0%   1%  41.1°C
11:56:14: 2400/2016MHz  3.27  97%   0%  95%   0%   0%   0%  45.4°C
11:56:20: 2400/2016MHz  3.44  75%   0%  73%   0%   0%   1%  41.7°C
11:56:26: 2400/2016MHz  4.06  97%   1%  95%   0%   0%   0%  41.1°C
11:56:36: 2400/2016MHz  4.22  98%   0%  96%   0%   0%   0%  45.5°C
11:56:42: 2400/2016MHz  4.56  71%   0%  70%   0%   0%   0%  40.6°C
11:56:50: 2400/2016MHz  4.68  97%   0%  96%   0%   0%   0%  46.0°C
11:57:01: 2400/2016MHz  4.96  80%   0%  79%   0%   0%   0%  45.3°C
11:57:08: 2400/2016MHz  4.95  82%   0%  80%   0%   0%   1%  41.7°C
11:57:18: 2400/2016MHz  5.12  97%   0%  96%   0%   0%   0%  45.4°C
11:57:24: 2400/2016MHz  4.93  73%   0%  71%   0%   0%   0%  40.6°C
11:57:30: 2400/2016MHz  5.32  96%   1%  95%   0%   0%   0%  41.4°C
11:57:40: 2400/2016MHz  5.37  98%   0%  97%   0%   0%   0%  45.1°C
11:57:46: 2400/2016MHz  5.54  80%   0%  78%   0%   0%   1%  41.8°C
11:57:54: 2400/2016MHz  5.58  97%   0%  96%   0%   0%   0%  45.7°C
11:58:04: 2400/2016MHz  5.43  79%   0%  77%   0%   0%   1%  44.8°C
11:58:11: 2400/2016MHz  5.59  82%   0%  81%   0%   0%   0%  40.5°C
11:58:19: 2400/2016MHz  5.46  97%   0%  95%   0%   0%   0%  44.9°C
11:58:25: 2400/2016MHz  5.47  68%   0%  66%   0%   0%   0%  40.9°C
11:58:32: 2400/2016MHz  5.67  94%   1%  92%   0%   0%   0%  41.2°C
11:58:42: 2400/2016MHz  5.78  98%   0%  96%   0%   0%   0%  44.3°C

##########################################################################

Linux 5.14.0-odroid-arm64 (odroid01) 	01/07/22 	_aarch64_	(6 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          21.27    0.09    0.43    0.07    0.00   78.15

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk0          11.01       249.59       205.22         0.00     442046     363460          0
mmcblk0boot0      0.03         0.20         0.00         0.00        360          0          0
mmcblk0boot1      0.03         0.20         0.00         0.00        360          0          0

              total        used        free      shared  buff/cache   available
Mem:          3.6Gi       482Mi       3.0Gi       0.0Ki       194Mi       3.1Gi
Swap:         2.0Gi          0B       2.0Gi

Filename				Type		Size	Used	Priority
/swapfile                              	file    	2097148	0	-2

CPU sysfs topology (clusters, cpufreq members, clockspeeds)
                 cpufreq   min    max
 CPU    cluster  policy   speed  speed   core type
  0        0        0     1000    2016   Cortex-A53
  1        0        0     1000    2016   Cortex-A53
  2        1        2     1000    2208   Cortex-A73
  3        1        2     1000    2208   Cortex-A73
  4        1        2     1000    2208   Cortex-A73
  5        1        2     1000    2208   Cortex-A73

Architecture:                    aarch64
CPU op-mode(s):                  32-bit, 64-bit
Byte Order:                      Little Endian
CPU(s):                          6
On-line CPU(s) list:             0-5
Thread(s) per core:              1
Core(s) per socket:              3
Socket(s):                       2
NUMA node(s):                    1
Vendor ID:                       ARM
Model:                           4
Model name:                      Cortex-A53
Stepping:                        r0p4
CPU max MHz:                     2400.0000
CPU min MHz:                     1000.0000
BogoMIPS:                        48.00
NUMA node0 CPU(s):               0-5
Vulnerability Itlb multihit:     Not affected
Vulnerability L1tf:              Not affected
Vulnerability Mds:               Not affected
Vulnerability Meltdown:          Not affected
Vulnerability Spec store bypass: Vulnerable
Vulnerability Spectre v1:        Mitigation; __user pointer sanitization
Vulnerability Spectre v2:        Vulnerable
Vulnerability Srbds:             Not affected
Vulnerability Tsx async abort:   Not affected
Flags:                           fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid

Compiler: /usr/bin/gcc (Ubuntu 10.3.0-1ubuntu1/aarch64-linux-gnu)
Userland: arm64
  Kernel: 5.14.0-odroid-arm64/aarch64
          CONFIG_HZ=250
          CONFIG_HZ_250=y
          CONFIG_PREEMPTION=y
          CONFIG_PREEMPT=y
          CONFIG_PREEMPT_COUNT=y
          CONFIG_PREEMPT_NOTIFIERS=y
          CONFIG_PREEMPT_RCU=y


| Hardkernel ODROID-N2Plus | 2400/2016 MHz | 5.14 | Hirsute arm64 | 9780 | 298900 | 1154140 | 4030 | 7120 | - |