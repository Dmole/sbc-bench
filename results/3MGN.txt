sbc-bench v0.9.1 Raspberry Pi Model B Rev 2 (Tue, 18 Jan 2022 16:08:48 +0000)

Distributor ID:	Raspbian
Description:	Raspbian GNU/Linux 11 (bullseye)
Release:	11
Codename:	bullseye
Architecture:	armhf

Raspberry Pi ThreadX version:
Oct 29 2021 10:49:08 
Copyright (c) 2012 Broadcom
version b8a114e5a9877e91ca8f26d1a5ce904b2ad3cf13 (clean) (release) (start)

ThreadX configuration (/boot/config.txt):
dtparam=audio=on
camera_auto_detect=1
display_auto_detect=1
dtoverlay=vc4-kms-v3d
max_framebuffers=2
disable_overscan=1
[cm4]
otg_mode=1
[all]
[pi4]
arm_boost=1
[all]

Actual ThreadX settings:
aphy_params_current=547
arm_freq_min=700
audio_pwm_mode=514
camera_auto_detect=1
config_hdmi_boost=2
disable_auto_turbo=1
disable_commandline_tags=2
disable_overscan=1
display_auto_detect=1
display_hdmi_rotate=-1
display_lcd_rotate=-1
dphy_params_current=547
dvfs=3
enable_tvout=1
enable_uart=1
force_pwm_open=1
framebuffer_ignore_alpha=1
framebuffer_swap=1
ignore_lcd=1
init_uart_clock=0x2dc6c00
mask_gpu_interrupt0=3072
mask_gpu_interrupt1=26370
max_framebuffers=2
pause_burst_frames=1
program_serial_random=1
total_mem=512
hdmi_force_cec_address:0=65535
hdmi_force_cec_address:1=65535
hdmi_pixel_freq_limit:0=0x9a7ec80

/usr/bin/gcc (Raspbian 10.2.1-6+rpi1) 10.2.1 20210110

Uptime: 16:08:50 up 7 min,  1 user,  load average: 0.54, 0.41, 0.26

Linux 5.10.63+ (raspberrypi) 	01/18/22 	_armv6l_	(1 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          10.67    0.12    8.16    1.66    0.00   79.39

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk0          13.82       293.35        48.41         0.00     130185      21484          0

               total        used        free      shared  buff/cache   available
Mem:           429Mi        34Mi       349Mi       0.0Ki        44Mi       347Mi
Swap:           99Mi          0B        99Mi

Filename				Type		Size	Used	Priority
/var/swap                              	file    	102396	0	-2

##########################################################################

Checking cpufreq OPP (ARM1176):

Cpufreq OPP:  700  ThreadX:  700  Measured:  690 @ 1.2V

##########################################################################

Executing benchmark on cpu0 (ARM1176):

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :    119.8 MB/s (1.0%)
 C copy backwards (32 byte blocks)                    :    120.7 MB/s (1.3%)
 C copy backwards (64 byte blocks)                    :    123.1 MB/s (1.4%)
 C copy                                               :    122.3 MB/s (0.7%)
 C copy prefetched (32 bytes step)                    :    358.1 MB/s (23.6%)
 C copy prefetched (64 bytes step)                    :    201.5 MB/s (0.7%)
 C 2-pass copy                                        :    132.9 MB/s (1.6%)
 C 2-pass copy prefetched (32 bytes step)             :    240.6 MB/s (1.7%)
 C 2-pass copy prefetched (64 bytes step)             :    204.3 MB/s (1.0%)
 C fill                                               :    735.6 MB/s (0.2%)
 C fill (shuffle within 16 byte blocks)               :    735.7 MB/s (0.6%)
 C fill (shuffle within 32 byte blocks)               :    735.4 MB/s (0.9%)
 C fill (shuffle within 64 byte blocks)               :    735.1 MB/s (0.9%)
 ---
 standard memcpy                                      :    355.0 MB/s (1.4%)
 standard memset                                      :   1424.4 MB/s (1.1%)
 ---
 VFP copy                                             :    157.8 MB/s (1.0%)
 VFP 2-pass copy                                      :    141.0 MB/s (1.1%)
 ARM fill (STRD)                                      :    735.3 MB/s (0.2%)
 ARM fill (STM with 8 registers)                      :   1088.3 MB/s
 ARM fill (STM with 4 registers)                      :   1442.9 MB/s (0.9%)
 ARM copy prefetched (incr pld)                       :    355.9 MB/s
 ARM copy prefetched (wrap pld)                       :    186.5 MB/s
 ARM 2-pass copy prefetched (incr pld)                :    282.2 MB/s (0.9%)
 ARM 2-pass copy prefetched (wrap pld)                :    224.2 MB/s (1.3%)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 VFP copy (from framebuffer)                          :    164.3 MB/s (0.3%)
 VFP 2-pass copy (from framebuffer)                   :    150.0 MB/s (1.3%)
 ARM copy (from framebuffer)                          :    146.2 MB/s (0.4%)
 ARM 2-pass copy (from framebuffer)                   :    160.8 MB/s (0.2%)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.2 ns          /     0.5 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.1 ns          /     0.0 ns 
     16384 :    1.7 ns          /     2.6 ns 
     32768 :   32.5 ns          /    52.9 ns 
     65536 :   52.7 ns          /    75.8 ns 
    131072 :   68.8 ns          /    92.7 ns 
    262144 :  133.5 ns          /   208.9 ns 
    524288 :  228.7 ns          /   399.9 ns 
   1048576 :  276.5 ns          /   498.9 ns 
   2097152 :  300.3 ns          /   550.0 ns 
   4194304 :  312.8 ns          /   575.6 ns 
   8388608 :  319.4 ns          /   590.7 ns 
  16777216 :  333.4 ns          /   606.7 ns 
  33554432 :  351.9 ns          /   656.6 ns 
  67108864 :  383.3 ns          /   719.5 ns 

##########################################################################

Executing benchmark twice on cluster 0 (ARM1176)

OpenSSL 1.1.1k, built on 25 Mar 2021
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes
aes-128-cbc       8351.64k    12832.98k    14582.27k    15186.26k    15245.31k    14783.83k
aes-128-cbc       7452.71k    12068.37k    14681.17k    15373.31k    15605.76k    15357.27k
aes-192-cbc       5841.53k     9809.92k    12228.61k    12979.54k    13101.74k    12927.57k
aes-192-cbc       6020.05k    10209.94k    12424.11k    13238.27k    13494.95k    13331.11k
aes-256-cbc       6475.07k     9686.12k    10880.68k    11452.76k    11408.73k    11512.49k
aes-256-cbc       6648.35k     9974.95k    11279.53k    11582.12k    11856.55k    11747.33k

##########################################################################

Executing benchmark single-threaded on cpu0 (ARM1176)

7-Zip (a) [32] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,32 bits,1 CPU LE)

LE
CPU Freq: 9142857 9142857 12800000 12800000 16000000 32000000 56888888 128000000 292571428

RAM size:     429 MB,  # CPU hardware threads:   1
RAM usage:    219 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:        225    99    223    220  |       4976    99    429    425
23:        209    98    217    214  |       4710    95    427    408
24:        206    99    225    222  |       4777    98    426    419
----------------------------------  | ------------------------------
Avr:              99    222    218  |               98    427    417
Tot:              98    324    318

Compression: 218
Decompression: 417
Total: 318

##########################################################################

Testing clockspeeds again. System health now:

Time        fake/real   load %cpu %sys %usr %nice %io %irq   Temp    VCore
16:34:06:  700/ 700MHz  1.28 100%   2%  97%   0%   0%   0%  53.0°C     1.2V

Checking cpufreq OPP (ARM1176):

Cpufreq OPP:  700  ThreadX:  700  Measured:  335 @ 1.2V

##########################################################################

Thermal source: /sys/devices/virtual/thermal/thermal_zone0/ (cpu-thermal)

System health while running tinymembench:

Time        fake/real   load %cpu %sys %usr %nice %io %irq   Temp    VCore
16:09:12:  700/ 700MHz  0.76  22%   7%  12%   0%   1%   0%  41.2°C     1.2V
16:10:11:  700/ 700MHz  1.02 100%   1%  98%   0%   0%   0%  42.8°C     1.2V
16:11:10:  700/ 700MHz  1.19 100%   0%  99%   0%   0%   0%  46.5°C     1.2V
16:12:10:  700/ 700MHz  1.33 100%   0%  99%   0%   0%   0%  46.5°C     1.2V
16:13:10:  700/ 700MHz  1.38 100%   0%  99%   0%   0%   0%  46.5°C     1.2V
16:14:08:  700/ 700MHz  1.36 100%   0%  99%   0%   0%   0%  46.5°C     1.2V
16:15:07:  700/ 700MHz  1.26 100%   0%  99%   0%   0%   0%  46.5°C     1.2V
16:16:07:  700/ 700MHz  1.28 100%   0%  99%   0%   0%   0%  46.5°C     1.2V
16:17:06:  700/ 700MHz  1.28 100%   0%  99%   0%   0%   0%  47.6°C     1.2V
16:18:06:  700/ 700MHz  1.28 100%   0%  99%   0%   0%   0%  47.6°C     1.2V
16:19:06:  700/ 700MHz  1.44 100%   1%  98%   0%   0%   0%  48.7°C     1.2V
16:20:05:  700/ 700MHz  1.42 100%   0%  99%   0%   0%   0%  48.7°C     1.2V
16:21:04:  700/ 700MHz  1.38 100%   0%  99%   0%   0%   0%  49.8°C     1.2V
16:22:04:  700/ 700MHz  1.32 100%   0%  99%   0%   0%   0%  49.8°C     1.2V
16:23:03:  700/ 700MHz  1.24 100%   0%  99%   0%   0%   0%  49.8°C     1.2V
16:24:03:  700/ 700MHz  1.31 100%   0%  99%   0%   0%   0%  50.8°C     1.2V
16:25:05:  700/ 700MHz  1.40 100%   1%  97%   0%   0%   0%  51.4°C     1.2V
16:26:03:  700/ 700MHz  1.36 100%   0%  98%   0%   0%   0%  51.4°C     1.2V
16:27:03:  700/ 700MHz  1.31 100%   0%  99%   0%   0%   0%  51.9°C     1.2V
16:28:02:  700/ 700MHz  1.30 100%   0%  99%   0%   0%   0%  51.9°C     1.2V

System health while running OpenSSL benchmark:

Time        fake/real   load %cpu %sys %usr %nice %io %irq   Temp    VCore
16:29:08:  700/ 700MHz  1.53  78%   2%  75%   0%   0%   0%  51.9°C     1.2V
16:29:43:  700/ 700MHz  1.58 100%   0%  99%   0%   0%   0%  52.5°C     1.2V
16:30:18:  700/ 700MHz  1.54 100%   0%  99%   0%   0%   0%  53.0°C     1.2V

System health while running 7-zip single core benchmark:

Time        fake/real   load %cpu %sys %usr %nice %io %irq   Temp    VCore
16:30:58:  700/ 700MHz  1.72  80%   2%  76%   0%   0%   0%  53.0°C     1.2V
16:32:32:  700/ 700MHz  1.29 100%   0%  99%   0%   0%   0%  51.9°C     1.2V
16:34:06:  700/ 700MHz  1.28 100%   2%  97%   0%   0%   0%  53.0°C     1.2V

##########################################################################

Throttling statistics (time spent on each cpufreq OPP):

 700 MHz: 1609.74 sec

##########################################################################

dmesg output while running the benchmarks:

[  445.793743] process 'local/src/tinymembench/tinymembench' started with executable stack

##########################################################################

Linux 5.10.63+ (raspberrypi) 	01/18/22 	_armv6l_	(1 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          80.02    0.09    2.57    0.36    0.00   16.97

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk0           3.71        69.40        12.64     14149.89     142869      26032   29131088

               total        used        free      shared  buff/cache   available
Mem:           429Mi        34Mi       334Mi       0.0Ki        60Mi       347Mi
Swap:           99Mi          0B        99Mi

Filename				Type		Size	Used	Priority
/var/swap                              	file    	102396	0	-2

CPU sysfs topology (clusters, cpufreq members, clockspeeds)
                 cpufreq   min    max
 CPU    cluster  policy   speed  speed   core type
  0       -1        0      700     700   ARM1176 / r0p7

Architecture:        armv6l
Byte Order:          Little Endian
CPU(s):              1
On-line CPU(s) list: 0
Thread(s) per core:  1
Core(s) per socket:  1
Socket(s):           1
Vendor ID:           ARM
Model:               7
Model name:          ARM1176
Stepping:            r0p7
CPU max MHz:         700.0000
CPU min MHz:         700.0000
BogoMIPS:            697.95
Flags:               half thumb fastmult vfp edsp java tls

SoC guess: BCM2835
 Compiler: /usr/bin/gcc (Raspbian 10.2.1-6+rpi1/arm-linux-gnueabihf)
 Userland: armhf
  ThreadX: b8a114e5a9877e91ca8f26d1a5ce904b2ad3cf13 / Oct 29 2021 10:49:08 
   Kernel: 5.10.63+/armv6l
           CONFIG_HZ=100
           CONFIG_HZ_100=y
           CONFIG_HZ_FIXED=0
           CONFIG_PREEMPTIRQ_TRACEPOINTS=y
           CONFIG_PREEMPT_VOLUNTARY=y


| Raspberry Pi Model B Rev 2 | 700 MHz | 5.10 | Bullseye armv6l/armhf | 110 | 7900 | 11630 | 360 | 1420 | - |