sbc-bench v0.9.2 Hardkernel ODROID-N2Plus (Sat, 22 Jan 2022 21:14:58 +0100)

Distributor ID:	Ubuntu
Description:	Ubuntu 20.04.3 LTS
Release:	20.04
Codename:	focal

Armbian release info:
BOARD=odroidn2
BOARD_NAME="Odroid N2"
BOARDFAMILY=meson-g12b
BUILD_REPOSITORY_URL=https://github.com/armbian/build
BUILD_REPOSITORY_COMMIT=d7794cc7b-dirty
VERSION=21.08.8
LINUXFAMILY=meson64
ARCH=arm64
IMAGE_TYPE=user-built
BOARD_TYPE=conf
INITRD_ARCH=arm64
KERNEL_IMAGE_TYPE=Image
BRANCH=current

/usr/bin/gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0

Uptime: 21:14:58 up 8 min,  1 user,  load average: 0.35, 0.27, 0.12

Linux 5.10.81-meson64 (odroidn2) 	01/22/22 	_aarch64_	(6 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           3.79    0.01    1.41    0.19    0.00   94.61

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk0           0.39        10.67         0.00         0.00       5224          0          0
mmcblk1         100.98       892.54      1363.07         0.00     436945     667292          0
mmcblk1boot0      0.12         0.47         0.00         0.00        232          0          0
mmcblk1boot1      0.12         0.47         0.00         0.00        232          0          0
zram0             1.15         4.59         0.01         0.00       2248          4          0
zram1             0.54         0.92         4.31         0.00        452       2108          0

              total        used        free      shared  buff/cache   available
Mem:          3.6Gi       157Mi       3.3Gi       5.0Mi       189Mi       3.4Gi
Swap:         1.8Gi          0B       1.8Gi

Filename				Type		Size	Used	Priority
/dev/zram0                             	partition	1892440	0	5

##########################################################################

Checking cpufreq OPP for cpu0-cpu1 (Cortex-A53):

Cpufreq OPP: 2016    Measured: 2015 (2010.045/2014.133/2013.605)
Cpufreq OPP: 1908    Measured: 1910 (1905.899/1904.999/1905.832)
Cpufreq OPP: 1800    Measured: 1800 (1797.806/1796.005/1797.946)
Cpufreq OPP: 1704    Measured: 1705 (1702.482/1699.775/1701.728)
Cpufreq OPP: 1608    Measured: 1605 (1603.564/1604.261/1604.162)
Cpufreq OPP: 1512    Measured: 1500 (1498.029/1498.098/1497.022)
Cpufreq OPP: 1398    Measured: 1395 (1392.222/1396.241/1399.176)
Cpufreq OPP: 1200    Measured: 1200 (1196.052/1199.204/1198.077)
Cpufreq OPP: 1000    Measured: 1000 (997.831/997.278/996.808)
Cpufreq OPP:  667    Measured:  665 (664.783/664.589/664.830)
Cpufreq OPP:  500    Measured:  500 (497.964/498.210/498.134)
Cpufreq OPP:  250    Measured:  250 (248.345/247.514/247.774)
Cpufreq OPP:  100    Measured:  100 (98.067/97.871/98.082)

Checking cpufreq OPP for cpu2-cpu5 (Cortex-A73):

Cpufreq OPP: 2400    Measured: 2400 (2398.802/2398.802/2398.802)
Cpufreq OPP: 2304    Measured: 2305 (2302.366/2302.812/2302.839)
Cpufreq OPP: 2208    Measured: 2210 (2206.003/2206.775/2206.726)
Cpufreq OPP: 2108    Measured: 2100 (2098.683/2098.836/2098.443)
Cpufreq OPP: 2016    Measured: 2015 (2014.812/2014.812/2014.812)
Cpufreq OPP: 1908    Measured: 1910 (1906.665/1906.935/1906.867)
Cpufreq OPP: 1800    Measured: 1800 (1798.788/1798.547/1798.747)
Cpufreq OPP: 1704    Measured: 1705 (1702.859/1702.805/1702.841)
Cpufreq OPP: 1608    Measured: 1610 (1606.877/1606.817/1606.837)
Cpufreq OPP: 1512    Measured: 1500 (1498.568/1498.811/1498.829)
Cpufreq OPP: 1398    Measured: 1400 (1396.679/1397.057/1396.121)
Cpufreq OPP: 1200    Measured: 1200 (1198.897/1198.911/1198.897)
Cpufreq OPP: 1000    Measured: 1000 (998.700/999.014/998.941)
Cpufreq OPP:  667    Measured:  670 (665.305/665.700/665.566)
Cpufreq OPP:  500    Measured:  500 (499.039/498.962/498.651)
Cpufreq OPP:  250    Measured:  250 (249.016/249.082/248.993)
Cpufreq OPP:  100    Measured:  100 (98.954/99.231/99.099)

##########################################################################

Executing benchmark on cpu0 (Cortex-A53):

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   2079.0 MB/s (2.4%)
 C copy backwards (32 byte blocks)                    :   2058.1 MB/s (0.9%)
 C copy backwards (64 byte blocks)                    :   2074.3 MB/s (1.5%)
 C copy                                               :   2131.0 MB/s (0.5%)
 C copy prefetched (32 bytes step)                    :   1602.3 MB/s (0.3%)
 C copy prefetched (64 bytes step)                    :   1843.0 MB/s
 C 2-pass copy                                        :   1864.6 MB/s (0.2%)
 C 2-pass copy prefetched (32 bytes step)             :   1347.2 MB/s
 C 2-pass copy prefetched (64 bytes step)             :   1158.8 MB/s
 C fill                                               :   7696.4 MB/s
 C fill (shuffle within 16 byte blocks)               :   7694.1 MB/s
 C fill (shuffle within 32 byte blocks)               :   7687.5 MB/s
 C fill (shuffle within 64 byte blocks)               :   7691.3 MB/s
 ---
 standard memcpy                                      :   2182.8 MB/s (0.5%)
 standard memset                                      :   7695.2 MB/s
 ---
 NEON LDP/STP copy                                    :   2194.0 MB/s
 NEON LDP/STP copy pldl2strm (32 bytes step)          :   1417.5 MB/s (0.5%)
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   1834.9 MB/s (0.3%)
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   2429.9 MB/s
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   2428.1 MB/s
 NEON LD1/ST1 copy                                    :   2164.6 MB/s (0.6%)
 NEON STP fill                                        :   7686.8 MB/s
 NEON STNP fill                                       :   6309.7 MB/s
 ARM LDP/STP copy                                     :   2195.7 MB/s (0.3%)
 ARM STP fill                                         :   7701.1 MB/s
 ARM STNP fill                                        :   6313.4 MB/s

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :    244.2 MB/s
 NEON LDP/STP 2-pass copy (from framebuffer)          :    261.1 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :     71.8 MB/s
 NEON LD1/ST1 2-pass copy (from framebuffer)          :     73.5 MB/s
 ARM LDP/STP copy (from framebuffer)                  :    135.3 MB/s
 ARM LDP/STP 2-pass copy (from framebuffer)           :    139.7 MB/s (0.1%)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    3.4 ns          /     5.7 ns 
    131072 :    5.2 ns          /     8.0 ns 
    262144 :    7.2 ns          /    11.5 ns 
    524288 :   60.5 ns          /    94.8 ns 
   1048576 :   92.5 ns          /   126.6 ns 
   2097152 :  109.2 ns          /   137.8 ns 
   4194304 :  121.8 ns          /   145.5 ns 
   8388608 :  128.9 ns          /   149.3 ns 
  16777216 :  133.4 ns          /   152.3 ns 
  33554432 :  136.2 ns          /   154.7 ns 
  67108864 :  147.2 ns          /   175.4 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    3.4 ns          /     5.7 ns 
    131072 :    5.2 ns          /     8.0 ns 
    262144 :    6.4 ns          /     9.4 ns 
    524288 :   61.0 ns          /    97.1 ns 
   1048576 :   94.0 ns          /   131.5 ns 
   2097152 :  108.7 ns          /   137.2 ns 
   4194304 :  117.2 ns          /   141.2 ns 
   8388608 :  121.5 ns          /   142.9 ns 
  16777216 :  123.7 ns          /   143.6 ns 
  33554432 :  124.8 ns          /   144.0 ns 
  67108864 :  125.4 ns          /   144.1 ns 

Executing benchmark on cpu2 (Cortex-A73):

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   4003.1 MB/s
 C copy backwards (32 byte blocks)                    :   4004.0 MB/s
 C copy backwards (64 byte blocks)                    :   4000.3 MB/s
 C copy                                               :   4067.4 MB/s
 C copy prefetched (32 bytes step)                    :   4052.2 MB/s
 C copy prefetched (64 bytes step)                    :   4063.9 MB/s
 C 2-pass copy                                        :   2869.3 MB/s (0.2%)
 C 2-pass copy prefetched (32 bytes step)             :   2791.2 MB/s
 C 2-pass copy prefetched (64 bytes step)             :   2815.2 MB/s
 C fill                                               :   7213.6 MB/s
 C fill (shuffle within 16 byte blocks)               :   7213.4 MB/s
 C fill (shuffle within 32 byte blocks)               :   7206.2 MB/s
 C fill (shuffle within 64 byte blocks)               :   7213.6 MB/s
 ---
 standard memcpy                                      :   4071.9 MB/s
 standard memset                                      :   7215.6 MB/s
 ---
 NEON LDP/STP copy                                    :   4078.8 MB/s
 NEON LDP/STP copy pldl2strm (32 bytes step)          :   4079.5 MB/s
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   4079.9 MB/s (1.4%)
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   3921.0 MB/s (0.8%)
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   4045.5 MB/s
 NEON LD1/ST1 copy                                    :   4080.2 MB/s
 NEON STP fill                                        :   7213.7 MB/s
 NEON STNP fill                                       :   7213.7 MB/s (0.2%)
 ARM LDP/STP copy                                     :   4079.4 MB/s
 ARM STP fill                                         :   7210.8 MB/s
 ARM STNP fill                                        :   7213.9 MB/s

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :    422.6 MB/s (0.1%)
 NEON LDP/STP 2-pass copy (from framebuffer)          :    434.1 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :    423.4 MB/s (0.2%)
 NEON LD1/ST1 2-pass copy (from framebuffer)          :    434.1 MB/s
 ARM LDP/STP copy (from framebuffer)                  :    423.7 MB/s (0.2%)
 ARM LDP/STP 2-pass copy (from framebuffer)           :    425.4 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    4.6 ns          /     7.7 ns 
    131072 :    6.9 ns          /    10.8 ns 
    262144 :    8.6 ns          /    12.1 ns 
    524288 :   10.0 ns          /    12.6 ns 
   1048576 :   19.9 ns          /    29.9 ns 
   2097152 :   71.9 ns          /   107.6 ns 
   4194304 :  102.0 ns          /   136.1 ns 
   8388608 :  120.1 ns          /   151.2 ns 
  16777216 :  129.9 ns          /   157.8 ns 
  33554432 :  135.6 ns          /   160.9 ns 
  67108864 :  138.8 ns          /   162.3 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    4.6 ns          /     7.7 ns 
    131072 :    6.9 ns          /    10.8 ns 
    262144 :    8.1 ns          /    12.1 ns 
    524288 :    8.7 ns          /    12.7 ns 
   1048576 :    9.4 ns          /    13.6 ns 
   2097152 :   70.4 ns          /   105.9 ns 
   4194304 :  100.0 ns          /   133.6 ns 
   8388608 :  114.2 ns          /   143.0 ns 
  16777216 :  121.1 ns          /   146.5 ns 
  33554432 :  124.5 ns          /   148.0 ns 
  67108864 :  126.5 ns          /   148.8 ns 

##########################################################################

Executing benchmark on each cluster individually

OpenSSL 1.1.1f, built on 31 Mar 2020
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes
aes-128-cbc     169515.63k   509297.96k  1001527.55k  1354112.34k  1508884.48k  1518884.18k
aes-128-cbc     406107.27k  1015599.89k  1569796.10k  1806955.86k  1904164.86k  1911417.51k
aes-192-cbc     161779.50k   454580.95k   819373.31k  1044900.18k  1136173.06k  1141003.61k
aes-192-cbc     378107.94k   919968.70k  1315067.90k  1518607.70k  1588573.53k  1593698.99k
aes-256-cbc     157132.28k   419656.75k   710928.90k   874691.24k   937768.28k   941004.12k
aes-256-cbc     365495.47k   839598.61k  1183852.71k  1311360.00k  1362946.73k  1366725.97k

##########################################################################

Executing benchmark single-threaded on cpu0 (Cortex-A53)

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: 64000000 64000000 - - - - 512000000 - -

RAM size:    3696 MB,  # CPU hardware threads:   6
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       1178    99   1155   1147  |      21699   100   1862   1853
23:       1157    99   1188   1179  |      21220   100   1846   1837
24:       1142    99   1237   1228  |      20822   100   1837   1828
25:       1139    99   1310   1301  |      20433   100   1828   1819
----------------------------------  | ------------------------------
Avr:              99   1222   1214  |              100   1843   1834
Tot:              99   1533   1524

Executing benchmark single-threaded on cpu2 (Cortex-A73)

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: 64000000 - - - 128000000 256000000 - - -

RAM size:    3696 MB,  # CPU hardware threads:   6
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       2053   100   2002   1997  |      31492   100   2691   2689
23:       2005   100   2049   2043  |      30768   100   2666   2663
24:       1975   100   2129   2124  |      30042   100   2640   2637
25:       1951   100   2234   2228  |      29478   100   2626   2624
----------------------------------  | ------------------------------
Avr:             100   2103   2098  |              100   2656   2653
Tot:             100   2380   2376

##########################################################################

Executing benchmark 3 times multi-threaded

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: - 64000000 64000000 - - - 512000000 - -

RAM size:    3696 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       7572   567   1299   7366  |     140803   509   2360  12008
23:       7277   565   1311   7415  |     137536   509   2339  11901
24:       7200   569   1360   7742  |     134300   508   2319  11788
25:       6996   568   1407   7988  |     131785   509   2304  11728
----------------------------------  | ------------------------------
Avr:             567   1344   7628  |              509   2330  11856
Tot:             538   1837   9742

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: - 64000000 - - - - - - 2048000000

RAM size:    3696 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       7577   566   1302   7371  |     140851   509   2359  12012
23:       7208   562   1306   7344  |     137363   508   2339  11886
24:       7094   565   1350   7628  |     134247   508   2319  11783
25:       6966   567   1404   7955  |     131815   509   2305  11731
----------------------------------  | ------------------------------
Avr:             565   1340   7575  |              509   2330  11853
Tot:             537   1835   9714

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: 64000000 - 64000000 - - 256000000 512000000 - -

RAM size:    3696 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       7479   558   1304   7276  |     140836   509   2361  12011
23:       7222   562   1310   7359  |     137567   508   2342  11904
24:       7157   568   1354   7696  |     134474   509   2320  11803
25:       6996   566   1412   7988  |     131805   508   2307  11730
----------------------------------  | ------------------------------
Avr:             563   1345   7580  |              509   2332  11862
Tot:             536   1839   9721

Compression: 7628,7575,7580
Decompression: 11856,11853,11862
Total: 9742,9714,9721

##########################################################################

Testing clockspeeds again. System health now:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
21:33:32: 2400/2016MHz  5.83  97%   1%  95%   0%   0%   0%  46.6°C

Checking cpufreq OPP for cpu0-cpu1 (Cortex-A53):

Cpufreq OPP: 2016    Measured: 2005 (2003.533/2004.155/2002.936)
Cpufreq OPP: 1908    Measured: 1900 (1898.211/1881.966/1660.022)
Cpufreq OPP: 1800    Measured: 1805 (1800.875/1787.631/1780.807)
Cpufreq OPP: 1704    Measured: 1695 (1693.266/1502.388/1693.550)
Cpufreq OPP: 1608    Measured: 1605 (1600.126/1600.543/1596.980)
Cpufreq OPP: 1512    Measured: 1495 (1491.609/1491.919/1490.559)
Cpufreq OPP: 1398    Measured: 1395 (1391.877/1387.033/1392.838)
Cpufreq OPP: 1200    Measured: 1195 (1192.104/1194.185/1196.010)
Cpufreq OPP: 1000    Measured: 1000 (995.716/997.097/996.893)
Cpufreq OPP:  667    Measured:  665 (664.029/663.679/664.437)
Cpufreq OPP:  500    Measured:  500 (496.672/495.167/499.286)
Cpufreq OPP:  250    Measured:  250 (247.344/247.990/248.024)
Cpufreq OPP:  100    Measured:  100 (98.489/99.203/98.644)

Checking cpufreq OPP for cpu2-cpu5 (Cortex-A73):

Cpufreq OPP: 2400    Measured: 1865 (1863.054/2793.537/1862.934)
Cpufreq OPP: 2304    Measured: 2300 (2299.270/1629.699/2300.371)
Cpufreq OPP: 2208    Measured: 2205 (2204.147/1148.307/2202.968)
Cpufreq OPP: 2108    Measured: 2100 (2096.372/1398.046/2095.566)
Cpufreq OPP: 2016    Measured: 2015 (2012.049/2013.354/2013.530)
Cpufreq OPP: 1908    Measured: 1910 (1905.607/1905.719/1905.877)
Cpufreq OPP: 1800    Measured: 1800 (1798.667/1799.168/1796.885)
Cpufreq OPP: 1704    Measured: 1700 (1699.810/1700.598/1474.002)
Cpufreq OPP: 1608    Measured: 1145 (1143.065/1691.006/1135.696)
Cpufreq OPP: 1512    Measured: 1500 (1496.050/1497.612/1495.964)
Cpufreq OPP: 1398    Measured: 1400 (1395.216/898.730/870.180)
Cpufreq OPP: 1200    Measured: 1055 (1050.233/1406.727/1197.688)
Cpufreq OPP: 1000    Measured: 1000 (998.097/998.121/997.687)
Cpufreq OPP:  667    Measured:  540 (535.371/593.014/792.781)
Cpufreq OPP:  500    Measured:  500 (498.586/498.756/498.111)
Cpufreq OPP:  250    Measured:  120 (119.489/248.798/248.720)
Cpufreq OPP:  100    Measured:   50 (49.833/49.876/59.243)

##########################################################################

Thermal source: /sys/class/hwmon/hwmon0/ (cpu_thermal)

System health while running tinymembench:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
21:15:20: 2400/2016MHz  0.52   5%   1%   4%   0%   0%   0%  30.4°C
21:16:40: 2400/2016MHz  0.88  16%   0%  16%   0%   0%   0%  30.0°C
21:18:00: 2400/2016MHz  0.97  16%   0%  16%   0%   0%   0%  29.2°C
21:19:20: 2400/2016MHz  0.99  16%   0%  16%   0%   0%   0%  29.5°C
21:20:40: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.8°C
21:22:00: 2400/2016MHz  1.03  16%   0%  16%   0%   0%   0%  33.6°C
21:23:20: 2400/2016MHz  1.01  16%   0%  16%   0%   0%   0%  30.0°C
21:24:40: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  30.0°C

System health while running OpenSSL benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
21:25:56: 2400/2016MHz  1.00  11%   0%  11%   0%   0%   0%  31.0°C
21:26:12: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.1°C
21:26:28: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  31.6°C
21:26:44: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.3°C
21:27:00: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  32.2°C
21:27:16: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.3°C
21:27:32: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  32.3°C

System health while running 7-zip single core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
21:27:44: 2400/2016MHz  1.00  12%   0%  11%   0%   0%   0%  33.1°C
21:27:51: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.1°C
21:27:58: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.0°C
21:28:05: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.1°C
21:28:12: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.0°C
21:28:19: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  28.9°C
21:28:26: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.1°C
21:28:33: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.1°C
21:28:40: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.0°C
21:28:47: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.2°C
21:28:54: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.2°C
21:29:01: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.2°C
21:29:08: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.4°C
21:29:15: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.3°C
21:29:22: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  30.8°C
21:29:29: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  31.5°C
21:29:36: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  31.4°C
21:29:43: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  31.4°C
21:29:50: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  31.2°C
21:29:57: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  31.4°C
21:30:04: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  31.2°C
21:30:11: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  31.1°C
21:30:18: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  31.2°C

System health while running 7-zip multi core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
21:30:22: 2400/2016MHz  1.00  12%   0%  12%   0%   0%   0%  32.4°C
21:30:33: 2400/2016MHz  1.92  95%   0%  94%   0%   0%   0%  46.2°C
21:30:46: 2400/2016MHz  2.25  86%   0%  85%   0%   0%   0%  46.2°C
21:30:59: 2400/2016MHz  3.23  84%   0%  82%   0%   0%   0%  45.8°C
21:31:09: 2400/2016MHz  3.50  80%   1%  79%   0%   0%   0%  41.8°C
21:31:22: 2400/2016MHz  3.96  97%   1%  96%   0%   0%   0%  45.8°C
21:31:36: 2400/2016MHz  3.95  84%   0%  83%   0%   0%   0%  46.5°C
21:31:50: 2400/2016MHz  4.17  88%   0%  87%   0%   0%   0%  46.8°C
21:32:03: 2400/2016MHz  4.79  84%   0%  83%   0%   0%   0%  45.9°C
21:32:14: 2400/2016MHz  5.06  81%   0%  80%   0%   0%   0%  41.3°C
21:32:28: 2400/2016MHz  5.48  97%   1%  96%   0%   0%   0%  46.2°C
21:32:42: 2400/2016MHz  5.43  87%   0%  86%   0%   0%   0%  47.1°C
21:32:54: 2400/2016MHz  5.70  88%   0%  87%   0%   0%   0%  46.9°C
21:33:08: 2400/2016MHz  5.65  83%   0%  82%   0%   0%   0%  46.4°C
21:33:19: 2400/2016MHz  5.62  82%   1%  80%   0%   0%   0%  42.2°C
21:33:32: 2400/2016MHz  5.83  97%   1%  95%   0%   0%   0%  46.6°C

##########################################################################

Linux 5.10.81-meson64 (odroidn2) 	01/22/22 	_aarch64_	(6 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          22.01    0.01    0.71    0.06    0.00   77.22

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk0           0.12         3.20         0.00         0.00       5224          0          0
mmcblk1          30.96       273.14       478.30         0.00     445313     779792          0
mmcblk1boot0      0.04         0.14         0.00         0.00        232          0          0
mmcblk1boot1      0.04         0.14         0.00         0.00        232          0          0
zram0             0.35         1.38         0.00         0.00       2248          4          0
zram1             0.19         0.28         1.43         0.00        464       2328          0

              total        used        free      shared  buff/cache   available
Mem:          3.6Gi       259Mi       3.2Gi       5.0Mi       197Mi       3.3Gi
Swap:         1.8Gi          0B       1.8Gi

Filename				Type		Size	Used	Priority
/dev/zram0                             	partition	1892440	0	5

CPU sysfs topology (clusters, cpufreq members, clockspeeds)
                 cpufreq   min    max
 CPU    cluster  policy   speed  speed   core type
  0        0        0     1200    2016   Cortex-A53 / r0p4
  1        0        0     1200    2016   Cortex-A53 / r0p4
  2        1        2     1200    2400   Cortex-A73 / r0p2
  3        1        2     1200    2400   Cortex-A73 / r0p2
  4        1        2     1200    2400   Cortex-A73 / r0p2
  5        1        2     1200    2400   Cortex-A73 / r0p2

Architecture:                    aarch64
CPU op-mode(s):                  32-bit, 64-bit
Byte Order:                      Little Endian
CPU(s):                          6
On-line CPU(s) list:             0-5
Thread(s) per core:              1
Core(s) per socket:              3
Socket(s):                       2
NUMA node(s):                    1
Vendor ID:                       ARM
Model:                           4
Model name:                      Cortex-A53
Stepping:                        r0p4
CPU max MHz:                     2400.0000
CPU min MHz:                     100.0000
BogoMIPS:                        48.00
NUMA node0 CPU(s):               0-5
Vulnerability Itlb multihit:     Not affected
Vulnerability L1tf:              Not affected
Vulnerability Mds:               Not affected
Vulnerability Meltdown:          Not affected
Vulnerability Spec store bypass: Vulnerable
Vulnerability Spectre v1:        Mitigation; __user pointer sanitization
Vulnerability Spectre v2:        Vulnerable
Vulnerability Srbds:             Not affected
Vulnerability Tsx async abort:   Not affected
Flags:                           fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid

SoC guess: Amlogic S922X/A311D
 Compiler: /usr/bin/gcc (Ubuntu 9.3.0-17ubuntu1~20.04/aarch64-linux-gnu)
 Userland: arm64
   Kernel: 5.10.81-meson64/aarch64
           CONFIG_HZ=250
           CONFIG_HZ_250=y
           CONFIG_PREEMPTION=y
           CONFIG_PREEMPT=y
           CONFIG_PREEMPT_COUNT=y
           CONFIG_PREEMPT_NOTIFIERS=y
           CONFIG_PREEMPT_RCU=y


| Hardkernel ODROID-N2Plus | 2400/2016 MHz | 5.10 | Focal arm64 | 9720 | 287810 | 1153860 | 4070 | 7220 | - |