sbc-bench v0.9.2 Hardkernel ODROID-N2Plus (Tue, 25 Jan 2022 12:45:11 +0000)

Distributor ID:	Ubuntu
Description:	Ubuntu 20.04.2 LTS
Release:	20.04
Codename:	focal

Armbian release info:
BOARD=odroidn2
BOARD_NAME="Odroid N2"
BOARDFAMILY=meson-g12b
BUILD_REPOSITORY_URL=git@github.com:armbian/build
BUILD_REPOSITORY_COMMIT=aec64805a
DISTRIBUTION_CODENAME=focal
DISTRIBUTION_STATUS=supported
VERSION=21.08.1
LINUXFAMILY=meson64
ARCH=arm64
IMAGE_TYPE=stable
BOARD_TYPE=conf
INITRD_ARCH=arm64
KERNEL_IMAGE_TYPE=Image
BRANCH=current

/usr/bin/gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0

Uptime: 12:45:11 up 5 min,  1 user,  load average: 0.40, 0.25, 0.11

Linux 5.10.60-meson64 (odroidn2) 	01/25/22 	_aarch64_	(6 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           4.53    0.01    1.41    0.69    0.00   93.36

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk1          38.07      1138.37      2868.75         0.00     343789     866364          0
zram0             1.86         7.42         0.01         0.00       2240          4          0
zram1             0.70         1.50         6.46         0.00        452       1952          0

              total        used        free      shared  buff/cache   available
Mem:          1.8Gi       142Mi       1.5Gi       3.0Mi       128Mi       1.6Gi
Swap:         927Mi          0B       927Mi

Filename				Type		Size	Used	Priority
/dev/zram0                             	partition	950064	0	5

##########################################################################

Checking cpufreq OPP for cpu0-cpu1 (Cortex-A53):

Cpufreq OPP: 2016    Measured: 2015 (2013.806/2013.982/2013.806)
Cpufreq OPP: 1908    Measured: 1910 (1905.629/1905.877/1901.924)
Cpufreq OPP: 1800    Measured: 1800 (1795.945/1796.265/1796.705)
Cpufreq OPP: 1704    Measured: 1705 (1700.258/1702.213/1700.330)
Cpufreq OPP: 1608    Measured: 1610 (1605.837/1605.917/1604.341)
Cpufreq OPP: 1512    Measured: 1500 (1497.699/1496.640/1498.098)
Cpufreq OPP: 1398    Measured: 1400 (1395.789/1394.643/1396.030)
Cpufreq OPP: 1200    Measured: 1195 (1194.834/1198.244/1198.008)
Cpufreq OPP: 1000    Measured:  995 (990.774/998.073/997.940)
Cpufreq OPP:  667    Measured:  665 (663.722/664.857/664.315)
Cpufreq OPP:  500    Measured:  500 (498.064/498.375/498.504)
Cpufreq OPP:  250    Measured:  250 (248.041/248.194/248.177)
Cpufreq OPP:  100    Measured:   95 (91.087/97.949/98.047)

Checking cpufreq OPP for cpu2-cpu5 (Cortex-A73):

Cpufreq OPP: 2400    Measured: 2400 (2399.201/2398.887/2398.630)
Cpufreq OPP: 2304    Measured: 2305 (2302.733/2302.865/2302.444)
Cpufreq OPP: 2208    Measured: 2210 (2206.702/2206.799/2206.919)
Cpufreq OPP: 2108    Measured: 2100 (2098.639/2098.858/2098.814)
Cpufreq OPP: 2016    Measured: 2015 (2014.334/2014.787/2014.812)
Cpufreq OPP: 1908    Measured: 1910 (1906.800/1906.732/1906.867)
Cpufreq OPP: 1800    Measured: 1800 (1798.727/1798.828/1799.871)
Cpufreq OPP: 1704    Measured: 1705 (1702.751/1702.949/1702.877)
Cpufreq OPP: 1608    Measured: 1610 (1606.697/1606.817/1607.237)
Cpufreq OPP: 1512    Measured: 1500 (1498.794/1498.898/1498.794)
Cpufreq OPP: 1398    Measured: 1400 (1396.800/1396.921/1396.906)
Cpufreq OPP: 1200    Measured: 1200 (1198.536/1198.897/1198.884)
Cpufreq OPP: 1000    Measured: 1000 (998.808/998.893/999.038)
Cpufreq OPP:  667    Measured:  670 (665.646/665.667/665.673)
Cpufreq OPP:  500    Measured:  500 (498.921/498.980/498.939)
Cpufreq OPP:  250    Measured:  250 (248.965/248.833/248.953)
Cpufreq OPP:  100    Measured:  100 (99.043/99.162/98.868)

##########################################################################

Executing benchmark on cpu0 (Cortex-A53):

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   2037.9 MB/s (1.4%)
 C copy backwards (32 byte blocks)                    :   2016.2 MB/s (1.4%)
 C copy backwards (64 byte blocks)                    :   2046.2 MB/s (1.6%)
 C copy                                               :   2114.0 MB/s (1.2%)
 C copy prefetched (32 bytes step)                    :   1589.1 MB/s (0.3%)
 C copy prefetched (64 bytes step)                    :   1823.3 MB/s (0.2%)
 C 2-pass copy                                        :   1856.0 MB/s
 C 2-pass copy prefetched (32 bytes step)             :   1339.5 MB/s
 C 2-pass copy prefetched (64 bytes step)             :   1152.8 MB/s
 C fill                                               :   7685.9 MB/s
 C fill (shuffle within 16 byte blocks)               :   7686.1 MB/s
 C fill (shuffle within 32 byte blocks)               :   7684.4 MB/s
 C fill (shuffle within 64 byte blocks)               :   7683.5 MB/s
 ---
 standard memcpy                                      :   2156.3 MB/s (0.4%)
 standard memset                                      :   7690.5 MB/s
 ---
 NEON LDP/STP copy                                    :   2164.9 MB/s
 NEON LDP/STP copy pldl2strm (32 bytes step)          :   1412.1 MB/s (1.0%)
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   1812.6 MB/s (0.2%)
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   2403.2 MB/s (0.2%)
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   2399.0 MB/s
 NEON LD1/ST1 copy                                    :   2138.3 MB/s (1.0%)
 NEON STP fill                                        :   7687.7 MB/s
 NEON STNP fill                                       :   6307.7 MB/s
 ARM LDP/STP copy                                     :   2166.4 MB/s
 ARM STP fill                                         :   7692.8 MB/s
 ARM STNP fill                                        :   6308.1 MB/s

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :    248.0 MB/s
 NEON LDP/STP 2-pass copy (from framebuffer)          :    260.3 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :     72.0 MB/s
 NEON LD1/ST1 2-pass copy (from framebuffer)          :     73.5 MB/s
 ARM LDP/STP copy (from framebuffer)                  :    136.3 MB/s
 ARM LDP/STP 2-pass copy (from framebuffer)           :    139.5 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    3.4 ns          /     5.7 ns 
    131072 :    5.2 ns          /     8.0 ns 
    262144 :    6.4 ns          /     9.5 ns 
    524288 :   60.7 ns          /    95.2 ns 
   1048576 :   93.1 ns          /   127.1 ns 
   2097152 :  109.7 ns          /   138.4 ns 
   4194304 :  122.6 ns          /   146.0 ns 
   8388608 :  129.8 ns          /   150.0 ns 
  16777216 :  134.3 ns          /   153.1 ns 
  33554432 :  137.1 ns          /   155.6 ns 
  67108864 :  149.6 ns          /   179.2 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    3.4 ns          /     5.7 ns 
    131072 :    5.2 ns          /     8.0 ns 
    262144 :    6.4 ns          /     9.4 ns 
    524288 :   61.3 ns          /    97.3 ns 
   1048576 :   94.6 ns          /   131.9 ns 
   2097152 :  109.2 ns          /   137.8 ns 
   4194304 :  117.6 ns          /   141.7 ns 
   8388608 :  121.8 ns          /   143.2 ns 
  16777216 :  124.0 ns          /   143.9 ns 
  33554432 :  125.1 ns          /   144.2 ns 
  67108864 :  125.6 ns          /   144.3 ns 

Executing benchmark on cpu2 (Cortex-A73):

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   4015.0 MB/s
 C copy backwards (32 byte blocks)                    :   4015.7 MB/s
 C copy backwards (64 byte blocks)                    :   4011.8 MB/s
 C copy                                               :   4084.4 MB/s
 C copy prefetched (32 bytes step)                    :   4072.8 MB/s
 C copy prefetched (64 bytes step)                    :   4079.4 MB/s
 C 2-pass copy                                        :   3191.0 MB/s
 C 2-pass copy prefetched (32 bytes step)             :   2941.4 MB/s
 C 2-pass copy prefetched (64 bytes step)             :   3008.4 MB/s
 C fill                                               :   7169.3 MB/s
 C fill (shuffle within 16 byte blocks)               :   7168.7 MB/s
 C fill (shuffle within 32 byte blocks)               :   7163.3 MB/s
 C fill (shuffle within 64 byte blocks)               :   7169.4 MB/s
 ---
 standard memcpy                                      :   4086.2 MB/s
 standard memset                                      :   7166.5 MB/s
 ---
 NEON LDP/STP copy                                    :   4096.0 MB/s
 NEON LDP/STP copy pldl2strm (32 bytes step)          :   4096.2 MB/s
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   4095.7 MB/s
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   3927.0 MB/s (0.3%)
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   4051.6 MB/s
 NEON LD1/ST1 copy                                    :   4095.6 MB/s
 NEON STP fill                                        :   7167.9 MB/s (0.6%)
 NEON STNP fill                                       :   7168.6 MB/s
 ARM LDP/STP copy                                     :   4096.4 MB/s
 ARM STP fill                                         :   7166.5 MB/s
 ARM STNP fill                                        :   7160.8 MB/s

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :    413.4 MB/s (0.1%)
 NEON LDP/STP 2-pass copy (from framebuffer)          :    429.4 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :    413.4 MB/s
 NEON LD1/ST1 2-pass copy (from framebuffer)          :    429.1 MB/s
 ARM LDP/STP copy (from framebuffer)                  :    413.5 MB/s (0.1%)
 ARM LDP/STP 2-pass copy (from framebuffer)           :    417.5 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    4.6 ns          /     7.7 ns 
    131072 :    6.9 ns          /    10.8 ns 
    262144 :    8.6 ns          /    12.1 ns 
    524288 :   10.0 ns          /    12.6 ns 
   1048576 :   12.2 ns          /    15.3 ns 
   2097152 :   72.3 ns          /   108.0 ns 
   4194304 :  102.7 ns          /   136.8 ns 
   8388608 :  121.0 ns          /   151.7 ns 
  16777216 :  131.0 ns          /   158.3 ns 
  33554432 :  136.7 ns          /   161.5 ns 
  67108864 :  140.1 ns          /   162.8 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    4.6 ns          /     7.7 ns 
    131072 :    6.9 ns          /    10.8 ns 
    262144 :    8.1 ns          /    12.1 ns 
    524288 :    8.7 ns          /    12.7 ns 
   1048576 :    9.4 ns          /    13.6 ns 
   2097152 :   70.7 ns          /   106.4 ns 
   4194304 :  100.7 ns          /   134.2 ns 
   8388608 :  115.1 ns          /   143.6 ns 
  16777216 :  122.1 ns          /   147.1 ns 
  33554432 :  125.5 ns          /   148.6 ns 
  67108864 :  127.6 ns          /   149.5 ns 

##########################################################################

Executing benchmark on each cluster individually

OpenSSL 1.1.1f, built on 31 Mar 2020
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes
aes-128-cbc     169536.93k   509320.60k  1001707.95k  1354126.34k  1507571.03k  1516912.64k
aes-128-cbc     406112.98k  1015375.25k  1569670.40k  1808360.11k  1904328.70k  1911515.82k
aes-192-cbc     161896.11k   454881.15k   819567.70k  1045025.11k  1134324.39k  1142188.71k
aes-192-cbc     378107.35k   902563.43k  1319245.91k  1517297.32k  1588497.07k  1593715.37k
aes-256-cbc     157149.58k   418880.28k   710957.14k   874810.37k   937762.82k   941834.24k
aes-256-cbc     365503.09k   836405.70k  1183951.70k  1311635.80k  1362974.04k  1366720.51k

##########################################################################

Executing benchmark single-threaded on cpu0 (Cortex-A53)

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: 64000000 - - - - 256000000 512000000 - -

RAM size:    1855 MB,  # CPU hardware threads:   6
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       1170    99   1147   1139  |      21738   100   1864   1856
23:       1147    99   1178   1170  |      21217   100   1846   1837
24:       1138    99   1232   1224  |      20721    99   1829   1819
25:       1129    99   1298   1289  |      20408   100   1825   1817
----------------------------------  | ------------------------------
Avr:              99   1214   1205  |              100   1841   1832
Tot:              99   1528   1519

Executing benchmark single-threaded on cpu2 (Cortex-A73)

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: - - - 64000000 - - - - 2048000000

RAM size:    1855 MB,  # CPU hardware threads:   6
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       2051   100   2001   1995  |      31555   100   2697   2694
23:       2005   100   2049   2043  |      30773   100   2667   2664
24:       1967   100   2121   2115  |      30039   100   2640   2637
25:       1942   100   2224   2217  |      29471   100   2626   2623
----------------------------------  | ------------------------------
Avr:             100   2098   2093  |              100   2657   2655
Tot:             100   2378   2374

##########################################################################

Executing benchmark 3 times multi-threaded

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: - - - - - 256000000 - 1024000000 -

RAM size:    1855 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       7517   565   1293   7313  |     140762   508   2361  12004
23:       7230   563   1309   7367  |     136991   507   2339  11854
24:       7061   564   1347   7593  |     134172   508   2318  11777
25:       7047   565   1424   8046  |     131719   509   2303  11722
----------------------------------  | ------------------------------
Avr:             564   1343   7580  |              508   2330  11839
Tot:             536   1837   9709

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: - - - 64000000 - - - - -

RAM size:    1855 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       7500   565   1291   7297  |     140700   508   2361  11999
23:       7274   569   1304   7412  |     137255   508   2339  11877
24:       7146   569   1351   7683  |     134475   509   2321  11803
25:       7073   569   1420   8076  |     131643   509   2303  11716
----------------------------------  | ------------------------------
Avr:             568   1341   7617  |              508   2331  11849
Tot:             538   1836   9733

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: 64000000 - - - 128000000 - - - -

RAM size:    1855 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       7505   566   1289   7301  |     140630   508   2360  11993
23:       7310   572   1302   7449  |     137382   508   2340  11888
24:       7116   566   1351   7652  |     134282   508   2319  11786
25:       7046   565   1424   8046  |     131648   509   2303  11716
----------------------------------  | ------------------------------
Avr:             567   1342   7612  |              508   2330  11846
Tot:             538   1836   9729

Compression: 7580,7617,7612
Decompression: 11839,11849,11846
Total: 9709,9733,9729

##########################################################################

Testing clockspeeds again. System health now:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
13:03:29: 2400/2016MHz  5.86  97%   0%  96%   0%   0%   0%  48.1°C

Checking cpufreq OPP for cpu0-cpu1 (Cortex-A53):

Cpufreq OPP: 2016    Measured: 2015 (2013.982/2013.982/2012.852)
Cpufreq OPP: 1908    Measured: 1905 (1904.550/1905.427/1906.507)
Cpufreq OPP: 1800    Measured: 1415 (1410.254/1790.725/1787.275)
Cpufreq OPP: 1704    Measured: 1695 (1693.515/1695.935/1695.632)
Cpufreq OPP: 1608    Measured: 1600 (1599.710/1597.494/1597.988)
Cpufreq OPP: 1512    Measured: 1490 (1488.583/1307.565/1491.661)
Cpufreq OPP: 1398    Measured: 1390 (1389.152/1388.494/1388.868)
Cpufreq OPP: 1200    Measured: 1200 (1196.232/1193.909/1194.130)
Cpufreq OPP: 1000    Measured:  685 (683.766/992.256/995.138)
Cpufreq OPP:  667    Measured:  665 (663.829/664.529/664.603)
Cpufreq OPP:  500    Measured:  500 (495.277/496.830/497.122)
Cpufreq OPP:  250    Measured:  250 (248.001/255.772/247.910)
Cpufreq OPP:  100    Measured:  100 (98.029/98.272/97.950)

Checking cpufreq OPP for cpu2-cpu5 (Cortex-A73):

Cpufreq OPP: 2400    Measured: 2400 (2396.465/1525.574/2796.867)
Cpufreq OPP: 2304    Measured: 1380 (1378.545/2301.440/2302.209)
Cpufreq OPP: 2208    Measured: 3250 (3245.078/2201.215/2204.385)
Cpufreq OPP: 2108    Measured: 2100 (2097.374/1864.742/1623.026)
Cpufreq OPP: 2016    Measured: 2015 (2012.977/1388.657/2013.455)
Cpufreq OPP: 1908    Measured: 1910 (1905.412/1906.291/1906.566)
Cpufreq OPP: 1800    Measured: 1355 (1354.129/1798.042/1795.503)
Cpufreq OPP: 1704    Measured: 1705 (1700.831/1701.351/1701.154)
Cpufreq OPP: 1608    Measured: 1610 (1605.598/1606.357/1606.677)
Cpufreq OPP: 1512    Measured: 1500 (1498.220/1499.142/1498.933)
Cpufreq OPP: 1398    Measured: 1400 (1396.951/1397.254/1396.241)
Cpufreq OPP: 1200    Measured: 1200 (1198.786/1199.496/1199.148)
Cpufreq OPP: 1000    Measured: 1000 (998.989/999.122/998.977)
Cpufreq OPP:  667    Measured:  670 (665.164/665.097/665.492)
Cpufreq OPP:  500    Measured:  500 (498.228/498.245/418.183)
Cpufreq OPP:  250    Measured:  250 (248.722/248.813/248.610)
Cpufreq OPP:  100    Measured:  100 (98.935/98.893/98.756)

##########################################################################

Thermal source: /sys/class/hwmon/hwmon0/ (cpu_thermal)

System health while running tinymembench:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
12:45:33: 2400/2016MHz  0.57   7%   1%   5%   0%   0%   0%  28.2°C
12:46:53: 2400/2016MHz  0.96  16%   0%  16%   0%   0%   0%  28.6°C
12:48:13: 2400/2016MHz  0.99  16%   0%  16%   0%   0%   0%  27.8°C
12:49:33: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  28.1°C
12:50:53: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  28.3°C
12:52:13: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  31.7°C
12:53:33: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.9°C
12:54:53: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  30.2°C

System health while running OpenSSL benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
12:55:52: 2400/2016MHz  1.00  13%   0%  12%   0%   0%   0%  31.3°C
12:56:08: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.5°C
12:56:24: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  31.7°C
12:56:40: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.7°C
12:56:56: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  32.4°C
12:57:12: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.9°C
12:57:28: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  32.6°C

System health while running 7-zip single core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
12:57:40: 2400/2016MHz  1.00  13%   0%  13%   0%   0%   0%  33.3°C
12:57:47: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  30.0°C
12:57:54: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.9°C
12:58:01: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.9°C
12:58:08: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.9°C
12:58:16: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.8°C
12:58:23: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.9°C
12:58:30: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  30.0°C
12:58:37: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.8°C
12:58:44: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  30.0°C
12:58:51: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  30.0°C
12:58:58: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.9°C
12:59:05: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.9°C
12:59:12: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29.9°C
12:59:19: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  30.4°C
12:59:26: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  31.7°C
12:59:33: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  31.9°C
12:59:40: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  32.0°C
12:59:47: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  31.9°C
12:59:54: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  32.0°C
13:00:01: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  32.0°C
13:00:08: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  32.0°C
13:00:15: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  32.1°C

System health while running 7-zip multi core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
13:00:20: 2400/2016MHz  1.00  14%   0%  13%   0%   0%   0%  33.5°C
13:00:32: 2400/2016MHz  1.92  93%   0%  92%   0%   0%   0%  45.7°C
13:00:44: 2400/2016MHz  2.55  86%   0%  85%   0%   0%   0%  45.9°C
13:00:57: 2400/2016MHz  2.79  83%   0%  82%   0%   0%   0%  45.2°C
13:01:08: 2400/2016MHz  3.27  81%   0%  80%   0%   0%   0%  42.2°C
13:01:22: 2400/2016MHz  3.85  97%   1%  96%   0%   0%   0%  46.4°C
13:01:35: 2400/2016MHz  4.39  89%   0%  88%   0%   0%   0%  46.7°C
13:01:48: 2400/2016MHz  4.82  88%   0%  87%   0%   0%   0%  47.1°C
13:02:01: 2400/2016MHz  4.87  83%   0%  82%   0%   0%   0%  46.8°C
13:02:12: 2400/2016MHz  5.05  81%   0%  80%   0%   0%   0%  43.3°C
13:02:25: 2400/2016MHz  5.51  98%   1%  96%   0%   0%   0%  47.4°C
13:02:39: 2400/2016MHz  5.76  89%   0%  88%   0%   0%   0%  47.8°C
13:02:52: 2400/2016MHz  5.50  88%   0%  87%   0%   0%   0%  48.1°C
13:03:05: 2400/2016MHz  5.76  83%   0%  82%   0%   0%   0%  47.6°C
13:03:16: 2400/2016MHz  5.66  81%   1%  80%   0%   0%   0%  44.3°C
13:03:29: 2400/2016MHz  5.86  97%   0%  96%   0%   0%   0%  48.1°C

##########################################################################

Linux 5.10.60-meson64 (odroidn2) 	01/25/22 	_aarch64_	(6 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          24.33    0.01    0.61    0.16    0.00   74.89

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk1           8.53       245.93       647.69         0.00     350601     923356          0
zram0             0.39         1.57         0.00         0.00       2240          4          0
zram1             0.16         0.33         1.41         0.00        464       2004          0

              total        used        free      shared  buff/cache   available
Mem:          1.8Gi       297Mi       1.4Gi       3.0Mi       135Mi       1.5Gi
Swap:         927Mi          0B       927Mi

Filename				Type		Size	Used	Priority
/dev/zram0                             	partition	950064	0	5

CPU sysfs topology (clusters, cpufreq members, clockspeeds)
                 cpufreq   min    max
 CPU    cluster  policy   speed  speed   core type
  0        0        0     1000    2016   Cortex-A53 / r0p4
  1        0        0     1000    2016   Cortex-A53 / r0p4
  2        1        2     1000    2400   Cortex-A73 / r0p2
  3        1        2     1000    2400   Cortex-A73 / r0p2
  4        1        2     1000    2400   Cortex-A73 / r0p2
  5        1        2     1000    2400   Cortex-A73 / r0p2

Architecture:                    aarch64
CPU op-mode(s):                  32-bit, 64-bit
Byte Order:                      Little Endian
CPU(s):                          6
On-line CPU(s) list:             0-5
Thread(s) per core:              1
Core(s) per socket:              3
Socket(s):                       2
NUMA node(s):                    1
Vendor ID:                       ARM
Model:                           4
Model name:                      Cortex-A53
Stepping:                        r0p4
CPU max MHz:                     2400.0000
CPU min MHz:                     100.0000
BogoMIPS:                        48.00
NUMA node0 CPU(s):               0-5
Vulnerability Itlb multihit:     Not affected
Vulnerability L1tf:              Not affected
Vulnerability Mds:               Not affected
Vulnerability Meltdown:          Not affected
Vulnerability Spec store bypass: Vulnerable
Vulnerability Spectre v1:        Mitigation; __user pointer sanitization
Vulnerability Spectre v2:        Vulnerable
Vulnerability Srbds:             Not affected
Vulnerability Tsx async abort:   Not affected
Flags:                           fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid

SoC guess: Amlogic S922X
 Compiler: /usr/bin/gcc (Ubuntu 9.3.0-17ubuntu1~20.04/aarch64-linux-gnu)
 Userland: arm64
   Kernel: 5.10.60-meson64/aarch64
           CONFIG_HZ=250
           CONFIG_HZ_250=y
           CONFIG_PREEMPTION=y
           CONFIG_PREEMPT=y
           CONFIG_PREEMPT_COUNT=y
           CONFIG_PREEMPT_NOTIFIERS=y
           CONFIG_PREEMPT_RCU=y


| Hardkernel ODROID-N2Plus | 2400/2016 MHz | 5.10 | Focal arm64 | 9720 | 287820 | 1154280 | 4090 | 7170 | - |