sbc-bench v0.9.2 LeMaker Banana Pi (Wed, 26 Jan 2022 12:31:47 +0100)

Distributor ID:	Debian
Description:	Debian GNU/Linux 11 (bullseye)
Release:	11
Codename:	bullseye

Armbian release info:
BOARD=bananapi
BOARD_NAME="Banana Pi"
BOARDFAMILY=sun7i
BUILD_REPOSITORY_URL=https://github.com/armbian/build
BUILD_REPOSITORY_COMMIT=d7794cc7b-dirty
VERSION=21.08.8
LINUXFAMILY=sunxi
ARCH=arm
IMAGE_TYPE=user-built
BOARD_TYPE=conf
INITRD_ARCH=arm
KERNEL_IMAGE_TYPE=Image
BRANCH=current

/usr/bin/gcc (Debian 10.2.1-6) 10.2.1 20210110

Uptime: 12:31:48 up 51 min,  1 user,  load average: 0.84, 0.59, 0.56

Linux 5.10.60-sunxi (bananapi) 	01/26/22 	_armv7l_	(2 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           8.05    0.02   10.89    0.62    0.00   80.42

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk0           9.66       160.32       252.74         0.00     498713     786208          0
sda               4.26      1682.53         0.12         0.00    5233908        372          0
zram0             0.25         0.72         0.28         0.00       2244        868          0
zram1             0.20         0.18         9.83         0.00        548      30580          0

               total        used        free      shared  buff/cache   available
Mem:           985Mi       112Mi       758Mi        17Mi       114Mi       831Mi
Swap:          492Mi       1.0Mi       491Mi

Filename				Type		Size	Used	Priority
/dev/zram0                             	partition	504320	1280	5

##########################################################################

Checking cpufreq OPP (Cortex-A7):

Cpufreq OPP:  960    Measured:  960 (956.808/955.260/958.017)
Cpufreq OPP:  912    Measured:  910 (908.118/910.349/910.319)
Cpufreq OPP:  864    Measured:  865 (861.801/862.313/861.145)
Cpufreq OPP:  720    Measured:  720 (717.219/717.313/709.789)
Cpufreq OPP:  528    Measured:  530 (525.849/526.976/525.151)
Cpufreq OPP:  312    Measured:  310 (309.887/310.527/309.958)
Cpufreq OPP:  144    Measured:  145 (141.394/141.387/141.831)

##########################################################################

Hardware sensors:

axp20x_usb-isa-0000
in0:           0.00 V  (min =  +4.00 V)
curr1:         0.00 A  (max =  +0.00 A)

/dev/sda:	29Â°C

##########################################################################

Executing benchmark on cpu0 (Cortex-A7):

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :    203.0 MB/s (1.7%)
 C copy backwards (32 byte blocks)                    :    522.8 MB/s (0.5%)
 C copy backwards (64 byte blocks)                    :    530.3 MB/s (0.6%)
 C copy                                               :    520.0 MB/s (0.2%)
 C copy prefetched (32 bytes step)                    :    599.7 MB/s (1.2%)
 C copy prefetched (64 bytes step)                    :    621.2 MB/s (0.3%)
 C 2-pass copy                                        :    544.5 MB/s (2.0%)
 C 2-pass copy prefetched (32 bytes step)             :    571.8 MB/s
 C 2-pass copy prefetched (64 bytes step)             :    599.4 MB/s (0.2%)
 C fill                                               :   1476.1 MB/s (1.7%)
 C fill (shuffle within 16 byte blocks)               :   1475.3 MB/s (0.2%)
 C fill (shuffle within 32 byte blocks)               :    277.1 MB/s (1.0%)
 C fill (shuffle within 64 byte blocks)               :    281.1 MB/s
 ---
 standard memcpy                                      :    373.5 MB/s
 standard memset                                      :   1476.0 MB/s (0.5%)
 ---
 NEON read                                            :    950.3 MB/s (2.4%)
 NEON read prefetched (32 bytes step)                 :   1080.9 MB/s (2.4%)
 NEON read prefetched (64 bytes step)                 :   1080.0 MB/s (0.2%)
 NEON read 2 data streams                             :    291.1 MB/s (0.1%)
 NEON read 2 data streams prefetched (32 bytes step)  :    548.3 MB/s (0.1%)
 NEON read 2 data streams prefetched (64 bytes step)  :    570.1 MB/s (0.4%)
 NEON copy                                            :    524.4 MB/s (0.3%)
 NEON copy prefetched (32 bytes step)                 :    601.5 MB/s (9.6%)
 NEON copy prefetched (64 bytes step)                 :    619.7 MB/s (0.6%)
 NEON unrolled copy                                   :    582.7 MB/s (1.4%)
 NEON unrolled copy prefetched (32 bytes step)        :    590.2 MB/s (0.4%)
 NEON unrolled copy prefetched (64 bytes step)        :    609.1 MB/s (0.2%)
 NEON copy backwards                                  :    522.7 MB/s (0.2%)
 NEON copy backwards prefetched (32 bytes step)       :    591.4 MB/s (4.0%)
 NEON copy backwards prefetched (64 bytes step)       :    617.8 MB/s
 NEON 2-pass copy                                     :    557.0 MB/s (0.3%)
 NEON 2-pass copy prefetched (32 bytes step)          :    591.1 MB/s (0.6%)
 NEON 2-pass copy prefetched (64 bytes step)          :    607.6 MB/s (0.5%)
 NEON unrolled 2-pass copy                            :    515.0 MB/s (0.9%)
 NEON unrolled 2-pass copy prefetched (32 bytes step) :    493.9 MB/s
 NEON unrolled 2-pass copy prefetched (64 bytes step) :    524.4 MB/s (0.1%)
 NEON fill                                            :   1476.1 MB/s (2.5%)
 NEON fill backwards                                  :   1506.9 MB/s (0.2%)
 VFP copy                                             :    587.1 MB/s (0.2%)
 VFP 2-pass copy                                      :    519.4 MB/s (0.8%)
 ARM fill (STRD)                                      :   1476.9 MB/s (0.6%)
 ARM fill (STM with 8 registers)                      :   1476.3 MB/s (0.6%)
 ARM fill (STM with 4 registers)                      :   1475.3 MB/s
 ARM copy prefetched (incr pld)                       :    599.6 MB/s (0.5%)
 ARM copy prefetched (wrap pld)                       :    540.1 MB/s (3.1%)
 ARM 2-pass copy prefetched (incr pld)                :    578.4 MB/s (0.2%)
 ARM 2-pass copy prefetched (wrap pld)                :    553.6 MB/s (0.2%)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON read (from framebuffer)                         :     42.5 MB/s
 NEON copy (from framebuffer)                         :     41.1 MB/s
 NEON 2-pass copy (from framebuffer)                  :     41.0 MB/s
 NEON unrolled copy (from framebuffer)                :     40.4 MB/s
 NEON 2-pass unrolled copy (from framebuffer)         :     40.7 MB/s
 VFP copy (from framebuffer)                          :    212.6 MB/s
 VFP 2-pass copy (from framebuffer)                   :    233.2 MB/s
 ARM copy (from framebuffer)                          :    147.0 MB/s (1.3%)
 ARM 2-pass copy (from framebuffer)                   :    141.0 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.1 ns 
     65536 :    6.6 ns          /    11.3 ns 
    131072 :   10.2 ns          /    15.9 ns 
    262144 :   15.7 ns          /    23.4 ns 
    524288 :  123.5 ns          /   195.3 ns 
   1048576 :  183.6 ns          /   257.4 ns 
   2097152 :  220.7 ns          /   287.0 ns 
   4194304 :  240.1 ns          /   300.2 ns 
   8388608 :  252.2 ns          /   310.2 ns 
  16777216 :  264.8 ns          /   326.2 ns 
  33554432 :  285.4 ns          /   362.4 ns 
  67108864 :  320.8 ns          /   431.8 ns 

##########################################################################

Executing benchmark twice on cluster 0 (Cortex-A7)

OpenSSL 1.1.1k, built on 25 Mar 2021
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes
aes-128-cbc      15226.55k    21484.65k    23966.72k    24659.29k    24745.30k    24778.07k
aes-128-cbc      15391.65k    21406.78k    23856.90k    24627.20k    24758.95k    24865.45k
aes-192-cbc      13824.84k    18661.06k    20510.89k    21028.52k    21001.56k    21179.05k
aes-192-cbc      13832.53k    18602.26k    20515.50k    20949.33k    21105.32k    21189.97k
aes-256-cbc      12699.69k    16685.42k    18135.81k    18465.11k    18582.19k    18593.93k
aes-256-cbc      12710.54k    16677.82k    18063.79k    18531.33k    18655.91k    18655.91k

##########################################################################

Executing benchmark single-threaded on cpu0 (Cortex-A7)

7-Zip (a) [32] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,32 bits,2 CPUs LE)

LE
CPU Freq: 32000000 21333333 32000000 32000000 64000000 256000000 - - 2048000000

RAM size:     985 MB,  # CPU hardware threads:   2
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:        429   100    418    418  |       8945   100    764    764
23:        400   100    409    408  |       8754   100    759    758
24:        381   100    412    411  |       8567   100    754    752
25:        369   100    423    422  |       8394   100    748    747
----------------------------------  | ------------------------------
Avr:             100    415    415  |              100    756    755
Tot:             100    586    585

##########################################################################

Executing benchmark 3 times multi-threaded

7-Zip (a) [32] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,32 bits,2 CPUs LE)

LE
CPU Freq: 64000000 32000000 32000000 64000000 128000000 - - - -

RAM size:     985 MB,  # CPU hardware threads:   2
RAM usage:    441 MB,  # Benchmark threads:      2

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:        630   157    389    613  |      16530   188    752   1411
23:        616   163    385    628  |      16192   188    747   1402
24:        596   165    389    641  |      15548   184    741   1365
25:        591   168    401    675  |      15573   189    734   1386
----------------------------------  | ------------------------------
Avr:             163    391    639  |              187    743   1391
Tot:             175    567   1015

7-Zip (a) [32] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,32 bits,2 CPUs LE)

LE
CPU Freq: 32000000 64000000 64000000 64000000 128000000 256000000 512000000 1024000000 1024000000

RAM size:     985 MB,  # CPU hardware threads:   2
RAM usage:    441 MB,  # Benchmark threads:      2

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:        631   158    388    614  |      16702   190    750   1426
23:        609   161    385    621  |      16222   188    746   1404
24:        600   165    392    646  |      15971   189    741   1402
25:        595   169    402    680  |      15354   187    730   1367
----------------------------------  | ------------------------------
Avr:             163    392    640  |              189    742   1400
Tot:             176    567   1020

7-Zip (a) [32] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,32 bits,2 CPUs LE)

LE
CPU Freq: 32000000 - 64000000 64000000 128000000 256000000 512000000 1024000000 2048000000

RAM size:     985 MB,  # CPU hardware threads:   2
RAM usage:    441 MB,  # Benchmark threads:      2

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:        633   158    390    616  |      16764   190    753   1431
23:        607   161    384    619  |      16335   189    748   1414
24:        609   167    393    655  |      15804   187    742   1387
25:        598   170    403    683  |      15519   188    734   1381
----------------------------------  | ------------------------------
Avr:             164    392    643  |              189    744   1404
Tot:             176    568   1023

Compression: 639,640,643
Decompression: 1391,1400,1404
Total: 1015,1020,1023

##########################################################################

Testing clockspeeds again. System health now:

Time        CPU    load %cpu %sys %usr %nice %io %irq   Temp
13:03:36:  960MHz  2.07  98%   6%  91%   0%   0%   0%  42.8Â°C

Checking cpufreq OPP (Cortex-A7):

Cpufreq OPP:  960    Measured:  960 (957.174/957.196/957.473)
Cpufreq OPP:  912    Measured:  910 (908.088/902.890/909.938)
Cpufreq OPP:  864    Measured:  865 (862.071/860.267/861.855)
Cpufreq OPP:  720    Measured:  720 (717.126/717.430/716.869)
Cpufreq OPP:  528    Measured:  530 (525.412/525.542/410.467)
Cpufreq OPP:  312    Measured:  310 (309.625/310.047/308.897)
Cpufreq OPP:  144    Measured:  145 (141.812/140.974/130.304)

##########################################################################

Hardware sensors:

axp20x_usb-isa-0000
in0:           0.00 V  (min =  +4.00 V)
curr1:         0.00 A  (max =  +0.00 A)

/dev/sda:	29Â°C

##########################################################################

Thermal source: /sys/devices/virtual/thermal/thermal_zone0/ (cpu_thermal)

System health while running tinymembench:

Time        CPU    load %cpu %sys %usr %nice %io %irq   Temp
12:31:56:  960MHz  0.86  19%  10%   8%   0%   0%   0%  36.6Â°C
12:32:36:  960MHz  0.98  57%   5%  50%   0%   1%   0%  37.8Â°C
12:33:17:  960MHz  1.21  56%   5%  50%   0%   0%   0%  39.5Â°C
12:33:58:  960MHz  1.11  55%   5%  50%   0%   0%   0%  38.9Â°C
12:34:38:  960MHz  1.31  55%   5%  50%   0%   0%   0%  38.3Â°C
12:35:19:  960MHz  1.16  56%   5%  50%   0%   0%   0%  38.6Â°C
12:35:59:  960MHz  1.22  55%   5%  50%   0%   0%   0%  39.3Â°C
12:36:39:  960MHz  1.11  56%   5%  50%   0%   0%   0%  39.7Â°C
12:37:20:  960MHz  1.33  56%   5%  50%   0%   0%   0%  39.6Â°C
12:38:01:  960MHz  1.52  56%   5%  50%   0%   0%   0%  39.8Â°C
12:38:41:  960MHz  1.43  55%   4%  50%   0%   0%   0%  39.0Â°C
12:39:21:  960MHz  1.32  55%   5%  50%   0%   0%   0%  38.7Â°C
12:40:02:  960MHz  1.48  56%   5%  50%   0%   0%   0%  39.2Â°C
12:40:42:  960MHz  1.25  55%   4%  50%   0%   0%   0%  38.6Â°C
12:41:23:  960MHz  1.18  55%   5%  50%   0%   0%   0%  38.8Â°C
12:42:03:  960MHz  1.30  55%   5%  50%   0%   0%   0%  38.1Â°C
12:42:44:  960MHz  1.16  55%   4%  50%   0%   0%   0%  38.6Â°C
12:43:24:  960MHz  1.33  55%   4%  50%   0%   0%   0%  38.4Â°C
12:44:04:  960MHz  1.17  55%   4%  50%   0%   0%   0%  38.2Â°C
12:44:45:  960MHz  1.27  55%   4%  50%   0%   0%   0%  38.4Â°C
12:45:25:  960MHz  1.19  55%   5%  50%   0%   0%   0%  38.3Â°C
12:46:06:  960MHz  1.42  55%   4%  50%   0%   0%   0%  38.1Â°C

System health while running OpenSSL benchmark:

Time        CPU    load %cpu %sys %usr %nice %io %irq   Temp
12:46:34:  960MHz  1.33  27%   9%  17%   0%   0%   0%  38.6Â°C
12:46:51:  960MHz  1.26  55%   4%  50%   0%   0%   0%  38.6Â°C
12:47:07:  960MHz  1.31  56%   5%  50%   0%   0%   0%  39.2Â°C
12:47:23:  960MHz  1.24  55%   5%  50%   0%   0%   0%  39.1Â°C
12:47:40:  960MHz  1.19  55%   5%  50%   0%   0%   0%  38.8Â°C
12:47:56:  960MHz  1.20  55%   4%  50%   0%   0%   0%  39.4Â°C
12:48:13:  960MHz  1.35  56%   5%  50%   0%   0%   0%  39.4Â°C

System health while running 7-zip single core benchmark:

Time        CPU    load %cpu %sys %usr %nice %io %irq   Temp
12:48:23:  960MHz  1.30  28%   8%  18%   0%   0%   0%  39.4Â°C
12:48:38:  960MHz  1.23  55%   6%  49%   0%   0%   0%  39.2Â°C
12:48:53:  960MHz  1.18  55%   5%  50%   0%   0%   0%  39.2Â°C
12:49:09:  960MHz  1.14  56%   5%  50%   0%   0%   0%  39.2Â°C
12:49:24:  960MHz  1.27  55%   5%  49%   0%   0%   0%  39.1Â°C
12:49:39:  960MHz  1.21  55%   6%  48%   0%   0%   0%  39.3Â°C
12:49:54:  960MHz  1.16  55%   5%  50%   0%   0%   0%  39.6Â°C
12:50:10:  960MHz  1.12  57%   7%  49%   0%   0%   0%  39.3Â°C
12:50:25:  960MHz  1.10  58%   9%  48%   0%   0%   0%  39.4Â°C
12:50:40:  960MHz  1.23  55%   6%  49%   0%   0%   0%  39.2Â°C
12:50:56:  960MHz  1.18  55%   6%  49%   0%   0%   0%  39.1Â°C
12:51:11:  960MHz  1.29  56%   7%  49%   0%   0%   0%  39.2Â°C
12:51:26:  960MHz  1.27  56%   7%  48%   0%   0%   0%  39.7Â°C
12:51:41:  960MHz  1.37  55%   6%  49%   0%   0%   0%  39.5Â°C
12:51:57:  960MHz  1.29  55%   6%  49%   0%   0%   0%  39.3Â°C
12:52:12:  960MHz  1.22  56%   6%  49%   0%   0%   0%  39.0Â°C
12:52:27:  960MHz  1.17  55%   6%  49%   0%   0%   0%  39.2Â°C
12:52:42:  960MHz  1.13  55%   6%  48%   0%   0%   0%  39.5Â°C

System health while running 7-zip multi core benchmark:

Time        CPU    load %cpu %sys %usr %nice %io %irq   Temp
12:52:56:  960MHz  1.26  30%   8%  20%   0%   0%   0%  39.9Â°C
12:53:27:  960MHz  1.79  90%   6%  84%   0%   0%   0%  41.5Â°C
12:54:01:  960MHz  1.88  93%   6%  87%   0%   0%   0%  41.2Â°C
12:54:31:  960MHz  2.05  92%   6%  86%   0%   0%   0%  41.2Â°C
12:55:01:  960MHz  2.14  94%   6%  88%   0%   0%   0%  42.1Â°C
12:55:32:  960MHz  2.10  86%   7%  79%   0%   0%   0%  41.7Â°C
12:56:03:  960MHz  2.23  93%   7%  85%   0%   0%   0%  42.0Â°C
12:56:33:  960MHz  2.01  91%   6%  84%   0%   0%   0%  41.4Â°C
12:57:10:  960MHz  1.96  91%   5%  86%   0%   0%   0%  42.2Â°C
12:57:43:  960MHz  2.09  93%   6%  86%   0%   0%   0%  42.4Â°C
12:58:14:  960MHz  2.18  91%   6%  84%   0%   0%   0%  42.1Â°C
12:58:45:  960MHz  2.16  96%   5%  90%   0%   0%   0%  42.5Â°C
12:59:16:  960MHz  1.91  85%   8%  77%   0%   0%   0%  41.9Â°C
12:59:55:  960MHz  2.08  96%   6%  89%   0%   0%   0%  42.6Â°C
13:00:25:  960MHz  2.05  84%   6%  77%   0%   0%   0%  42.3Â°C
13:00:56:  960MHz  1.98  96%   5%  90%   0%   0%   0%  42.2Â°C
13:01:28:  960MHz  1.99  97%   5%  91%   0%   0%   0%  43.0Â°C
13:02:02:  960MHz  1.72  89%   7%  81%   0%   0%   0%  42.4Â°C
13:02:33:  960MHz  1.95  90%   6%  84%   0%   0%   0%  42.1Â°C
13:03:03:  960MHz  2.04  90%   7%  83%   0%   0%   0%  42.5Â°C
13:03:36:  960MHz  2.07  98%   6%  91%   0%   0%   0%  42.8Â°C

##########################################################################

Linux 5.10.60-sunxi (bananapi) 	01/26/22 	_armv7l_	(2 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          28.76    0.03    8.98    0.40    0.00   61.83

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk0           6.22       103.69       163.76         0.00     521225     823200          0
sda               2.64      1041.20         0.07         0.00    5233917        372          0
zram0             0.15         0.45         0.17         0.00       2248        868          0
zram1             0.14         0.12         6.13         0.00        608      30804          0

               total        used        free      shared  buff/cache   available
Mem:           985Mi       125Mi       770Mi        17Mi        88Mi       813Mi
Swap:          492Mi       1.0Mi       491Mi

Filename				Type		Size	Used	Priority
/dev/zram0                             	partition	504320	1280	5

CPU sysfs topology (clusters, cpufreq members, clockspeeds)
                 cpufreq   min    max
 CPU    cluster  policy   speed  speed   core type
  0        0        0      480     960   Cortex-A7 / r0p4
  1        0        0      480     960   Cortex-A7 / r0p4

Architecture:        armv7l
Byte Order:          Little Endian
CPU(s):              2
On-line CPU(s) list: 0,1
Thread(s) per core:  1
Core(s) per socket:  2
Socket(s):           1
Vendor ID:           ARM
Model:               4
Model name:          Cortex-A7
Stepping:            r0p4
CPU max MHz:         960.0000
CPU min MHz:         144.0000
BogoMIPS:            50.52
Flags:               half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt vfpd32 lpae evtstrm

SoC guess: Allwinner A20
 Compiler: /usr/bin/gcc (Debian 10.2.1-6/arm-linux-gnueabihf)
 Userland: armhf
   Kernel: 5.10.60-sunxi/armv7l
           CONFIG_HZ=250
           CONFIG_HZ_250=y
           CONFIG_HZ_FIXED=0
           CONFIG_PREEMPT_NONE=y


| LeMaker Banana Pi | 960 MHz | 5.10 | Bullseye armhf | 1020 | 15310 | 18620 | 370 | 1480 | - |