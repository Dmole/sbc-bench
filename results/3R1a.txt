sbc-bench v0.9.3 Hardkernel ODROID-N2Plus (Mon, 28 Feb 2022 18:03:51 +0100)

Distributor ID:	Ubuntu
Description:	Ubuntu 20.04.4 LTS
Release:	20.04
Codename:	focal

Armbian release info:
BOARD=odroidn2
BOARD_NAME="Odroid N2"
BOARDFAMILY=meson-g12b
BUILD_REPOSITORY_URL=https://github.com/armbian/build
BUILD_REPOSITORY_COMMIT=d7794cc7b-dirty
VERSION=21.08.8
LINUXFAMILY=meson64
ARCH=arm64
IMAGE_TYPE=user-built
BOARD_TYPE=conf
INITRD_ARCH=arm64
KERNEL_IMAGE_TYPE=Image
BRANCH=current

/usr/bin/gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0

Uptime: 18:03:51 up 5 min,  2 users,  load average: 0,48, 0,20, 0,07

Linux 5.10.81-meson64 (nas003) 	28.02.2022 	_aarch64_	(6 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           2,45    0,00    1,80    0,11    0,00   95,63

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk1          26,63      1268,39       351,18         0,00     431405     119444          0
mmcblk1boot0      0,17         0,68         0,00         0,00        232          0          0
mmcblk1boot1      0,17         0,68         0,00         0,00        232          0          0
zram0             1,67         6,68         0,01         0,00       2272          4          0
zram1             0,62         1,33         5,30         0,00        452       1804          0

              total        used        free      shared  buff/cache   available
Mem:          3,7Gi       164Mi       3,4Gi        10Mi       191Mi       3,5Gi
Swap:         1,9Gi          0B       1,9Gi

Filename				Type		Size	Used	Priority
/dev/zram0                             	partition	1953764	0	5

##########################################################################

Checking cpufreq OPP for cpu0-cpu1 (Cortex-A53):

Cpufreq OPP: 2016    Measured: 2015 (2011.773/2013.781/2011.673)
Cpufreq OPP: 1908    Measured: 1910 (1905.539/1901.790/1905.697)
Cpufreq OPP: 1800    Measured: 1800 (1797.485/1797.505/1795.886)
Cpufreq OPP: 1704    Measured: 1705 (1701.782/1701.046/1701.800)
Cpufreq OPP: 1608    Measured: 1610 (1605.738/1605.778/1605.857)
Cpufreq OPP: 1512    Measured: 1500 (1497.768/1497.664/1496.102)
Cpufreq OPP: 1398    Measured: 1395 (1393.289/1395.698/1394.447)
Cpufreq OPP: 1200    Measured: 1200 (1198.425/1198.758/1195.415)
Cpufreq OPP: 1000    Measured: 1000 (997.880/997.735/997.675)
Cpufreq OPP:  667    Measured:  665 (664.322/663.562/664.442)
Cpufreq OPP:  500    Measured:  500 (497.771/498.281/498.457)
Cpufreq OPP:  250    Measured:  250 (247.840/247.040/247.902)
Cpufreq OPP:  100    Measured:  100 (98.053/97.918/98.210)

Checking cpufreq OPP for cpu2-cpu5 (Cortex-A73):

Cpufreq OPP: 2400    Measured: 2400 (2398.488/2398.859/2398.602)
Cpufreq OPP: 2304    Measured: 2305 (2303.049/2302.339/2302.760)
Cpufreq OPP: 2208    Measured: 2210 (2206.654/2206.751/2206.147)
Cpufreq OPP: 2108    Measured: 2100 (2098.661/2099.054/2098.705)
Cpufreq OPP: 2016    Measured: 2015 (2014.535/2014.736/2014.636)
Cpufreq OPP: 1908    Measured: 1910 (1906.710/1906.800/1906.304)
Cpufreq OPP: 1800    Measured: 1800 (1798.767/1798.767/1798.868)
Cpufreq OPP: 1704    Measured: 1705 (1702.536/1702.931/1702.697)
Cpufreq OPP: 1608    Measured: 1610 (1606.517/1606.797/1606.817)
Cpufreq OPP: 1512    Measured: 1500 (1498.864/1499.194/1498.864)
Cpufreq OPP: 1398    Measured: 1400 (1396.770/1396.770/1396.921)
Cpufreq OPP: 1200    Measured: 1200 (1198.786/1198.995/1198.884)
Cpufreq OPP: 1000    Measured: 1000 (999.026/998.591/998.893)
Cpufreq OPP:  667    Measured:  670 (665.559/665.626/665.727)
Cpufreq OPP:  500    Measured:  500 (498.862/499.145/498.886)
Cpufreq OPP:  250    Measured:  250 (249.042/248.790/249.045)
Cpufreq OPP:  100    Measured:  100 (98.940/98.725/98.878)

##########################################################################

Executing benchmark on cpu0 (Cortex-A53):

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   2010.7 MB/s (2.0%)
 C copy backwards (32 byte blocks)                    :   2037.2 MB/s (1.1%)
 C copy backwards (64 byte blocks)                    :   2024.1 MB/s (1.0%)
 C copy                                               :   2106.9 MB/s (0.8%)
 C copy prefetched (32 bytes step)                    :   1594.6 MB/s (0.3%)
 C copy prefetched (64 bytes step)                    :   1830.6 MB/s
 C 2-pass copy                                        :   1853.2 MB/s
 C 2-pass copy prefetched (32 bytes step)             :   1343.0 MB/s
 C 2-pass copy prefetched (64 bytes step)             :   1156.3 MB/s
 C fill                                               :   7685.7 MB/s
 C fill (shuffle within 16 byte blocks)               :   7683.9 MB/s
 C fill (shuffle within 32 byte blocks)               :   7682.6 MB/s
 C fill (shuffle within 64 byte blocks)               :   7682.9 MB/s
 ---
 standard memcpy                                      :   2159.1 MB/s (0.6%)
 standard memset                                      :   7689.5 MB/s
 ---
 NEON LDP/STP copy                                    :   2185.8 MB/s (0.1%)
 NEON LDP/STP copy pldl2strm (32 bytes step)          :   1423.5 MB/s (1.0%)
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   1823.5 MB/s (0.3%)
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   2425.9 MB/s
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   2422.8 MB/s
 NEON LD1/ST1 copy                                    :   2151.0 MB/s (0.5%)
 NEON STP fill                                        :   7689.7 MB/s
 NEON STNP fill                                       :   6306.7 MB/s
 ARM LDP/STP copy                                     :   2179.9 MB/s
 ARM STP fill                                         :   7689.8 MB/s
 ARM STNP fill                                        :   6308.9 MB/s

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :    243.2 MB/s
 NEON LDP/STP 2-pass copy (from framebuffer)          :    262.0 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :     70.4 MB/s
 NEON LD1/ST1 2-pass copy (from framebuffer)          :     73.0 MB/s
 ARM LDP/STP copy (from framebuffer)                  :    135.1 MB/s
 ARM LDP/STP 2-pass copy (from framebuffer)           :    137.1 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    3.4 ns          /     5.7 ns 
    131072 :    5.2 ns          /     8.0 ns 
    262144 :    6.5 ns          /     9.5 ns 
    524288 :   60.6 ns          /    95.2 ns 
   1048576 :   92.9 ns          /   127.1 ns 
   2097152 :  109.1 ns          /   138.1 ns 
   4194304 :  122.3 ns          /   145.3 ns 
   8388608 :  129.4 ns          /   149.6 ns 
  16777216 :  133.9 ns          /   153.1 ns 
  33554432 :  137.0 ns          /   155.8 ns 
  67108864 :  155.9 ns          /   192.8 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    3.4 ns          /     5.7 ns 
    131072 :    5.2 ns          /     8.0 ns 
    262144 :    6.4 ns          /     9.4 ns 
    524288 :   61.3 ns          /    97.3 ns 
   1048576 :   94.4 ns          /   131.7 ns 
   2097152 :  108.8 ns          /   137.8 ns 
   4194304 :  116.8 ns          /   141.5 ns 
   8388608 :  120.9 ns          /   143.0 ns 
  16777216 :  123.0 ns          /   143.5 ns 
  33554432 :  124.1 ns          /   143.7 ns 
  67108864 :  124.5 ns          /   143.8 ns 

Executing benchmark on cpu2 (Cortex-A73):

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   3965.1 MB/s
 C copy backwards (32 byte blocks)                    :   3965.8 MB/s
 C copy backwards (64 byte blocks)                    :   3962.4 MB/s
 C copy                                               :   4027.9 MB/s
 C copy prefetched (32 bytes step)                    :   4012.5 MB/s
 C copy prefetched (64 bytes step)                    :   4024.4 MB/s
 C 2-pass copy                                        :   3153.4 MB/s
 C 2-pass copy prefetched (32 bytes step)             :   2917.1 MB/s
 C 2-pass copy prefetched (64 bytes step)             :   2978.8 MB/s
 C fill                                               :   7117.6 MB/s
 C fill (shuffle within 16 byte blocks)               :   7117.5 MB/s
 C fill (shuffle within 32 byte blocks)               :   7110.1 MB/s (0.5%)
 C fill (shuffle within 64 byte blocks)               :   7117.0 MB/s
 ---
 standard memcpy                                      :   4027.3 MB/s
 standard memset                                      :   7117.6 MB/s
 ---
 NEON LDP/STP copy                                    :   4036.0 MB/s
 NEON LDP/STP copy pldl2strm (32 bytes step)          :   4036.5 MB/s
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   4035.8 MB/s
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   3887.2 MB/s (0.2%)
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   4005.5 MB/s
 NEON LD1/ST1 copy                                    :   4036.1 MB/s
 NEON STP fill                                        :   7118.3 MB/s
 NEON STNP fill                                       :   7115.8 MB/s
 ARM LDP/STP copy                                     :   4035.6 MB/s
 ARM STP fill                                         :   7121.0 MB/s
 ARM STNP fill                                        :   7118.7 MB/s

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :    422.0 MB/s
 NEON LDP/STP 2-pass copy (from framebuffer)          :    433.8 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :    422.0 MB/s
 NEON LD1/ST1 2-pass copy (from framebuffer)          :    433.7 MB/s
 ARM LDP/STP copy (from framebuffer)                  :    421.4 MB/s
 ARM LDP/STP 2-pass copy (from framebuffer)           :    424.7 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    4.6 ns          /     7.7 ns 
    131072 :    6.9 ns          /    10.8 ns 
    262144 :    8.6 ns          /    12.1 ns 
    524288 :   10.0 ns          /    12.6 ns 
   1048576 :   20.8 ns          /    31.5 ns 
   2097152 :   72.0 ns          /   107.8 ns 
   4194304 :  102.4 ns          /   136.3 ns 
   8388608 :  120.8 ns          /   151.9 ns 
  16777216 :  130.6 ns          /   158.8 ns 
  33554432 :  136.6 ns          /   161.8 ns 
  67108864 :  140.2 ns          /   163.1 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    4.6 ns          /     7.7 ns 
    131072 :    6.9 ns          /    10.8 ns 
    262144 :    8.1 ns          /    12.1 ns 
    524288 :    8.7 ns          /    12.7 ns 
   1048576 :    9.4 ns          /    13.6 ns 
   2097152 :   70.6 ns          /   106.2 ns 
   4194304 :  100.5 ns          /   133.9 ns 
   8388608 :  114.9 ns          /   143.2 ns 
  16777216 :  121.7 ns          /   146.7 ns 
  33554432 :  125.1 ns          /   148.4 ns 
  67108864 :  127.2 ns          /   149.4 ns 

##########################################################################

Executing benchmark on each cluster individually

OpenSSL 1.1.1f, built on 31 Mar 2020
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes
aes-128-cbc     169534.71k   509311.32k  1001575.00k  1354197.67k  1505850.71k  1498076.50k
aes-128-cbc     381931.24k   973243.67k  1543013.55k  1798098.60k  1902840.49k  1910816.77k
aes-192-cbc     161882.62k   454322.01k   819502.17k  1045066.41k  1134458.20k  1126804.14k
aes-192-cbc     378103.22k   920964.33k  1314877.27k  1518417.92k  1588584.45k  1593748.14k
aes-256-cbc     157125.10k   419234.15k   710976.43k   874803.88k   937716.39k   940933.12k
aes-256-cbc     365493.89k   841974.93k  1184907.61k  1311380.48k  1362963.11k  1366731.43k

##########################################################################

Executing benchmark single-threaded on cpu0 (Cortex-A53)

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: 32000000 - - - 128000000 256000000 512000000 - -

RAM size:    3815 MB,  # CPU hardware threads:   6
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       1167    99   1144   1136  |      21755   100   1866   1857
23:       1155    99   1185   1177  |      21259   100   1849   1840
24:       1141    99   1236   1228  |      20823    99   1837   1828
25:       1131    99   1301   1292  |      20432   100   1828   1819
----------------------------------  | ------------------------------
Avr:              99   1217   1208  |              100   1845   1836
Tot:              99   1531   1522

Executing benchmark single-threaded on cpu2 (Cortex-A73)

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: - - - 64000000 - - - - 2048000000

RAM size:    3815 MB,  # CPU hardware threads:   6
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       2034   100   1984   1979  |      31480   100   2691   2688
23:       1997   100   2041   2035  |      30809   100   2670   2667
24:       1966   100   2120   2114  |      30161   100   2651   2648
25:       1946   100   2228   2222  |      29462   100   2625   2622
----------------------------------  | ------------------------------
Avr:             100   2093   2088  |              100   2659   2656
Tot:             100   2376   2372

##########################################################################

Executing benchmark 3 times multi-threaded

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: - - - - - 256000000 512000000 - -

RAM size:    3815 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       7455   563   1289   7253  |     140679   509   2356  11997
23:       7340   574   1304   7479  |     137548   510   2335  11902
24:       7104   567   1346   7639  |     133444   505   2321  11713
25:       7003   571   1400   7996  |     131183   507   2303  11675
----------------------------------  | ------------------------------
Avr:             569   1335   7592  |              508   2329  11822
Tot:             538   1832   9707

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: 64000000 - - 64000000 128000000 256000000 - 1024000000 2048000000

RAM size:    3815 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       7538   566   1297   7334  |     139759   506   2357  11919
23:       7175   563   1300   7311  |     136562   506   2337  11817
24:       7103   568   1344   7638  |     133783   507   2318  11742
25:       6977   567   1406   7966  |     131124   506   2304  11669
----------------------------------  | ------------------------------
Avr:             566   1337   7562  |              506   2329  11787
Tot:             536   1833   9675

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: 64000000 64000000 - - - 256000000 - - -

RAM size:    3815 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       7385   564   1273   7185  |     139911   505   2361  11932
23:       7030   561   1276   7163  |     137013   506   2342  11856
24:       6894   565   1312   7413  |     134478   508   2321  11803
25:       7045   572   1407   8044  |     131977   510   2304  11745
----------------------------------  | ------------------------------
Avr:             566   1317   7451  |              507   2332  11834
Tot:             537   1825   9643

Compression: 7592,7562,7451
Decompression: 11822,11787,11834
Total: 9707,9675,9643

##########################################################################

Testing clockspeeds again. System health now:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
18:22:58: 2400/2016MHz  5.88  98%   1%  96%   0%   0%   0%  35,6°C

Checking cpufreq OPP for cpu0-cpu1 (Cortex-A53):

Cpufreq OPP: 2016    Measured: 2360 (2355.706/1688.289/2001.669)
Cpufreq OPP: 1908    Measured: 1885 (1882.252/1876.387/1898.479)
Cpufreq OPP: 1800    Measured: 1795 (1792.615/1787.334/1876.584)
Cpufreq OPP: 1704    Measured: 1420 (1415.535/1788.206/1444.080)
Cpufreq OPP: 1608    Measured: 1600 (1599.512/1599.175/1601.019)
Cpufreq OPP: 1512    Measured: 1490 (1487.588/1490.456/1482.005)
Cpufreq OPP: 1398    Measured: 1390 (1387.868/1387.659/1389.167)
Cpufreq OPP: 1200    Measured: 1200 (1196.038/1195.374/1195.913)
Cpufreq OPP: 1000    Measured: 1000 (1000.247/997.097/996.664)
Cpufreq OPP:  667    Measured:  665 (664.122/663.562/663.989)
Cpufreq OPP:  500    Measured:  500 (497.291/495.933/497.525)
Cpufreq OPP:  250    Measured:  250 (247.455/247.840/247.789)
Cpufreq OPP:  100    Measured:  100 (98.042/98.557/94.492)

Checking cpufreq OPP for cpu2-cpu5 (Cortex-A73):

Cpufreq OPP: 2400    Measured: 2395 (2394.474/2794.001/2094.826)
Cpufreq OPP: 2304    Measured: 1880 (1877.852/2298.815/2296.515)
Cpufreq OPP: 2208    Measured: 2205 (2204.942/1948.349/1486.176)
Cpufreq OPP: 2108    Measured: 2095 (2093.060/2093.485/1672.788)
Cpufreq OPP: 2016    Measured: 2010 (2010.220/2013.003/2012.902)
Cpufreq OPP: 1908    Measured: 1905 (1903.966/1904.550/1904.707)
Cpufreq OPP: 1800    Measured: 1800 (1798.407/1797.986/1798.307)
Cpufreq OPP: 1704    Measured: 1705 (1701.549/1701.782/1698.308)
Cpufreq OPP: 1608    Measured: 1330 (1330.633/1602.251/1603.982)
Cpufreq OPP: 1512    Measured: 1500 (1495.340/1496.449/738.904)
Cpufreq OPP: 1398    Measured: 1395 (1392.462/1314.500/1069.902)
Cpufreq OPP: 1200    Measured:  855 (854.457/1103.028/916.571)
Cpufreq OPP: 1000    Measured:  480 (475.385/1164.913/997.446)
Cpufreq OPP:  667    Measured:  665 (664.984/665.325/665.492)
Cpufreq OPP:  500    Measured:  500 (499.027/388.492/498.257)
Cpufreq OPP:  250    Measured:  380 (376.751/248.377/248.934)
Cpufreq OPP:  100    Measured:   70 (68.226/98.180/98.920)

##########################################################################

Thermal source: /sys/class/hwmon/hwmon0/ (cpu_thermal)

System health while running tinymembench:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
18:04:13: 2400/2016MHz  0.62   5%   1%   3%   0%   0%   0%  26,0°C
18:05:33: 2400/2016MHz  0.90  16%   0%  16%   0%   0%   0%  26,2°C
18:06:53: 2400/2016MHz  0.98  16%   0%  16%   0%   0%   0%  25,6°C
18:08:14: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  25,8°C
18:09:34: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  26,1°C
18:10:54: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  28,9°C
18:12:14: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  27,5°C
18:13:34: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  27,6°C
18:14:54: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  27,6°C

System health while running OpenSSL benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
18:15:25: 2400/2016MHz  1.00  12%   0%  11%   0%   0%   0%  28,6°C
18:15:41: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  27,1°C
18:15:57: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29,2°C
18:16:13: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  27,3°C
18:16:29: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29,6°C
18:16:45: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  27,5°C
18:17:01: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29,8°C

System health while running 7-zip single core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
18:17:13: 2400/2016MHz  1.00  12%   0%  12%   0%   0%   0%  31,2°C
18:17:20: 2400/2016MHz  1.00  17%   0%  16%   0%   0%   0%  27,7°C
18:17:27: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  27,5°C
18:17:34: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  27,4°C
18:17:41: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  27,4°C
18:17:48: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  27,4°C
18:17:55: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  27,4°C
18:18:02: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  27,4°C
18:18:09: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  27,5°C
18:18:17: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  27,6°C
18:18:24: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  27,6°C
18:18:31: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  27,5°C
18:18:38: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  27,5°C
18:18:45: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  27,5°C
18:18:52: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  27,8°C
18:18:59: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29,2°C
18:19:06: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29,3°C
18:19:13: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29,3°C
18:19:20: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29,3°C
18:19:27: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29,3°C
18:19:34: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29,3°C
18:19:41: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29,3°C
18:19:48: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  29,3°C

System health while running 7-zip multi core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
18:19:52: 2400/2016MHz  1.00  13%   0%  12%   0%   0%   0%  31,0°C
18:20:04: 2400/2016MHz  1.92  94%   0%  93%   0%   0%   0%  42,4°C
18:20:17: 2400/2016MHz  2.47  87%   0%  86%   0%   0%   0%  42,2°C
18:20:30: 2400/2016MHz  2.80  84%   1%  82%   0%   0%   0%  41,4°C
18:20:40: 2400/2016MHz  3.42  80%   1%  79%   0%   0%   0%  37,2°C
18:20:53: 2400/2016MHz  4.12  98%   1%  96%   0%   0%   0%  41,1°C
18:21:07: 2400/2016MHz  4.32  80%   0%  79%   0%   0%   0%  41,3°C
18:21:22: 2400/2016MHz  4.91  88%   0%  87%   0%   0%   0%  40,9°C
18:21:35: 2400/2016MHz  5.10  85%   0%  84%   0%   0%   0%  40,2°C
18:21:47: 2400/2016MHz  5.24  82%   1%  80%   0%   0%   0%  36,8°C
18:22:00: 2400/2016MHz  5.51  97%   1%  95%   0%   0%   0%  40,6°C
18:22:14: 2400/2016MHz  5.40  88%   0%  87%   0%   0%   0%  40,9°C
18:22:26: 2400/2016MHz  5.67  88%   0%  86%   0%   0%   0%  40,7°C
18:22:38: 2400/2016MHz  5.51  83%   1%  82%   0%   0%   0%  39,7°C
18:22:48: 2400/2016MHz  5.69  78%   0%  76%   0%   0%   0%  35,6°C
18:22:58: 2400/2016MHz  5.88  98%   1%  96%   0%   0%   0%  35,6°C

##########################################################################

Linux 5.10.81-meson64 (nas003) 	28.02.2022 	_aarch64_	(6 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          23,38    0,01    0,74    0,03    0,00   75,85

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk1           6,68       291,39       152,77         0,00     442749     232120          0
mmcblk1boot0      0,04         0,15         0,00         0,00        232          0          0
mmcblk1boot1      0,04         0,15         0,00         0,00        232          0          0
zram0             0,37         1,50         0,00         0,00       2272          4          0
zram1             0,16         0,31         1,28         0,00        476       1948          0

              total        used        free      shared  buff/cache   available
Mem:          3,7Gi       255Mi       3,3Gi        10Mi       202Mi       3,4Gi
Swap:         1,9Gi          0B       1,9Gi

Filename				Type		Size	Used	Priority
/dev/zram0                             	partition	1953764	0	5

CPU sysfs topology (clusters, cpufreq members, clockspeeds)
                 cpufreq   min    max
 CPU    cluster  policy   speed  speed   core type
  0        0        0      100    2016   Cortex-A53 / r0p4
  1        0        0      100    2016   Cortex-A53 / r0p4
  2        1        2      100    2208   Cortex-A73 / r0p2
  3        1        2      100    2208   Cortex-A73 / r0p2
  4        1        2      100    2208   Cortex-A73 / r0p2
  5        1        2      100    2208   Cortex-A73 / r0p2

Architecture:                    aarch64
CPU op-mode(s):                  32-bit, 64-bit
Byte Order:                      Little Endian
CPU(s):                          6
On-line CPU(s) list:             0-5
Thread(s) per core:              1
Core(s) per socket:              3
Socket(s):                       2
NUMA node(s):                    1
Vendor ID:                       ARM
Model:                           4
Model name:                      Cortex-A53
Stepping:                        r0p4
CPU max MHz:                     2400,0000
CPU min MHz:                     100,0000
BogoMIPS:                        48.00
NUMA node0 CPU(s):               0-5
Vulnerability Itlb multihit:     Not affected
Vulnerability L1tf:              Not affected
Vulnerability Mds:               Not affected
Vulnerability Meltdown:          Not affected
Vulnerability Spec store bypass: Vulnerable
Vulnerability Spectre v1:        Mitigation; __user pointer sanitization
Vulnerability Spectre v2:        Vulnerable
Vulnerability Srbds:             Not affected
Vulnerability Tsx async abort:   Not affected
Flags:                           fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid

SoC guess: Amlogic Meson G12B (S922X) Revision 29:c (40:2)
 Compiler: /usr/bin/gcc (Ubuntu 9.3.0-17ubuntu1~20.04/aarch64-linux-gnu)
 Userland: arm64
   Kernel: 5.10.81-meson64/aarch64
           CONFIG_HZ=250
           CONFIG_HZ_250=y
           CONFIG_PREEMPTION=y
           CONFIG_PREEMPT=y
           CONFIG_PREEMPT_COUNT=y
           CONFIG_PREEMPT_NOTIFIERS=y
           CONFIG_PREEMPT_RCU=y
           raid6: neonx8   gen()  2786 MB/s
           raid6: neonx8   xor()  2041 MB/s
           raid6: neonx4   gen()  3006 MB/s
           raid6: neonx4   xor()  2345 MB/s
           raid6: neonx2   gen()  2577 MB/s
           raid6: neonx2   xor()  2144 MB/s
           raid6: neonx1   gen()  1961 MB/s
           raid6: neonx1   xor()  1721 MB/s
           raid6: int64x8  gen()  1374 MB/s
           raid6: int64x8  xor()   735 MB/s
           raid6: int64x4  gen()  1462 MB/s
           raid6: int64x4  xor()   733 MB/s
           raid6: int64x2  gen()  1361 MB/s
           raid6: int64x2  xor()   619 MB/s
           raid6: int64x1  gen()  1126 MB/s
           raid6: int64x1  xor()   462 MB/s
           raid6: using algorithm neonx4 gen() 3006 MB/s
           raid6: .... xor() 2345 MB/s, rmw enabled
           raid6: using neon recovery algorithm
           xor: measuring software checksum speed
           xor: using function: 32regs (4023 MB/sec)

| Hardkernel ODROID-N2Plus | 2400/2016 MHz | 5.10 | Focal arm64 | 9680 | 275730 | 1153830 | 4030 | 7120 | - |