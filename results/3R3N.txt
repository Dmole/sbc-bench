sbc-bench v0.9.3 Akaso M8S (Tue, 01 Mar 2022 05:36:23 +0000)

Distributor ID:	Debian
Description:	Debian GNU/Linux 10 (buster)
Release:	10
Codename:	buster

Armbian release info:
BOARD=aml-s812
BOARD_NAME="S812"
BOARDFAMILY=aml-s812
BUILD_REPOSITORY_URL=https://github.com/150balbes/Build-Armbian
BUILD_REPOSITORY_COMMIT=e86d2e1-dirty
DISTRIBUTION_CODENAME=buster
DISTRIBUTION_STATUS=supported
VERSION=21.02.0-trunk
LINUXFAMILY=aml-s812
BRANCH=current
ARCH=arm
IMAGE_TYPE=user-built
BOARD_TYPE=conf
INITRD_ARCH=arm
KERNEL_IMAGE_TYPE=Image

/usr/bin/gcc (Debian 8.3.0-6) 8.3.0

Uptime: 05:36:24 up  1:11,  1 user,  load average: 0.73, 0.86, 1.09

Linux 5.10.0-aml-s812 (aml-s812) 	03/01/22 	_armv7l_	(4 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           1.57    0.01    0.67    6.55    0.00   91.20

Device             tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
sda               8.08       100.65       228.26     431762     979179

              total        used        free      shared  buff/cache   available
Mem:          986Mi        84Mi       813Mi       5.0Mi        88Mi       865Mi
Swap:            0B          0B          0B

##########################################################################

Checking cpufreq OPP (Cortex-A9):

Cpufreq OPP: 1200    Measured: 1195 (1190.140/1190.291/1191.678)

##########################################################################

Executing benchmark on cpu0 (Cortex-A9):

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :    684.2 MB/s
 C copy backwards (32 byte blocks)                    :    697.7 MB/s (0.2%)
 C copy backwards (64 byte blocks)                    :    391.1 MB/s (0.1%)
 C copy                                               :    896.0 MB/s
 C copy prefetched (32 bytes step)                    :   1202.7 MB/s (1.3%)
 C copy prefetched (64 bytes step)                    :   1128.3 MB/s
 C 2-pass copy                                        :    887.0 MB/s
 C 2-pass copy prefetched (32 bytes step)             :    945.3 MB/s
 C 2-pass copy prefetched (64 bytes step)             :    852.6 MB/s
 C fill                                               :   3323.0 MB/s (0.8%)
 C fill (shuffle within 16 byte blocks)               :   3331.1 MB/s (0.2%)
 C fill (shuffle within 32 byte blocks)               :   3332.3 MB/s
 C fill (shuffle within 64 byte blocks)               :    968.8 MB/s
 ---
 standard memcpy                                      :   1163.1 MB/s
 standard memset                                      :   3333.7 MB/s (0.4%)
 ---
 NEON read                                            :   1641.8 MB/s
 NEON read prefetched (32 bytes step)                 :   1710.9 MB/s
 NEON read prefetched (64 bytes step)                 :   1897.2 MB/s
 NEON read 2 data streams                             :   1477.9 MB/s
 NEON read 2 data streams prefetched (32 bytes step)  :   1543.9 MB/s
 NEON read 2 data streams prefetched (64 bytes step)  :   1545.7 MB/s
 NEON copy                                            :   1175.6 MB/s
 NEON copy prefetched (32 bytes step)                 :   1298.1 MB/s
 NEON copy prefetched (64 bytes step)                 :   1204.2 MB/s (1.1%)
 NEON unrolled copy                                   :   1100.1 MB/s
 NEON unrolled copy prefetched (32 bytes step)        :   1251.9 MB/s
 NEON unrolled copy prefetched (64 bytes step)        :   1311.6 MB/s
 NEON copy backwards                                  :    657.5 MB/s
 NEON copy backwards prefetched (32 bytes step)       :    727.0 MB/s
 NEON copy backwards prefetched (64 bytes step)       :    874.1 MB/s
 NEON 2-pass copy                                     :    844.3 MB/s
 NEON 2-pass copy prefetched (32 bytes step)          :    991.7 MB/s
 NEON 2-pass copy prefetched (64 bytes step)          :    804.8 MB/s
 NEON unrolled 2-pass copy                            :    757.2 MB/s
 NEON unrolled 2-pass copy prefetched (32 bytes step) :    980.2 MB/s
 NEON unrolled 2-pass copy prefetched (64 bytes step) :    993.6 MB/s
 NEON fill                                            :   3316.6 MB/s (0.3%)
 NEON fill backwards                                  :   3316.3 MB/s (0.7%)
 VFP copy                                             :   1156.1 MB/s
 VFP 2-pass copy                                      :    984.4 MB/s
 ARM fill (STRD)                                      :   3329.4 MB/s (0.4%)
 ARM fill (STM with 8 registers)                      :   3329.2 MB/s
 ARM fill (STM with 4 registers)                      :   3330.6 MB/s
 ARM copy prefetched (incr pld)                       :   1267.1 MB/s
 ARM copy prefetched (wrap pld)                       :   1265.2 MB/s
 ARM 2-pass copy prefetched (incr pld)                :   1137.5 MB/s
 ARM 2-pass copy prefetched (wrap pld)                :   1136.7 MB/s

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON read (from framebuffer)                         :    284.7 MB/s
 NEON copy (from framebuffer)                         :    242.6 MB/s
 NEON 2-pass copy (from framebuffer)                  :    227.5 MB/s
 NEON unrolled copy (from framebuffer)                :    247.6 MB/s (0.4%)
 NEON 2-pass unrolled copy (from framebuffer)         :    231.8 MB/s
 VFP copy (from framebuffer)                          :    384.5 MB/s
 VFP 2-pass copy (from framebuffer)                   :    386.3 MB/s
 ARM copy (from framebuffer)                          :    262.8 MB/s
 ARM 2-pass copy (from framebuffer)                   :    252.5 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.3 ns 
     65536 :   10.2 ns          /    16.1 ns 
    131072 :   15.1 ns          /    20.5 ns 
    262144 :   21.1 ns          /    26.1 ns 
    524288 :   24.3 ns          /    28.5 ns 
   1048576 :   36.8 ns          /    47.6 ns 
   2097152 :  100.1 ns          /   149.9 ns 
   4194304 :  138.7 ns          /   192.2 ns 
   8388608 :  160.0 ns          /   210.8 ns 
  16777216 :  174.9 ns          /   224.6 ns 
  33554432 :  186.9 ns          /   239.0 ns 
  67108864 :  198.2 ns          /   256.9 ns 

##########################################################################

Executing benchmark twice on cluster 0 (Cortex-A9)

OpenSSL 1.1.1d, built on 10 Sep 2019
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes
aes-128-cbc      31855.69k    38843.07k    41002.58k    41616.04k    41962.15k    42112.34k
aes-128-cbc      32237.34k    39067.50k    41260.54k    41872.04k    41994.92k    42095.96k
aes-192-cbc      28627.58k    34879.08k    37127.42k    37716.99k    37762.39k    37754.20k
aes-192-cbc      28583.39k    34835.86k    37066.67k    37560.66k    37803.35k    37781.50k
aes-256-cbc      25052.03k    29857.92k    31381.85k    31890.77k    32104.45k    32189.10k
aes-256-cbc      25071.87k    29829.35k    31315.80k    31756.63k    32008.87k    32052.57k

##########################################################################

Executing benchmark single-threaded on cpu0 (Cortex-A9)

7-Zip (a) [32] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,32 bits,4 CPUs LE)

LE
CPU Freq:  1143  1129  1184  1185  1185  1185  1184  1184  1185

RAM size:     986 MB,  # CPU hardware threads:   4
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:        707   100    689    688  |      12576   100   1075   1074
23:        685   100    699    699  |      12324   100   1068   1067
24:        665   100    716    715  |      12047   100   1058   1058
25:        646   100    739    738  |      11672   100   1040   1039
----------------------------------  | ------------------------------
Avr:             100    711    710  |              100   1060   1059
Tot:             100    885    885

##########################################################################

Executing benchmark 3 times multi-threaded

7-Zip (a) [32] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,32 bits,4 CPUs LE)

LE
CPU Freq:  1192  1136  1149  1189  1194  1190  1191  1192  1192

RAM size:     986 MB,  # CPU hardware threads:   4
RAM usage:    882 MB,  # Benchmark threads:      4

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       1765   284    605   1717  |      48830   397   1050   4166
23:       1940   325    607   1977  |      47914   397   1045   4146
24:       1950   334    628   2098  |      46680   396   1036   4098
25:       1866   330    646   2131  |      44776   393   1013   3985
----------------------------------  | ------------------------------
Avr:             318    622   1981  |              396   1036   4099
Tot:             357    829   3040

7-Zip (a) [32] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,32 bits,4 CPUs LE)

LE
CPU Freq:  1187  1189  1187  1190  1190  1191  1190  1190  1190

RAM size:     986 MB,  # CPU hardware threads:   4
RAM usage:    882 MB,  # Benchmark threads:      4

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       1948   317    598   1895  |      48866   396   1052   4169
23:       1934   325    607   1971  |      47799   396   1044   4136
24:       1921   330    626   2066  |      46778   396   1036   4106
25:       1875   334    640   2142  |      44835   393   1015   3990
----------------------------------  | ------------------------------
Avr:             326    618   2019  |              396   1037   4100
Tot:             361    827   3059

7-Zip (a) [32] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,32 bits,4 CPUs LE)

LE
CPU Freq:  1193  1193  1189  1188  1189  1191  1191  1191  1193

RAM size:     986 MB,  # CPU hardware threads:   4
RAM usage:    882 MB,  # Benchmark threads:      4

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       1932   317    594   1880  |      48539   395   1049   4141
23:       1947   329    604   1984  |      47783   396   1045   4134
24:       1947   335    626   2094  |      46682   396   1035   4098
25:       1912   339    644   2183  |      44771   393   1013   3985
----------------------------------  | ------------------------------
Avr:             330    617   2035  |              395   1035   4090
Tot:             362    826   3062

Compression: 1981,2019,2035
Decompression: 4099,4100,4090
Total: 3040,3059,3062

##########################################################################

Testing clockspeeds again. System health now:

Time        CPU    load %cpu %sys %usr %nice %io %irq   Temp
05:51:02: 1200MHz  3.57  81%   1%  79%   0%   0%   0%  63.8°C

Checking cpufreq OPP (Cortex-A9):

Cpufreq OPP: 1200    Measured: 1195 (1193.165/1193.082/1192.407)

##########################################################################

Thermal source: /sys/devices/virtual/thermal/thermal_zone0/ (soc)
                (Armbian wants to use /sys/class/hwmon/hwmon0 instead, that
                zone is named iio_hwmon. Please check and if wrong
                file a bug here: https://github.com/armbian/build/issues/)

System health while running tinymembench:

Time        CPU    load %cpu %sys %usr %nice %io %irq   Temp
05:36:25: 1200MHz  0.73   8%   0%   1%   0%   6%   0%  52.2°C
05:37:05: 1200MHz  1.19  36%   0%  25%   0%  11%   0%  53.1°C
05:37:45: 1200MHz  1.10  25%   0%  25%   0%   0%   0%  55.3°C
05:38:25: 1200MHz  1.05  25%   0%  25%   0%   0%   0%  55.6°C
05:39:05: 1200MHz  1.02  25%   0%  25%   0%   0%   0%  55.0°C
05:39:45: 1200MHz  1.01  25%   0%  24%   0%   0%   0%  53.8°C
05:40:25: 1200MHz  1.00  25%   0%  25%   0%   0%   0%  53.1°C
05:41:05: 1200MHz  1.00  25%   0%  25%   0%   0%   0%  53.8°C
05:41:45: 1200MHz  1.00  25%   0%  25%   0%   0%   0%  54.4°C
05:42:26: 1200MHz  1.00  25%   0%  25%   0%   0%   0%  55.6°C
05:43:06: 1200MHz  1.00  25%   0%  25%   0%   0%   0%  55.3°C

System health while running OpenSSL benchmark:

Time        CPU    load %cpu %sys %usr %nice %io %irq   Temp
05:43:22: 1200MHz  1.00  10%   0%   3%   0%   6%   0%  56.2°C
05:43:38: 1200MHz  1.00  25%   0%  25%   0%   0%   0%  54.7°C
05:43:54: 1200MHz  1.06  25%   0%  25%   0%   0%   0%  54.4°C
05:44:10: 1200MHz  1.05  25%   0%  25%   0%   0%   0%  55.0°C
05:44:26: 1200MHz  1.04  25%   0%  25%   0%   0%   0%  54.7°C
05:44:42: 1200MHz  1.03  25%   0%  25%   0%   0%   0%  55.6°C
05:44:58: 1200MHz  1.02  25%   0%  25%   0%   0%   0%  53.1°C

System health while running 7-zip single core benchmark:

Time        CPU    load %cpu %sys %usr %nice %io %irq   Temp
05:45:10: 1200MHz  1.02  10%   0%   4%   0%   5%   0%  55.6°C
05:45:23: 1200MHz  1.01  25%   0%  24%   0%   0%   0%  54.7°C
05:45:36: 1200MHz  1.01  25%   0%  24%   0%   0%   0%  53.4°C
05:45:49: 1200MHz  1.01  25%   0%  24%   0%   0%   0%  54.4°C
05:46:02: 1200MHz  1.00  25%   0%  24%   0%   0%   0%  55.3°C
05:46:15: 1200MHz  1.00  25%   0%  24%   0%   0%   0%  54.7°C
05:46:28: 1200MHz  1.00  27%   0%  24%   0%   2%   0%  55.0°C
05:46:41: 1200MHz  1.00  25%   0%  24%   0%   0%   0%  54.4°C
05:46:54: 1200MHz  1.00  27%   0%  24%   0%   2%   0%  55.3°C

System health while running 7-zip multi core benchmark:

Time        CPU    load %cpu %sys %usr %nice %io %irq   Temp
05:47:04: 1200MHz  1.00  11%   0%   4%   0%   5%   0%  55.6°C
05:47:30: 1200MHz  1.81  76%   1%  75%   0%   0%   0%  58.1°C
05:47:56: 1200MHz  2.26  80%   1%  79%   0%   0%   0%  60.0°C
05:48:22: 1200MHz  2.73  85%   1%  83%   0%   0%   0%  61.2°C
05:48:48: 1200MHz  2.81  75%   1%  73%   0%   0%   0%  60.6°C
05:49:14: 1200MHz  3.16  83%   1%  81%   0%   0%   0%  60.3°C
05:49:41: 1200MHz  3.55  81%   1%  79%   0%   0%   0%  63.1°C
05:50:10: 1200MHz  3.70  79%   1%  77%   0%   0%   0%  62.8°C
05:50:36: 1200MHz  3.58  84%   1%  82%   0%   0%   0%  62.8°C
05:51:02: 1200MHz  3.57  81%   1%  79%   0%   0%   0%  63.8°C

##########################################################################

Throttling statistics (time spent on each cpufreq OPP):

1200 MHz:  900.08 sec

##########################################################################

Linux 5.10.0-aml-s812 (aml-s812) 	03/01/22 	_armv7l_	(4 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           8.39    0.01    0.67    5.53    0.00   85.40

Device             tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
sda               6.79        84.24       194.53     437354    1009935

              total        used        free      shared  buff/cache   available
Mem:          986Mi        84Mi       835Mi       5.0Mi        66Mi       873Mi
Swap:            0B          0B          0B

CPU sysfs topology (clusters, cpufreq members, clockspeeds)
                 cpufreq   min    max
 CPU    cluster  policy   speed  speed   core type
  0        2        0     1200    1200   Cortex-A9 / r4p1
  1        2        0     1200    1200   Cortex-A9 / r4p1
  2        2        0     1200    1200   Cortex-A9 / r4p1
  3        2        0     1200    1200   Cortex-A9 / r4p1

Architecture:        armv7l
Byte Order:          Little Endian
CPU(s):              4
On-line CPU(s) list: 0-3
Thread(s) per core:  1
Core(s) per socket:  4
Socket(s):           1
Vendor ID:           ARM
Model:               1
Model name:          Cortex-A9
Stepping:            r4p1
CPU max MHz:         1200.0000
CPU min MHz:         1200.0000
BogoMIPS:            2.00
Flags:               half thumb fastmult vfp edsp thumbee neon vfpv3 tls vfpd32

SoC guess: Amlogic Meson8m2 (S812) RevA (1d - 0:74E) detected
 Compiler: /usr/bin/gcc (Debian 8.3.0-6/arm-linux-gnueabihf)
 Userland: armhf
   Kernel: 5.10.0-aml-s812/armv7l
           CONFIG_HZ=250
           CONFIG_HZ_250=y
           CONFIG_HZ_FIXED=0
           CONFIG_PREEMPT_VOLUNTARY=y
           raid6: neonx8   gen()  1228 MB/s
           raid6: neonx8   xor()   817 MB/s
           raid6: neonx4   gen()  1482 MB/s
           raid6: neonx4   xor()  1039 MB/s
           raid6: neonx2   gen()  1847 MB/s
           raid6: neonx2   xor()  1235 MB/s
           raid6: neonx1   gen()  1444 MB/s
           raid6: neonx1   xor()  1009 MB/s
           raid6: int32x8  gen()   402 MB/s
           raid6: int32x8  xor()   250 MB/s
           raid6: int32x4  gen()   443 MB/s
           raid6: int32x4  xor()   268 MB/s
           raid6: int32x2  gen()   561 MB/s
           raid6: int32x2  xor()   268 MB/s
           raid6: int32x1  gen()   521 MB/s
           raid6: int32x1  xor()   232 MB/s
           raid6: using algorithm neonx2 gen() 1847 MB/s
           raid6: .... xor() 1235 MB/s, rmw enabled
           raid6: using neon recovery algorithm
           xor: measuring software checksum speed
           xor: using function: arm4regs (1945 MB/sec)

| Akaso M8S | 1200 MHz | 5.10 | Buster armhf | 3050 | 32050 | 32120 | 1160 | 3330 | - |