sbc-bench v0.9.3 Tronsmart MXIII Plus (Sun, 13 Mar 2022 07:51:59 +0100)

Distributor ID:	Debian
Description:	Debian GNU/Linux 10 (buster)
Release:	10
Codename:	buster

Armbian release info:
BOARD=aml-s812
BOARD_NAME="S812"
BOARDFAMILY=aml-s812
BUILD_REPOSITORY_URL=https://github.com/150balbes/Build-Armbian
BUILD_REPOSITORY_COMMIT=e86d2e1-dirty
DISTRIBUTION_CODENAME=buster
DISTRIBUTION_STATUS=supported
VERSION=21.02.0-trunk
LINUXFAMILY=aml-s812
BRANCH=current
ARCH=arm
IMAGE_TYPE=user-built
BOARD_TYPE=conf
INITRD_ARCH=arm
KERNEL_IMAGE_TYPE=Image

/usr/bin/gcc (Debian 8.3.0-6) 8.3.0

Uptime: 07:52:00 up  3:25,  1 user,  load average: 0.57, 0.66, 0.49

Linux 5.10.0-aml-s812 (aml-s812) 	03/13/22 	_armv7l_	(4 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           0.54    0.00    0.24    0.20    0.00   99.02

Device             tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
mmcblk0           4.39        17.08       168.87     210352    2079978

              total        used        free      shared  buff/cache   available
Mem:          2.0Gi        86Mi       1.8Gi       4.0Mi        77Mi       1.8Gi
Swap:            0B          0B          0B

##########################################################################

Checking cpufreq OPP (Cortex-A9):

Cpufreq OPP: 1608    Measured: 1550 (1548.249/1562.638/1490.765)
Cpufreq OPP: 1416    Measured: 1360 (1358.290/1357.948/1369.135)
Cpufreq OPP: 1200    Measured: 1160 (1159.197/1158.573/1158.820)
Cpufreq OPP: 1008    Measured:  975 (970.106/971.452/970.346)
Cpufreq OPP:  816    Measured:  785 (781.878/782.312/782.609)
Cpufreq OPP:  720    Measured:  690 (686.592/687.349/687.313)
Cpufreq OPP:  600    Measured:  570 (568.270/568.252/568.503)
Cpufreq OPP:  504    Measured:  475 (472.676/473.009/473.099)
Cpufreq OPP:  408    Measured:  380 (378.056/374.402/374.683)
Cpufreq OPP:  312    Measured:  310 (306.087/282.158/282.898)
Cpufreq OPP:  192    Measured:  340 (338.146/338.551/345.751)
Cpufreq OPP:   96    Measured:  160 (156.905/157.225/161.199)

##########################################################################

Executing benchmark on cpu0 (Cortex-A9):

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :    797.2 MB/s (2.3%)
 C copy backwards (32 byte blocks)                    :    807.5 MB/s
 C copy backwards (64 byte blocks)                    :    435.4 MB/s
 C copy                                               :   1159.6 MB/s
 C copy prefetched (32 bytes step)                    :   1530.7 MB/s
 C copy prefetched (64 bytes step)                    :   1432.5 MB/s
 C 2-pass copy                                        :   1023.9 MB/s
 C 2-pass copy prefetched (32 bytes step)             :   1088.9 MB/s
 C 2-pass copy prefetched (64 bytes step)             :   1066.1 MB/s
 C fill                                               :   3427.3 MB/s (0.4%)
 C fill (shuffle within 16 byte blocks)               :   3418.0 MB/s
 C fill (shuffle within 32 byte blocks)               :   3426.8 MB/s
 C fill (shuffle within 64 byte blocks)               :   1041.0 MB/s (1.2%)
 ---
 standard memcpy                                      :   1469.9 MB/s
 standard memset                                      :   3428.2 MB/s (0.4%)
 ---
 NEON read                                            :   1670.5 MB/s
 NEON read prefetched (32 bytes step)                 :   1884.2 MB/s
 NEON read prefetched (64 bytes step)                 :   1826.2 MB/s
 NEON read 2 data streams                             :   1605.6 MB/s
 NEON read 2 data streams prefetched (32 bytes step)  :   1676.7 MB/s
 NEON read 2 data streams prefetched (64 bytes step)  :   1618.1 MB/s
 NEON copy                                            :   1504.4 MB/s
 NEON copy prefetched (32 bytes step)                 :   1624.9 MB/s
 NEON copy prefetched (64 bytes step)                 :   1523.6 MB/s
 NEON unrolled copy                                   :   1413.4 MB/s
 NEON unrolled copy prefetched (32 bytes step)        :   1550.5 MB/s
 NEON unrolled copy prefetched (64 bytes step)        :   1642.6 MB/s (1.4%)
 NEON copy backwards                                  :    782.3 MB/s
 NEON copy backwards prefetched (32 bytes step)       :    897.8 MB/s
 NEON copy backwards prefetched (64 bytes step)       :   1053.0 MB/s
 NEON 2-pass copy                                     :   1029.3 MB/s
 NEON 2-pass copy prefetched (32 bytes step)          :   1133.5 MB/s
 NEON 2-pass copy prefetched (64 bytes step)          :   1012.8 MB/s
 NEON unrolled 2-pass copy                            :    961.2 MB/s
 NEON unrolled 2-pass copy prefetched (32 bytes step) :   1134.5 MB/s
 NEON unrolled 2-pass copy prefetched (64 bytes step) :   1140.3 MB/s
 NEON fill                                            :   3419.2 MB/s (0.4%)
 NEON fill backwards                                  :   3417.2 MB/s
 VFP copy                                             :   1493.2 MB/s
 VFP 2-pass copy                                      :   1087.6 MB/s (0.9%)
 ARM fill (STRD)                                      :   3427.2 MB/s (0.4%)
 ARM fill (STM with 8 registers)                      :   3415.5 MB/s
 ARM fill (STM with 4 registers)                      :   3420.9 MB/s
 ARM copy prefetched (incr pld)                       :   1591.9 MB/s
 ARM copy prefetched (wrap pld)                       :   1602.3 MB/s
 ARM 2-pass copy prefetched (incr pld)                :   1181.3 MB/s
 ARM 2-pass copy prefetched (wrap pld)                :   1186.7 MB/s

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON read (from framebuffer)                         :    296.2 MB/s
 NEON copy (from framebuffer)                         :    272.4 MB/s
 NEON 2-pass copy (from framebuffer)                  :    251.7 MB/s
 NEON unrolled copy (from framebuffer)                :    274.7 MB/s
 NEON 2-pass unrolled copy (from framebuffer)         :    254.7 MB/s
 VFP copy (from framebuffer)                          :    444.8 MB/s (0.5%)
 VFP 2-pass copy (from framebuffer)                   :    455.8 MB/s
 ARM copy (from framebuffer)                          :    283.6 MB/s
 ARM 2-pass copy (from framebuffer)                   :    268.2 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.3 ns          /     1.0 ns 
     65536 :    8.0 ns          /    12.6 ns 
    131072 :   11.7 ns          /    15.9 ns 
    262144 :   16.3 ns          /    20.1 ns 
    524288 :   18.7 ns          /    21.9 ns 
   1048576 :   30.3 ns          /    40.9 ns 
   2097152 :   98.7 ns          /   144.5 ns 
   4194304 :  137.7 ns          /   181.1 ns 
   8388608 :  159.4 ns          /   197.8 ns 
  16777216 :  173.8 ns          /   212.5 ns 
  33554432 :  184.8 ns          /   227.4 ns 
  67108864 :  197.3 ns          /   247.4 ns 

##########################################################################

Executing benchmark twice on cluster 0 (Cortex-A9)

OpenSSL 1.1.1d, built on 10 Sep 2019
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes
aes-128-cbc      42003.38k    50526.83k    53614.17k    54444.71k    54657.02k    54329.34k
aes-128-cbc      43689.39k    51976.94k    55362.30k    56003.24k    56057.86k    56224.43k
aes-192-cbc      37271.21k    44409.28k    47044.52k    47940.61k    48398.34k    48376.49k
aes-192-cbc      38722.90k    45662.23k    48356.27k    48971.78k    49340.42k    49485.14k
aes-256-cbc      32593.45k    38834.75k    40934.06k    41667.58k    42232.49k    42259.80k
aes-256-cbc      33607.22k    39991.32k    42028.37k    42681.00k    42849.62k    42876.93k

##########################################################################

Executing benchmark single-threaded on cpu0 (Cortex-A9)

7-Zip (a) [32] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,32 bits,4 CPUs LE)

LE
CPU Freq:  1482  1551  1553  1553  1553  1552  1553  1553  1553

RAM size:    2001 MB,  # CPU hardware threads:   4
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:        859   100    837    836  |      16290   100   1391   1391
23:        830   100    846    846  |      15900   100   1377   1376
24:        800   100    861    861  |      15533   100   1364   1364
25:        770   100    880    880  |      15132   100   1347   1347
----------------------------------  | ------------------------------
Avr:             100    856    856  |              100   1370   1369
Tot:             100   1113   1113

##########################################################################

Executing benchmark 3 times multi-threaded

7-Zip (a) [32] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,32 bits,4 CPUs LE)

LE
CPU Freq:  1598  1530  1543  1597  1597  1595  1591  1595  1597

RAM size:    2001 MB,  # CPU hardware threads:   4
RAM usage:    882 MB,  # Benchmark threads:      4

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       2313   299    753   2251  |      62479   387   1378   5331
23:       2464   334    752   2511  |      61219   388   1367   5297
24:       2456   349    756   2642  |      59539   387   1352   5227
25:       2390   353    772   2730  |      57613   385   1332   5127
----------------------------------  | ------------------------------
Avr:             334    758   2533  |              386   1357   5245
Tot:             360   1058   3889

7-Zip (a) [32] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,32 bits,4 CPUs LE)

LE
CPU Freq:  1593  1603  1590  1596  1596  1595  1595  1595  1596

RAM size:    2001 MB,  # CPU hardware threads:   4
RAM usage:    882 MB,  # Benchmark threads:      4

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       2423   319    739   2357  |      62689   388   1378   5348
23:       2380   323    750   2425  |      60707   385   1364   5253
24:       2334   331    758   2510  |      59612   387   1351   5233
25:       2309   340    775   2637  |      58079   387   1336   5169
----------------------------------  | ------------------------------
Avr:             328    756   2482  |              387   1357   5251
Tot:             358   1057   3867

7-Zip (a) [32] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,32 bits,4 CPUs LE)

LE
CPU Freq:  1602  1594  1593  1595  1595  1596  1596  1595  1596

RAM size:    2001 MB,  # CPU hardware threads:   4
RAM usage:    882 MB,  # Benchmark threads:      4

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       2539   334    740   2471  |      62623   388   1378   5343
23:       2482   339    746   2530  |      60997   386   1367   5278
24:       2400   342    755   2581  |      59522   387   1349   5225
25:       2300   340    773   2626  |      57862   386   1333   5150
----------------------------------  | ------------------------------
Avr:             339    754   2552  |              387   1357   5249
Tot:             363   1055   3900

Compression: 2533,2482,2552
Decompression: 5245,5251,5249
Total: 3889,3867,3900

##########################################################################

Testing clockspeeds again. System health now:

Time        CPU    load %cpu %sys %usr %nice %io %irq   Temp
08:06:12: 1608MHz  3.42  81%   2%  79%   0%   0%   0%  63.4°C

Checking cpufreq OPP (Cortex-A9):

Cpufreq OPP: 1608    Measured: 1565 (1561.504/1563.357/1562.449)
Cpufreq OPP: 1416    Measured: 1375 (1372.832/1373.519/1372.803)
Cpufreq OPP: 1200    Measured: 1160 (1159.002/1158.963/1159.353)
Cpufreq OPP: 1008    Measured:  975 (971.224/971.338/971.269)
Cpufreq OPP:  816    Measured:  785 (782.692/780.640/781.111)
Cpufreq OPP:  720    Measured:  685 (681.728/682.488/682.552)
Cpufreq OPP:  600    Measured:  565 (563.332/565.712/565.512)
Cpufreq OPP:  504    Measured:  475 (471.176/470.557/471.129)
Cpufreq OPP:  408    Measured:  380 (376.417/376.748/375.615)
Cpufreq OPP:  312    Measured:  285 (281.568/282.205/281.947)
Cpufreq OPP:  192    Measured:  350 (349.608/350.284/350.407)
Cpufreq OPP:   96    Measured:  165 (160.779/161.081/161.338)

##########################################################################

Thermal source: /sys/devices/virtual/thermal/thermal_zone0/ (soc)
                (Armbian wants to use /sys/class/hwmon/hwmon0 instead, that
                zone is named iio_hwmon. Please check and if wrong
                file a bug here: https://github.com/armbian/build/issues/)

System health while running tinymembench:

Time        CPU    load %cpu %sys %usr %nice %io %irq   Temp
07:52:14: 1608MHz  1.06   1%   0%   0%   0%   0%   0%  50.9°C
07:52:54: 1608MHz  1.03  25%   0%  25%   0%   0%   0%  52.8°C
07:53:34: 1608MHz  1.01  25%   0%  25%   0%   0%   0%  55.0°C
07:54:14: 1608MHz  1.00  25%   0%  25%   0%   0%   0%  50.9°C
07:54:54: 1608MHz  1.07  25%   0%  25%   0%   0%   0%  49.4°C
07:55:34: 1608MHz  1.10  25%   0%  24%   0%   0%   0%  45.9°C
07:56:14: 1608MHz  1.05  25%   0%  25%   0%   0%   0%  47.8°C
07:56:54: 1608MHz  1.02  25%   0%  25%   0%   0%   0%  46.9°C
07:57:34: 1608MHz  1.01  25%   0%  25%   0%   0%   0%  47.8°C
07:58:14: 1608MHz  1.00  25%   0%  25%   0%   0%   0%  47.5°C
07:58:55: 1608MHz  1.00  25%   0%  25%   0%   0%   0%  51.6°C

System health while running OpenSSL benchmark:

Time        CPU    load %cpu %sys %usr %nice %io %irq   Temp
07:59:11: 1608MHz  1.00   1%   0%   1%   0%   0%   0%  54.1°C
07:59:27: 1608MHz  1.00  25%   0%  25%   0%   0%   0%  52.2°C
07:59:44: 1608MHz  1.00  25%   0%  25%   0%   0%   0%  51.9°C
08:00:00: 1608MHz  1.00  25%   0%  25%   0%   0%   0%  51.9°C
08:00:16: 1608MHz  1.00  25%   0%  25%   0%   0%   0%  51.6°C
08:00:32: 1608MHz  1.00  25%   0%  25%   0%   0%   0%  52.5°C
08:00:48: 1608MHz  1.00  25%   0%  25%   0%   0%   0%  51.2°C

System health while running 7-zip single core benchmark:

Time        CPU    load %cpu %sys %usr %nice %io %irq   Temp
08:01:00: 1608MHz  1.00   2%   0%   1%   0%   0%   0%  53.1°C
08:01:11: 1608MHz  1.00  25%   0%  24%   0%   0%   0%  52.8°C
08:01:22: 1608MHz  1.00  25%   0%  24%   0%   0%   0%  52.5°C
08:01:33: 1608MHz  1.00  25%   0%  24%   0%   0%   0%  53.1°C
08:01:44: 1608MHz  1.00  25%   0%  24%   0%   0%   0%  54.1°C
08:01:55: 1608MHz  1.00  25%   0%  24%   0%   0%   0%  52.8°C
08:02:06: 1608MHz  1.00  25%   0%  24%   0%   0%   0%  53.4°C
08:02:17: 1608MHz  1.00  25%   0%  24%   0%   0%   0%  54.4°C
08:02:28: 1608MHz  1.00  25%   0%  24%   0%   0%   0%  54.1°C

System health while running 7-zip multi core benchmark:

Time        CPU    load %cpu %sys %usr %nice %io %irq   Temp
08:02:39: 1608MHz  1.00   2%   0%   1%   0%   0%   0%  54.7°C
08:03:02: 1608MHz  1.78  78%   1%  77%   0%   0%   0%  60.0°C
08:03:25: 1608MHz  2.34  84%   2%  82%   0%   0%   0%  62.2°C
08:03:50: 1608MHz  2.82  91%   2%  88%   0%   0%   0%  62.5°C
08:04:15: 1608MHz  3.02  81%   1%  80%   0%   0%   0%  63.8°C
08:04:38: 1608MHz  3.03  80%   1%  78%   0%   0%   0%  62.8°C
08:05:01: 1608MHz  3.37  88%   1%  86%   0%   0%   0%  62.5°C
08:05:25: 1608MHz  3.17  79%   1%  78%   0%   0%   0%  62.5°C
08:05:49: 1608MHz  3.26  88%   1%  86%   0%   0%   0%  64.7°C
08:06:12: 1608MHz  3.42  81%   2%  79%   0%   0%   0%  63.4°C

##########################################################################

dmesg output while running the benchmarks:

[12431.058023] meson-drm d0100000.vpu: meson_vclk_setup_ccf(target: 0, pll: 27000, phy: 27000, dac: 27000, venc: 27000, hdmi_use_enci: 1)
[12457.203411] [drm] kms: can't enable cloning when we probably wanted to.
[12457.203545] meson-drm d0100000.vpu: meson_vclk_setup_ccf(target: 1, pll: 2970000, phy: 1485000, dac: 148500, venc: 148500, hdmi_use_enci: 0)
[12481.756664] meson-drm d0100000.vpu: meson_vclk_setup_ccf(target: 0, pll: 27000, phy: 27000, dac: 27000, venc: 27000, hdmi_use_enci: 1)
[12553.701710] [drm] kms: can't enable cloning when we probably wanted to.
[12553.701834] meson-drm d0100000.vpu: meson_vclk_setup_ccf(target: 1, pll: 2970000, phy: 1485000, dac: 148500, venc: 148500, hdmi_use_enci: 0)
[12562.153585] meson-drm d0100000.vpu: meson_vclk_setup_ccf(target: 0, pll: 27000, phy: 27000, dac: 27000, venc: 27000, hdmi_use_enci: 1)
[12722.495354] [drm] kms: can't enable cloning when we probably wanted to.
[12722.495485] meson-drm d0100000.vpu: meson_vclk_setup_ccf(target: 1, pll: 2970000, phy: 1485000, dac: 148500, venc: 148500, hdmi_use_enci: 0)

##########################################################################

Linux 5.10.0-aml-s812 (aml-s812) 	03/13/22 	_armv7l_	(4 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           3.19    0.00    0.28    0.20    0.00   96.34

Device             tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
mmcblk0           4.22        16.26       160.03     214416    2110842

              total        used        free      shared  buff/cache   available
Mem:          2.0Gi       180Mi       1.7Gi       4.0Mi        81Mi       1.7Gi
Swap:            0B          0B          0B

CPU sysfs topology (clusters, cpufreq members, clockspeeds)
                 cpufreq   min    max
 CPU    cluster  policy   speed  speed   core type
  0        2        0       96    1608   Cortex-A9 / r4p1
  1        2        0       96    1608   Cortex-A9 / r4p1
  2        2        0       96    1608   Cortex-A9 / r4p1
  3        2        0       96    1608   Cortex-A9 / r4p1

Architecture:        armv7l
Byte Order:          Little Endian
CPU(s):              4
On-line CPU(s) list: 0-3
Thread(s) per core:  1
Core(s) per socket:  4
Socket(s):           1
Vendor ID:           ARM
Model:               1
Model name:          Cortex-A9
Stepping:            r4p1
CPU max MHz:         1608.0000
CPU min MHz:         96.0000
BogoMIPS:            4.06
Flags:               half thumb fastmult vfp edsp thumbee neon vfpv3 tls vfpd32

SoC guess: Amlogic Meson8m2 (S812) RevA (1d - 0:74E) detected
 Compiler: /usr/bin/gcc (Debian 8.3.0-6/arm-linux-gnueabihf)
 Userland: armhf
   Kernel: 5.10.0-aml-s812/armv7l
           CONFIG_HZ=250
           CONFIG_HZ_250=y
           CONFIG_HZ_FIXED=0
           CONFIG_PREEMPT_VOLUNTARY=y
           raid6: neonx8   gen()   809 MB/s
           raid6: neonx8   xor()   539 MB/s
           raid6: neonx4   gen()   977 MB/s
           raid6: neonx4   xor()   685 MB/s
           raid6: neonx2   gen()  1218 MB/s
           raid6: neonx2   xor()   815 MB/s
           raid6: neonx1   gen()   951 MB/s
           raid6: neonx1   xor()   665 MB/s
           raid6: int32x8  gen()   265 MB/s
           raid6: int32x8  xor()   165 MB/s
           raid6: int32x4  gen()   292 MB/s
           raid6: int32x4  xor()   177 MB/s
           raid6: int32x2  gen()   369 MB/s
           raid6: int32x2  xor()   177 MB/s
           raid6: int32x1  gen()   343 MB/s
           raid6: int32x1  xor()   153 MB/s
           raid6: using algorithm neonx2 gen() 1218 MB/s
           raid6: .... xor() 815 MB/s, rmw enabled
           raid6: using neon recovery algorithm
           xor: measuring software checksum speed
           xor: using function: arm4regs (1274 MB/sec)

| Tronsmart MXIII Plus | 1608 MHz | 5.10 | Buster armhf | 3880 | 42850 | 42570 | 1470 | 3430 | - |