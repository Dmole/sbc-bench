sbc-bench v0.9.3 Hardkernel ODROID-C4 (Wed, 30 Mar 2022 11:35:52 +0200)

Distributor ID:	Debian
Description:	Debian GNU/Linux 10 (buster)
Release:	10
Codename:	buster

Armbian release info:
BOARD=odroidc4
BOARD_NAME="Odroid C4"
BOARDFAMILY=meson-sm1
BUILD_REPOSITORY_URL=https://github.com/armbian/build
BUILD_REPOSITORY_COMMIT=92a1c729d-dirty
VERSION=22.02.1
LINUXFAMILY=meson64
ARCH=arm64
IMAGE_TYPE=stable
BOARD_TYPE=conf
INITRD_ARCH=arm64
KERNEL_IMAGE_TYPE=Image
BRANCH=current

/usr/bin/gcc (Debian 8.3.0-6) 8.3.0

Uptime: 11:35:52 up 11 days, 17:56,  1 user,  load average: 0.82, 0.22, 0.07

Linux 5.10.102-meson64 (babel) 	03/30/22 	_aarch64_	(4 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           0.10    0.05    0.31    0.04    0.00   99.50

Device             tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
mmcblk1           1.76         1.95        11.17    1979941   11339284
sda               0.60        21.98        24.46   22305802   24830560
zram0             0.00         0.00         0.00       2232          4
zram1             0.02         0.13         0.09     134256      88644

              total        used        free      shared  buff/cache   available
Mem:          3.7Gi       379Mi       3.1Gi        45Mi       186Mi       3.2Gi
Swap:            0B          0B          0B

##########################################################################

Checking cpufreq OPP (Cortex-A55):

Cpufreq OPP: 2100    Measured: 2100 (2095.044/2097.047/2097.418)
Cpufreq OPP: 2016    Measured: 2015 (2012.124/2013.178/2010.946)
Cpufreq OPP: 1908    Measured: 1910 (1905.269/1905.427/1905.112)
Cpufreq OPP: 1800    Measured: 1800 (1797.566/1781.299/1797.085)
Cpufreq OPP: 1704    Measured: 1695 (1691.740/1697.308/1701.800)
Cpufreq OPP: 1608    Measured: 1610 (1605.338/1604.301/1605.338)
Cpufreq OPP: 1500    Measured: 1500 (1497.282/1496.709/1497.664)
Cpufreq OPP: 1404    Measured: 1405 (1401.226/1401.698/1401.774)
Cpufreq OPP: 1200    Measured: 1200 (1197.411/1196.703/1197.466)
Cpufreq OPP: 1000    Measured: 1000 (997.518/996.977/999.231)
Cpufreq OPP:  666    Measured:  665 (664.409/663.675/664.522)
Cpufreq OPP:  500    Measured:  500 (497.999/498.040/497.683)
Cpufreq OPP:  250    Measured:  250 (248.004/248.220/248.377)
Cpufreq OPP:  100    Measured:  100 (98.065/98.242/98.026)

##########################################################################

Executing benchmark on cpu0 (Cortex-A55):

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   2088.7 MB/s (0.6%)
 C copy backwards (32 byte blocks)                    :   2106.6 MB/s (3.4%)
 C copy backwards (64 byte blocks)                    :   1632.0 MB/s
 C copy                                               :   3546.1 MB/s (0.3%)
 C copy prefetched (32 bytes step)                    :   2140.3 MB/s
 C copy prefetched (64 bytes step)                    :   2968.2 MB/s
 C 2-pass copy                                        :   2322.8 MB/s (0.3%)
 C 2-pass copy prefetched (32 bytes step)             :   1381.9 MB/s
 C 2-pass copy prefetched (64 bytes step)             :   2183.7 MB/s (0.2%)
 C fill                                               :   5149.9 MB/s
 C fill (shuffle within 16 byte blocks)               :   5150.1 MB/s
 C fill (shuffle within 32 byte blocks)               :   5150.0 MB/s
 C fill (shuffle within 64 byte blocks)               :   5148.4 MB/s
 ---
 standard memcpy                                      :   3539.7 MB/s (0.3%)
 standard memset                                      :   5150.8 MB/s
 ---
 NEON LDP/STP copy                                    :   3565.2 MB/s (0.7%)
 NEON LDP/STP copy pldl2strm (32 bytes step)          :   2539.9 MB/s
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   3359.2 MB/s
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   2501.8 MB/s (0.1%)
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   3652.5 MB/s
 NEON LD1/ST1 copy                                    :   3567.6 MB/s (0.3%)
 NEON STP fill                                        :   5149.3 MB/s
 NEON STNP fill                                       :   5018.4 MB/s (0.1%)
 ARM LDP/STP copy                                     :   3564.1 MB/s
 ARM STP fill                                         :   5149.6 MB/s (0.3%)
 ARM STNP fill                                        :   5016.6 MB/s

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :    241.0 MB/s
 NEON LDP/STP 2-pass copy (from framebuffer)          :    241.0 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :     66.6 MB/s
 NEON LD1/ST1 2-pass copy (from framebuffer)          :     67.1 MB/s
 ARM LDP/STP copy (from framebuffer)                  :    128.6 MB/s
 ARM LDP/STP 2-pass copy (from framebuffer)           :    129.7 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.5 ns          /     0.6 ns 
     32768 :    2.3 ns          /     5.2 ns 
     65536 :    9.2 ns          /    12.9 ns 
    131072 :   11.9 ns          /    15.9 ns 
    262144 :   14.1 ns          /    17.4 ns 
    524288 :   25.3 ns          /    36.0 ns 
   1048576 :   72.4 ns          /   106.3 ns 
   2097152 :  101.6 ns          /   133.3 ns 
   4194304 :  116.8 ns          /   142.6 ns 
   8388608 :  132.2 ns          /   155.2 ns 
  16777216 :  141.1 ns          /   163.0 ns 
  33554432 :  146.9 ns          /   168.4 ns 
  67108864 :  150.3 ns          /   172.1 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.5 ns          /     0.7 ns 
     32768 :    3.8 ns          /     4.9 ns 
     65536 :    9.2 ns          /    12.9 ns 
    131072 :   11.9 ns          /    15.9 ns 
    262144 :   14.1 ns          /    17.4 ns 
    524288 :   16.4 ns          /    19.5 ns 
   1048576 :   73.2 ns          /   109.7 ns 
   2097152 :  102.0 ns          /   135.1 ns 
   4194304 :  116.9 ns          /   144.4 ns 
   8388608 :  124.4 ns          /   147.9 ns 
  16777216 :  128.1 ns          /   149.3 ns 
  33554432 :  129.8 ns          /   149.8 ns 
  67108864 :  130.5 ns          /   150.1 ns 

##########################################################################

Executing benchmark twice on cluster 0 (Cortex-A55)

OpenSSL 1.1.1n, built on 15 Mar 2022
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes
aes-128-cbc     187898.73k   560830.61k  1086645.42k  1430681.94k  1573259.95k  1584627.71k
aes-128-cbc     192090.82k   561027.88k  1085315.16k  1430430.72k  1573489.32k  1585501.53k
aes-192-cbc     178975.57k   498361.92k   879696.81k  1098926.42k  1183992.49k  1190810.97k
aes-192-cbc     180396.70k   496714.67k   881811.63k  1099821.06k  1184481.28k  1190800.04k
aes-256-cbc     173479.95k   457748.48k   764506.20k   918464.51k   977543.17k   981942.27k
aes-256-cbc     174750.49k   456059.52k   761274.45k   918860.80k   977455.79k   981942.27k

##########################################################################

Executing benchmark single-threaded on cpu0 (Cortex-A55)

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,4 CPUs LE)

LE
CPU Freq:  2087  2089  2094  2095  2096  2096  2097  2097  2097

RAM size:    3782 MB,  # CPU hardware threads:   4
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       1221    99   1195   1189  |      24956   100   2140   2131
23:       1200    99   1229   1223  |      24408   100   2121   2113
24:       1185    99   1281   1274  |      23826   100   2100   2092
25:       1176    99   1350   1343  |      23227   100   2076   2067
----------------------------------  | ------------------------------
Avr:              99   1264   1257  |              100   2109   2101
Tot:             100   1687   1679

##########################################################################

Executing benchmark 3 times multi-threaded

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,4 CPUs LE)

LE
CPU Freq:  2092  2091  2094  2094  2096  2097  2097  2097  2097

RAM size:    3782 MB,  # CPU hardware threads:   4
RAM usage:    882 MB,  # Benchmark threads:      4

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       3379   325   1012   3288  |      96039   396   2068   8194
23:       3372   331   1040   3436  |      93436   395   2048   8085
24:       3351   332   1086   3603  |      92039   397   2037   8080
25:       3284   331   1135   3750  |      88414   392   2006   7869
----------------------------------  | ------------------------------
Avr:             329   1068   3519  |              395   2039   8057
Tot:             362   1554   5788

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,4 CPUs LE)

LE
CPU Freq:  2093  2097  2097  2097  2096  2097  2097  2097  2097

RAM size:    3782 MB,  # CPU hardware threads:   4
RAM usage:    882 MB,  # Benchmark threads:      4

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       3375   326   1006   3283  |      95683   395   2067   8163
23:       3298   325   1034   3360  |      93948   396   2052   8129
24:       3248   324   1078   3493  |      91272   394   2032   8012
25:       3270   329   1137   3735  |      88852   393   2011   7908
----------------------------------  | ------------------------------
Avr:             326   1064   3468  |              395   2040   8053
Tot:             360   1552   5760

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,4 CPUs LE)

LE
CPU Freq:  2092  2097  2097  2096  2097  2097  2097  2097  2097

RAM size:    3782 MB,  # CPU hardware threads:   4
RAM usage:    882 MB,  # Benchmark threads:      4

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       3437   330   1013   3344  |      96171   396   2069   8205
23:       3255   323   1028   3317  |      93866   396   2051   8122
24:       3255   324   1079   3500  |      91756   396   2036   8055
25:       3195   323   1131   3648  |      89558   396   2014   7970
----------------------------------  | ------------------------------
Avr:             325   1063   3452  |              396   2043   8088
Tot:             360   1553   5770

Compression: 3519,3468,3452
Decompression: 8057,8053,8088
Total: 5788,5760,5770

##########################################################################

Testing clockspeeds again. System health now:

Time        CPU    load %cpu %sys %usr %nice %io %irq   Temp
11:50:23: 2100MHz  3.40  80%   1%  78%   0%   0%   0%  58.9°C

Checking cpufreq OPP (Cortex-A55):

Cpufreq OPP: 2100    Measured: 2100 (2097.352/2095.936/2097.505)
Cpufreq OPP: 2016    Measured: 2015 (2012.350/2013.229/2012.902)
Cpufreq OPP: 1908    Measured: 1910 (1905.674/1904.393/1899.529)
Cpufreq OPP: 1800    Measured: 2290 (2286.666/1790.579/1789.223)
Cpufreq OPP: 1704    Measured: 1535 (1534.905/1813.602/1505.626)
Cpufreq OPP: 1608    Measured: 1235 (1231.203/1604.540/1602.132)
Cpufreq OPP: 1500    Measured: 1495 (1494.285/1495.721/1493.939)
Cpufreq OPP: 1404    Measured: 1240 (1237.753/1238.406/1609.059)
Cpufreq OPP: 1200    Measured: 1200 (1195.014/843.441/1195.415)
Cpufreq OPP: 1000    Measured: 1000 (996.076/869.234/493.933)
Cpufreq OPP:  666    Measured:  665 (664.469/664.102/876.030)
Cpufreq OPP:  500    Measured:  500 (497.677/497.753/497.946)
Cpufreq OPP:  250    Measured:  250 (248.158/247.466/248.325)
Cpufreq OPP:  100    Measured:   50 (49.934/133.738/98.321)

##########################################################################

Thermal source: /sys/class/hwmon/hwmon0/ (cpu_thermal)

System health while running tinymembench:

Time        CPU    load %cpu %sys %usr %nice %io %irq   Temp
11:36:04: 2100MHz  0.92   0%   0%   0%   0%   0%   0%  45.8°C
11:36:44: 2100MHz  0.96  25%   0%  24%   0%   0%   0%  49.4°C
11:37:24: 2100MHz  0.98  25%   0%  24%   0%   0%   0%  50.9°C
11:38:04: 2100MHz  0.99  25%   0%  24%   0%   0%   0%  51.8°C
11:38:44: 2100MHz  1.00  25%   0%  24%   0%   0%   0%  50.1°C
11:39:24: 2100MHz  1.00  25%   0%  25%   0%   0%   0%  49.8°C
11:40:04: 2100MHz  1.00  25%   0%  24%   0%   0%   0%  49.6°C
11:40:45: 2100MHz  1.00  25%   0%  24%   0%   0%   0%  49.8°C
11:41:25: 2100MHz  1.00  25%   0%  24%   0%   0%   0%  50.0°C
11:42:05: 2100MHz  1.00  25%   0%  24%   0%   0%   0%  50.2°C
11:42:45: 2100MHz  1.00  25%   0%  24%   0%   0%   0%  49.9°C
11:43:25: 2100MHz  1.00  25%   0%  24%   0%   0%   0%  50.0°C
11:44:05: 2100MHz  1.00  26%   0%  24%   0%   0%   0%  50.1°C
11:44:45: 2100MHz  1.21  31%   4%  24%   0%   0%   2%  51.4°C

System health while running OpenSSL benchmark:

Time        CPU    load %cpu %sys %usr %nice %io %irq   Temp
11:44:57: 2100MHz  1.16   0%   0%   0%   0%   0%   0%  52.4°C
11:45:13: 2100MHz  1.13  25%   0%  25%   0%   0%   0%  52.3°C
11:45:29: 2100MHz  1.10  25%   0%  24%   0%   0%   0%  50.5°C
11:45:45: 2100MHz  1.08  25%   0%  24%   0%   0%   0%  52.5°C
11:46:01: 2100MHz  1.06  25%   0%  24%   0%   0%   0%  50.7°C
11:46:17: 2100MHz  1.04  25%   0%  24%   0%   0%   0%  50.6°C
11:46:33: 2100MHz  1.03  25%   0%  24%   0%   0%   0%  50.6°C

System health while running 7-zip single core benchmark:

Time        CPU    load %cpu %sys %usr %nice %io %irq   Temp
11:46:45: 2100MHz  1.03   0%   0%   0%   0%   0%   0%  51.7°C
11:46:55: 2100MHz  1.02  25%   0%  24%   0%   0%   0%  51.1°C
11:47:05: 2100MHz  1.02  25%   0%  24%   0%   0%   0%  51.4°C
11:47:15: 2100MHz  1.01  25%   0%  24%   0%   0%   0%  51.0°C
11:47:25: 2100MHz  1.01  25%   0%  24%   0%   0%   0%  51.2°C
11:47:35: 2100MHz  1.01  25%   0%  24%   0%   0%   0%  51.1°C
11:47:45: 2100MHz  1.01  25%   0%  24%   0%   0%   0%  51.2°C

System health while running 7-zip multi core benchmark:

Time        CPU    load %cpu %sys %usr %nice %io %irq   Temp
11:47:54: 2100MHz  1.01   0%   0%   0%   0%   0%   0%  52.2°C
11:48:14: 2100MHz  1.63  81%   0%  80%   0%   0%   0%  55.7°C
11:48:34: 2100MHz  2.18  83%   1%  80%   0%   0%   0%  56.0°C
11:48:58: 2100MHz  2.62  83%   1%  80%   0%   0%   0%  60.3°C
11:49:21: 2100MHz  3.22  86%   1%  84%   0%   0%   0%  61.0°C
11:49:41: 2100MHz  3.17  83%   1%  81%   0%   0%   0%  58.0°C
11:50:02: 2100MHz  3.10  83%   0%  81%   0%   0%   0%  62.6°C
11:50:23: 2100MHz  3.40  80%   1%  78%   0%   0%   0%  58.9°C

##########################################################################

Linux 5.10.102-meson64 (babel) 	03/30/22 	_aarch64_	(4 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           0.13    0.05    0.31    0.04    0.00   99.47

Device             tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
mmcblk1           1.76         1.97        11.17    1999477   11345796
sda               0.61        22.38        24.44   22736634   24831228
zram0             0.00         0.00         0.00       2232          4
zram1             0.02         0.13         0.09     134276      88744

              total        used        free      shared  buff/cache   available
Mem:          3.7Gi       411Mi       2.7Gi        45Mi       627Mi       3.2Gi
Swap:            0B          0B          0B

CPU sysfs topology (clusters, cpufreq members, clockspeeds)
                 cpufreq   min    max
 CPU    cluster  policy   speed  speed   core type
  0        0        0      667    2100   Cortex-A55 / r1p0
  1        0        0      667    2100   Cortex-A55 / r1p0
  2        0        0      667    2100   Cortex-A55 / r1p0
  3        0        0      667    2100   Cortex-A55 / r1p0

Architecture:        aarch64
Byte Order:          Little Endian
CPU(s):              4
On-line CPU(s) list: 0-3
Thread(s) per core:  1
Core(s) per socket:  4
Socket(s):           1
NUMA node(s):        1
Vendor ID:           ARM
Model:               0
Model name:          Cortex-A55
Stepping:            r1p0
CPU max MHz:         2100.0000
CPU min MHz:         100.0000
BogoMIPS:            48.00
L1d cache:           unknown size
L1i cache:           unknown size
L2 cache:            unknown size
NUMA node0 CPU(s):   0-3
Flags:               fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhp cpuid asimdrdm lrcpc dcpop asimddp

SoC guess: Amlogic Meson SM1 (S905X3) Revision 2b:c (10:2)
 Compiler: /usr/bin/gcc (Debian 8.3.0-6/aarch64-linux-gnu)
 Userland: arm64
   Kernel: 5.10.102-meson64/aarch64
           CONFIG_HZ=250
           CONFIG_HZ_250=y
           CONFIG_PREEMPTION=y
           CONFIG_PREEMPT=y
           CONFIG_PREEMPT_COUNT=y
           CONFIG_PREEMPT_NOTIFIERS=y
           CONFIG_PREEMPT_RCU=y
           raid6: neonx8   gen()  2126 MB/s
           raid6: neonx8   xor()  1659 MB/s
           raid6: neonx4   gen()  2191 MB/s
           raid6: neonx4   xor()  1647 MB/s
           raid6: neonx2   gen()  2075 MB/s
           raid6: neonx2   xor()  1509 MB/s
           raid6: neonx1   gen()  1771 MB/s
           raid6: neonx1   xor()  1271 MB/s
           raid6: int64x8  gen()  1517 MB/s
           raid6: int64x8  xor()   781 MB/s
           raid6: int64x4  gen()  1638 MB/s
           raid6: int64x4  xor()   848 MB/s
           raid6: int64x2  gen()  1481 MB/s
           raid6: int64x2  xor()   758 MB/s
           raid6: int64x1  gen()  1125 MB/s
           raid6: int64x1  xor()   568 MB/s
           raid6: using algorithm neonx4 gen() 2191 MB/s
           raid6: .... xor() 1647 MB/s, rmw enabled
           raid6: using neon recovery algorithm
           xor: measuring software checksum speed
           xor: using function: 32regs (2920 MB/sec)

| Hardkernel ODROID-C4 | 2100 MHz | 5.10 | Buster arm64 | 5770 | 189990 | 981940 | 3540 | 5150 | - |