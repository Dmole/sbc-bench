sbc-bench v0.9.3 Khadas VIM3 (Fri, 15 Apr 2022 18:22:18 -0400)

Distributor ID:	Ubuntu
Description:	Ubuntu 20.04.4 LTS
Release:	20.04
Codename:	focal

Armbian release info:
BOARD=khadas-vim3
BOARD_NAME="Khadas VIM3"
BOARDFAMILY=meson-g12b
BUILD_REPOSITORY_URL=https://github.com/armbian/build
BUILD_REPOSITORY_COMMIT=92a1c729d-dirty
VERSION=22.02.1
LINUXFAMILY=meson64
ARCH=arm64
IMAGE_TYPE=stable
BOARD_TYPE=conf
INITRD_ARCH=arm64
KERNEL_IMAGE_TYPE=Image
BRANCH=current

/usr/bin/gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0

Uptime: 18:22:18 up 8 min,  1 user,  load average: 0.40, 0.36, 0.21

Linux 5.10.102-meson64 (khadas-vim3) 	04/15/22 	_aarch64_	(6 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           5.61    0.91    2.70    0.15    0.00   90.64

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk0          33.94      1445.72       141.12         0.00     733109      71560          0
mmcblk0boot0      0.11         0.46         0.00         0.00        232          0          0
mmcblk0boot1      0.11         0.46         0.00         0.00        232          0          0
zram0             1.09         4.37         0.01         0.00       2216          4          0
zram1             0.49         0.89         7.55         0.00        452       3828          0

              total        used        free      shared  buff/cache   available
Mem:          3.7Gi       511Mi       2.9Gi        86Mi       326Mi       3.0Gi
Swap:         1.8Gi          0B       1.8Gi

Filename				Type		Size	Used	Priority
/dev/zram0                             	partition	1933308	0	5

##########################################################################

Checking cpufreq OPP for cpu0-cpu1 (Cortex-A53):

Cpufreq OPP: 2016    Measured: 2015 (2012.651/2009.669/2013.279)
Cpufreq OPP: 1908    Measured: 1905 (1904.932/1900.088/1904.730)
Cpufreq OPP: 1800    Measured: 1795 (1791.103/1797.606/1796.985)
Cpufreq OPP: 1704    Measured: 1705 (1700.688/1698.487/1700.957)
Cpufreq OPP: 1608    Measured: 1605 (1604.859/1605.418/1604.740)
Cpufreq OPP: 1512    Measured: 1500 (1497.230/1496.987/1497.369)
Cpufreq OPP: 1398    Measured: 1395 (1394.477/1394.854/1395.080)
Cpufreq OPP: 1200    Measured: 1200 (1197.397/1198.147/1196.634)
Cpufreq OPP: 1000    Measured: 1000 (996.196/996.472/996.676)
Cpufreq OPP:  667    Measured:  660 (657.314/663.782/661.769)
Cpufreq OPP:  500    Measured:  500 (496.941/496.113/497.695)
Cpufreq OPP:  250    Measured:  250 (245.932/248.303/247.537)
Cpufreq OPP:  100    Measured:  100 (97.801/97.654/97.835)

Checking cpufreq OPP for cpu2-cpu5 (Cortex-A73):

Cpufreq OPP: 2400    Measured: 2400 (2397.661/2397.234/2396.579)
Cpufreq OPP: 2304    Measured: 2305 (2301.420/2301.945/2301.525)
Cpufreq OPP: 2208    Measured: 2210 (2205.544/2205.737/2205.327)
Cpufreq OPP: 2108    Measured: 2100 (2096.873/2097.440/2097.396)
Cpufreq OPP: 2016    Measured: 2015 (2010.796/2013.681/2012.927)
Cpufreq OPP: 1908    Measured: 1910 (1905.607/1905.562/1905.832)
Cpufreq OPP: 1800    Measured: 1800 (1797.546/1797.946/1797.465)
Cpufreq OPP: 1704    Measured: 1705 (1701.387/1701.477/1701.423)
Cpufreq OPP: 1608    Measured: 1610 (1605.179/1605.598/1605.418)
Cpufreq OPP: 1512    Measured: 1500 (1497.490/1497.595/1497.352)
Cpufreq OPP: 1398    Measured: 1400 (1395.366/1396.060/1395.472)
Cpufreq OPP: 1200    Measured: 1200 (1197.563/1197.647/1197.758)
Cpufreq OPP: 1000    Measured: 1000 (997.807/997.458/997.591)
Cpufreq OPP:  667    Measured:  665 (664.890/664.482/664.476)
Cpufreq OPP:  500    Measured:  500 (497.736/497.818/497.847)
Cpufreq OPP:  250    Measured:  250 (247.757/247.981/249.242)
Cpufreq OPP:  100    Measured:  100 (98.852/99.182/99.084)

##########################################################################

Executing benchmark on cpu0 (Cortex-A53):

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   2304.3 MB/s (1.6%)
 C copy backwards (32 byte blocks)                    :   2397.7 MB/s (1.0%)
 C copy backwards (64 byte blocks)                    :   2338.4 MB/s (1.2%)
 C copy                                               :   2323.9 MB/s (1.1%)
 C copy prefetched (32 bytes step)                    :   1727.8 MB/s (5.6%)
 C copy prefetched (64 bytes step)                    :   2060.7 MB/s (5.8%)
 C 2-pass copy                                        :   1944.1 MB/s
 C 2-pass copy prefetched (32 bytes step)             :   1428.7 MB/s
 C 2-pass copy prefetched (64 bytes step)             :   1267.8 MB/s
 C fill                                               :   7915.9 MB/s
 C fill (shuffle within 16 byte blocks)               :   7914.0 MB/s
 C fill (shuffle within 32 byte blocks)               :   7914.1 MB/s
 C fill (shuffle within 64 byte blocks)               :   7919.1 MB/s
 ---
 standard memcpy                                      :   2435.5 MB/s (0.7%)
 standard memset                                      :   7920.6 MB/s
 ---
 NEON LDP/STP copy                                    :   2425.2 MB/s
 NEON LDP/STP copy pldl2strm (32 bytes step)          :   1531.8 MB/s (1.0%)
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   2017.2 MB/s
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   2641.6 MB/s
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   2633.0 MB/s
 NEON LD1/ST1 copy                                    :   2418.1 MB/s (0.7%)
 NEON STP fill                                        :   7919.5 MB/s
 NEON STNP fill                                       :   6523.6 MB/s
 ARM LDP/STP copy                                     :   2429.5 MB/s (0.2%)
 ARM STP fill                                         :   7921.0 MB/s
 ARM STNP fill                                        :   6517.2 MB/s

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :    249.5 MB/s
 NEON LDP/STP 2-pass copy (from framebuffer)          :    280.3 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :     72.9 MB/s
 NEON LD1/ST1 2-pass copy (from framebuffer)          :     75.4 MB/s
 ARM LDP/STP copy (from framebuffer)                  :    136.8 MB/s
 ARM LDP/STP 2-pass copy (from framebuffer)           :    146.1 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    3.4 ns          /     5.8 ns 
    131072 :    5.2 ns          /     8.0 ns 
    262144 :    7.3 ns          /    11.5 ns 
    524288 :   61.9 ns          /    97.9 ns 
   1048576 :   95.4 ns          /   131.4 ns 
   2097152 :  112.9 ns          /   143.2 ns 
   4194304 :  125.7 ns          /   150.9 ns 
   8388608 :  132.4 ns          /   155.0 ns 
  16777216 :  136.7 ns          /   157.9 ns 
  33554432 :  139.5 ns          /   160.1 ns 
  67108864 :  149.9 ns          /   179.7 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    3.4 ns          /     5.8 ns 
    131072 :    5.2 ns          /     8.0 ns 
    262144 :    6.4 ns          /     9.5 ns 
    524288 :   61.9 ns          /    97.8 ns 
   1048576 :   95.4 ns          /   131.3 ns 
   2097152 :  112.4 ns          /   142.7 ns 
   4194304 :  121.0 ns          /   146.9 ns 
   8388608 :  125.3 ns          /   148.6 ns 
  16777216 :  126.2 ns          /   145.3 ns 
  33554432 :  127.4 ns          /   146.4 ns 
  67108864 :  128.3 ns          /   147.9 ns 

Executing benchmark on cpu2 (Cortex-A73):

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   4878.2 MB/s
 C copy backwards (32 byte blocks)                    :   4878.9 MB/s
 C copy backwards (64 byte blocks)                    :   4881.2 MB/s
 C copy                                               :   4841.7 MB/s
 C copy prefetched (32 bytes step)                    :   4845.1 MB/s (0.4%)
 C copy prefetched (64 bytes step)                    :   4845.7 MB/s
 C 2-pass copy                                        :   3203.3 MB/s (0.1%)
 C 2-pass copy prefetched (32 bytes step)             :   3122.7 MB/s (0.5%)
 C 2-pass copy prefetched (64 bytes step)             :   3151.3 MB/s (0.3%)
 C fill                                               :   8241.5 MB/s
 C fill (shuffle within 16 byte blocks)               :   8247.6 MB/s
 C fill (shuffle within 32 byte blocks)               :   8267.8 MB/s (0.2%)
 C fill (shuffle within 64 byte blocks)               :   8182.1 MB/s
 ---
 standard memcpy                                      :   4835.2 MB/s
 standard memset                                      :   8259.5 MB/s (0.2%)
 ---
 NEON LDP/STP copy                                    :   4838.6 MB/s
 NEON LDP/STP copy pldl2strm (32 bytes step)          :   4838.5 MB/s
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   4840.1 MB/s
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   4652.9 MB/s
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   4797.8 MB/s
 NEON LD1/ST1 copy                                    :   4839.6 MB/s
 NEON STP fill                                        :   8266.3 MB/s (0.2%)
 NEON STNP fill                                       :   8264.9 MB/s (0.2%)
 ARM LDP/STP copy                                     :   4839.7 MB/s
 ARM STP fill                                         :   8252.5 MB/s (2.1%)
 ARM STNP fill                                        :   8274.9 MB/s (0.3%)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :    470.7 MB/s (0.4%)
 NEON LDP/STP 2-pass copy (from framebuffer)          :    496.0 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :    476.3 MB/s (0.8%)
 NEON LD1/ST1 2-pass copy (from framebuffer)          :    496.6 MB/s
 ARM LDP/STP copy (from framebuffer)                  :    466.1 MB/s (0.6%)
 ARM LDP/STP 2-pass copy (from framebuffer)           :    488.3 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    4.6 ns          /     7.7 ns 
    131072 :    6.9 ns          /    10.8 ns 
    262144 :    8.6 ns          /    12.1 ns 
    524288 :   10.0 ns          /    12.6 ns 
   1048576 :   19.4 ns          /    29.3 ns 
   2097152 :   73.8 ns          /   110.8 ns 
   4194304 :  104.3 ns          /   139.5 ns 
   8388608 :  122.5 ns          /   151.9 ns 
  16777216 :  132.5 ns          /   157.6 ns 
  33554432 :  138.0 ns          /   160.7 ns 
  67108864 :  141.3 ns          /   162.5 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    4.6 ns          /     7.7 ns 
    131072 :    6.9 ns          /    10.8 ns 
    262144 :    8.1 ns          /    12.1 ns 
    524288 :    8.7 ns          /    12.7 ns 
   1048576 :    9.6 ns          /    13.9 ns 
   2097152 :   71.6 ns          /   109.1 ns 
   4194304 :  101.9 ns          /   137.0 ns 
   8388608 :  115.5 ns          /   143.7 ns 
  16777216 :  122.5 ns          /   146.4 ns 
  33554432 :  126.2 ns          /   148.4 ns 
  67108864 :  129.1 ns          /   150.3 ns 

##########################################################################

Executing benchmark on each cluster individually

OpenSSL 1.1.1f, built on 31 Mar 2020
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes
aes-128-cbc     169409.39k   508887.87k  1000907.26k  1353020.42k  1508616.87k  1518256.13k
aes-128-cbc     405960.21k  1014985.96k  1568167.08k  1806270.81k  1903007.06k  1910243.33k
aes-192-cbc     161829.08k   455116.99k   819235.33k  1044447.91k  1133903.87k  1139250.52k
aes-192-cbc     377949.58k   918138.35k  1315048.87k  1517666.30k  1587609.60k  1592776.02k
aes-256-cbc     157092.58k   418857.69k   710718.04k   874296.32k   937301.33k   940425.22k
aes-256-cbc     365198.96k   838729.02k  1183205.97k  1310858.24k  1362173.95k  1365895.85k

##########################################################################

Executing benchmark single-threaded on cpu0 (Cortex-A53)

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: 64000000 64000000 64000000 - 128000000 - - 1024000000 -

RAM size:    3775 MB,  # CPU hardware threads:   6
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       1167    99   1145   1136  |      21750    99   1867   1857
23:       1153    99   1184   1175  |      21281    99   1852   1842
24:       1137    99   1232   1223  |      20838    99   1839   1829
25:       1130    99   1300   1291  |      20471    99   1832   1822
----------------------------------  | ------------------------------
Avr:              99   1215   1206  |               99   1848   1838
Tot:              99   1532   1522

Executing benchmark single-threaded on cpu2 (Cortex-A73)

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: 64000000 - - - - 256000000 - 1024000000 -

RAM size:    3775 MB,  # CPU hardware threads:   6
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       2028   100   1981   1974  |      31447   100   2691   2685
23:       2008   100   2054   2046  |      30792   100   2671   2665
24:       1978   100   2135   2127  |      30064   100   2646   2639
25:       1952   100   2237   2229  |      29473   100   2629   2623
----------------------------------  | ------------------------------
Avr:             100   2102   2094  |              100   2659   2653
Tot:             100   2381   2374

##########################################################################

Executing benchmark 3 times multi-threaded

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: - - - - - - - 1024000000 -

RAM size:    3775 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       7444   559   1295   7242  |     140903   508   2367  12016
23:       7331   563   1326   7470  |     138001   509   2347  11941
24:       7247   566   1376   7793  |     134965   509   2329  11846
25:       7175   570   1437   8193  |     129848   497   2325  11556
----------------------------------  | ------------------------------
Avr:             565   1358   7674  |              506   2342  11840
Tot:             535   1850   9757

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: 64000000 - - 64000000 128000000 - - - -

RAM size:    3775 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       7389   555   1295   7188  |     139881   508   2349  11929
23:       7278   557   1331   7416  |     137640   507   2347  11910
24:       7258   570   1369   7805  |     135150   509   2332  11862
25:       7094   567   1430   8100  |     132480   508   2319  11790
----------------------------------  | ------------------------------
Avr:             562   1356   7627  |              508   2337  11873
Tot:             535   1847   9750

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,6 CPUs LE)

LE
CPU Freq: - - - 64000000 - - - - -

RAM size:    3775 MB,  # CPU hardware threads:   6
RAM usage:   1323 MB,  # Benchmark threads:      6

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       7532   565   1297   7328  |     140974   508   2365  12022
23:       7316   562   1327   7454  |     137796   508   2346  11923
24:       7198   561   1379   7739  |     134988   509   2329  11848
25:       7131   569   1432   8143  |     132636   509   2320  11804
----------------------------------  | ------------------------------
Avr:             564   1359   7666  |              509   2340  11899
Tot:             536   1849   9783

Compression: 7674,7627,7666
Decompression: 11840,11873,11899
Total: 9757,9750,9783

##########################################################################

Testing clockspeeds again. System health now:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
18:45:09: 2400/2016MHz  5.50  98%   0%  97%   0%   0%   0%  79.2°C

Checking cpufreq OPP for cpu0-cpu1 (Cortex-A53):

Cpufreq OPP: 2016    Measured: 2005 (2002.886/2001.347/1989.776)
Cpufreq OPP: 1908    Measured: 1900 (1895.069/1886.586/1895.425)
Cpufreq OPP: 1800    Measured: 1790 (1789.475/1773.743/1784.450)
Cpufreq OPP: 1704    Measured: 1630 (1628.563/1690.305/1691.495)
Cpufreq OPP: 1608    Measured: 1600 (1597.909/1597.118/1591.351)
Cpufreq OPP: 1512    Measured: 1490 (1489.390/1480.629/1489.493)
Cpufreq OPP: 1398    Measured: 1390 (1388.898/1389.122/1389.481)
Cpufreq OPP: 1200    Measured: 1195 (1193.592/1193.220/1193.302)
Cpufreq OPP: 1000    Measured: 1000 (995.056/995.296/995.620)
Cpufreq OPP:  667    Measured:  665 (660.367/662.611/663.089)
Cpufreq OPP:  500    Measured:  490 (488.112/497.145/496.404)
Cpufreq OPP:  250    Measured:  250 (246.812/248.041/243.705)
Cpufreq OPP:  100    Measured:   95 (92.171/96.354/98.111)

Checking cpufreq OPP for cpu2-cpu5 (Cortex-A73):

Cpufreq OPP: 2400    Measured: 1525 (1523.489/2009.854/2392.260)
Cpufreq OPP: 2304    Measured: 1510 (1507.860/2296.622/2300.418)
Cpufreq OPP: 2208    Measured: 1205 (1201.494/2200.250/2203.573)
Cpufreq OPP: 2108    Measured: 2095 (2092.217/2086.440/2094.185)
Cpufreq OPP: 2016    Measured: 2010 (2009.669/2011.648/2008.244)
Cpufreq OPP: 1908    Measured: 1900 (1897.973/1901.631/1903.438)
Cpufreq OPP: 1800    Measured: 1795 (1794.428/1794.428/1796.405)
Cpufreq OPP: 1704    Measured: 1705 (1700.079/1700.473/1699.775)
Cpufreq OPP: 1608    Measured: 1605 (1603.982/1605.099/1604.281)
Cpufreq OPP: 1512    Measured: 1495 (1493.541/1491.092/1492.281)
Cpufreq OPP: 1398    Measured: 1390 (1385.470/1391.082/772.554)
Cpufreq OPP: 1200    Measured: 1120 (1117.659/1186.218/812.456)
Cpufreq OPP: 1000    Measured: 1000 (995.128/994.841/996.532)
Cpufreq OPP:  667    Measured:  665 (662.498/663.775/663.316)
Cpufreq OPP:  500    Measured:  500 (497.250/497.367/496.789)
Cpufreq OPP:  250    Measured:  250 (247.970/248.007/247.723)
Cpufreq OPP:  100    Measured:  100 (98.145/98.131/97.291)

##########################################################################

Thermal source: /sys/class/hwmon/hwmon0/ (cpu_thermal)

System health while running tinymembench:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
18:22:40: 2400/2016MHz  0.49   9%   2%   5%   0%   0%   0%  39.3°C
18:24:00: 2400/2016MHz  0.92  17%   0%  16%   1%   0%   0%  42.5°C
18:25:21: 2400/2016MHz  0.98  16%   0%  16%   0%   0%   0%  41.1°C
18:26:41: 2400/2016MHz  1.04  17%   0%  16%   0%   0%   0%  41.0°C
18:28:01: 2400/2016MHz  1.01  16%   0%  16%   0%   0%   0%  40.9°C
18:29:21: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  41.1°C
18:30:41: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  48.4°C
18:32:01: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  50.2°C
18:33:21: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  45.9°C
18:34:41: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  46.0°C
18:36:01: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  45.8°C
18:37:21: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  45.9°C

System health while running OpenSSL benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
18:37:33: 2400/2016MHz  1.00  14%   0%  12%   0%   0%   0%  47.1°C
18:37:49: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  44.4°C
18:38:05: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  48.8°C
18:38:21: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  44.7°C
18:38:37: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  49.9°C
18:38:53: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  45.1°C
18:39:09: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  50.1°C

System health while running 7-zip single core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
18:39:21: 2400/2016MHz  1.00  14%   0%  12%   0%   0%   0%  51.8°C
18:39:31: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  45.3°C
18:39:41: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  44.7°C
18:39:51: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  44.6°C
18:40:01: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  44.6°C
18:40:12: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  44.5°C
18:40:22: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  44.4°C
18:40:32: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  44.5°C
18:40:42: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  44.3°C
18:40:52: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  44.3°C
18:41:02: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  46.4°C
18:41:12: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  48.1°C
18:41:22: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  48.3°C
18:41:32: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  48.1°C
18:41:42: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  48.5°C
18:41:52: 2400/2016MHz  1.00  16%   0%  16%   0%   0%   0%  48.4°C

System health while running 7-zip multi core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
18:42:00: 2400/2016MHz  1.00  14%   0%  13%   0%   0%   0%  50.7°C
18:42:13: 2400/2016MHz  1.62  93%   0%  92%   0%   0%   0%  74.7°C
18:42:25: 2400/2016MHz  2.73  86%   0%  85%   0%   0%   0%  76.8°C
18:42:38: 2400/2016MHz  3.09  83%   0%  82%   0%   0%   0%  75.8°C
18:42:49: 2400/2016MHz  3.59  81%   0%  80%   0%   0%   0%  70.4°C
18:43:01: 2400/2016MHz  4.04  98%   0%  97%   0%   0%   0%  79.1°C
18:43:14: 2400/2016MHz  4.12  87%   1%  85%   0%   0%   0%  80.0°C
18:43:28: 2400/2016MHz  4.31  88%   0%  87%   0%   0%   0%  79.6°C
18:43:41: 2400/2016MHz  4.75  85%   0%  84%   0%   0%   0%  78.4°C
18:43:53: 2400/2016MHz  4.70  82%   0%  80%   0%   0%   0%  72.4°C
18:44:06: 2400/2016MHz  5.13  97%   0%  96%   0%   0%   0%  79.9°C
18:44:19: 2400/2016MHz  5.05  88%   0%  87%   0%   0%   0%  81.6°C
18:44:32: 2400/2016MHz  5.33  87%   0%  87%   0%   0%   0%  79.7°C
18:44:45: 2400/2016MHz  5.30  83%   0%  82%   0%   0%   0%  76.6°C
18:44:56: 2400/2016MHz  5.22  81%   0%  80%   0%   0%   0%  71.2°C
18:45:09: 2400/2016MHz  5.50  98%   0%  97%   0%   0%   0%  79.2°C

##########################################################################

Linux 5.10.102-meson64 (khadas-vim3) 	04/15/22 	_aarch64_	(6 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          21.50    0.29    0.99    0.04    0.00   77.18

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk0           9.59       394.52        66.47         0.00     750653     126480          0
mmcblk0boot0      0.03         0.12         0.00         0.00        232          0          0
mmcblk0boot1      0.03         0.12         0.00         0.00        232          0          0
zram0             0.29         1.16         0.00         0.00       2216          4          0
zram1             0.16         0.24         2.14         0.00        464       4064          0

              total        used        free      shared  buff/cache   available
Mem:          3.7Gi       833Mi       2.5Gi        89Mi       348Mi       2.7Gi
Swap:         1.8Gi          0B       1.8Gi

Filename				Type		Size	Used	Priority
/dev/zram0                             	partition	1933308	0	5

CPU sysfs topology (clusters, cpufreq members, clockspeeds)
                 cpufreq   min    max
 CPU    cluster  policy   speed  speed   core type
  0        0        0      500    1536   Cortex-A53 / r0p4
  1        0        0      500    1536   Cortex-A53 / r0p4
  2        1        2      500    1536   Cortex-A73 / r0p2
  3        1        2      500    1536   Cortex-A73 / r0p2
  4        1        2      500    1536   Cortex-A73 / r0p2
  5        1        2      500    1536   Cortex-A73 / r0p2

Architecture:                    aarch64
CPU op-mode(s):                  32-bit, 64-bit
Byte Order:                      Little Endian
CPU(s):                          6
On-line CPU(s) list:             0-5
Thread(s) per core:              1
Core(s) per socket:              3
Socket(s):                       2
NUMA node(s):                    1
Vendor ID:                       ARM
Model:                           4
Model name:                      Cortex-A53
Stepping:                        r0p4
CPU max MHz:                     2400.0000
CPU min MHz:                     100.0000
BogoMIPS:                        48.00
NUMA node0 CPU(s):               0-5
Vulnerability Itlb multihit:     Not affected
Vulnerability L1tf:              Not affected
Vulnerability Mds:               Not affected
Vulnerability Meltdown:          Not affected
Vulnerability Spec store bypass: Vulnerable
Vulnerability Spectre v1:        Mitigation; __user pointer sanitization
Vulnerability Spectre v2:        Vulnerable
Vulnerability Srbds:             Not affected
Vulnerability Tsx async abort:   Not affected
Flags:                           fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid

SoC guess: Amlogic Meson G12B (A311D) Revision 29:b (10:2)
 Compiler: /usr/bin/gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1/aarch64-linux-gnu)
 Userland: arm64
   Kernel: 5.10.102-meson64/aarch64
           CONFIG_HZ=250
           CONFIG_HZ_250=y
           CONFIG_PREEMPTION=y
           CONFIG_PREEMPT=y
           CONFIG_PREEMPT_COUNT=y
           CONFIG_PREEMPT_NOTIFIERS=y
           CONFIG_PREEMPT_RCU=y
           raid6: neonx8   gen()  2786 MB/s
           raid6: neonx8   xor()  2041 MB/s
           raid6: neonx4   gen()  3004 MB/s
           raid6: neonx4   xor()  2329 MB/s
           raid6: neonx2   gen()  2545 MB/s
           raid6: neonx2   xor()  2199 MB/s
           raid6: neonx1   gen()  1961 MB/s
           raid6: neonx1   xor()  1719 MB/s
           raid6: int64x8  gen()  1380 MB/s
           raid6: int64x8  xor()   735 MB/s
           raid6: int64x4  gen()  1462 MB/s
           raid6: int64x4  xor()   733 MB/s
           raid6: int64x2  gen()  1361 MB/s
           raid6: int64x2  xor()   619 MB/s
           raid6: int64x1  gen()  1126 MB/s
           raid6: int64x1  xor()   462 MB/s
           raid6: using algorithm neonx4 gen() 3004 MB/s
           raid6: .... xor() 2329 MB/s, rmw enabled
           raid6: using neon recovery algorithm
           xor: measuring software checksum speed
           xor: using function: 32regs (4024 MB/sec)

| Khadas VIM3 | 2400/2016 MHz | 5.10 | Focal arm64 | 9760 | 287680 | 1153160 | 4840 | 8260 | - |