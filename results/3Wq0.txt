sbc-bench v0.9.3 Khadas VIM4 (Thu, 28 Apr 2022 04:43:42 +0800)

Distributor ID:	Ubuntu
Description:	Ubuntu 22.04 LTS
Release:	22.04
Codename:	jammy
Architecture:	arm64

/usr/bin/gcc (Ubuntu 11.2.0-19ubuntu1) 11.2.0

Uptime: 04:43:42 up  3:51,  3 users,  load average: 3.17, 2.74, 2.55

Linux 5.4.125 (Khadas) 	04/28/22 	_aarch64_	(8 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           5.47    0.04    0.66    0.09    0.00   93.75

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk0          14.37       829.21       242.60         0.00   11526489    3372328          0
mmcblk0boot0      0.00         0.01         0.00         0.00        116          0          0
mmcblk0boot1      0.00         0.01         0.00         0.00        116          0          0
sda               0.12         1.98         0.00         0.00      27492          0          0
sdb               1.46        92.22         0.00         0.00    1281925          1          0
zram1             0.02         0.08         0.00         0.00       1176          4          0
zram2             0.02         0.08         0.00         0.00       1176          4          0
zram3             0.02         0.08         0.00         0.00       1176          4          0
zram4             0.02         0.08         0.00         0.00       1176          4          0

               total        used        free      shared  buff/cache   available
Mem:           7.8Gi       1.4Gi       5.8Gi        74Mi       515Mi       6.2Gi
Swap:          1.0Gi          0B       1.0Gi

Filename				Type		Size		Used		Priority
/dev/zram1                              partition	262140		0		5
/dev/zram2                              partition	262140		0		5
/dev/zram3                              partition	262140		0		5
/dev/zram4                              partition	262140		0		5

##########################################################################

Checking cpufreq OPP for cpu0-cpu3 (Cortex-A73):

Cpufreq OPP: 2208    Measured: 2200 (2196.540/2187.348/2200.325)
Cpufreq OPP: 2016    Measured: 2010 (2006.846/2008.494/2007.719)
Cpufreq OPP: 1896    Measured: 1890 (1888.042/1873.665/1890.209)
Cpufreq OPP: 1800    Measured: 1785 (1783.365/1792.316/1792.455)
Cpufreq OPP: 1704    Measured: 1700 (1697.040/1696.844/1690.128)
Cpufreq OPP: 1608    Measured: 1600 (1599.789/1599.651/1600.325)
Cpufreq OPP: 1512    Measured: 1490 (1487.982/1502.072/1504.697)
Cpufreq OPP: 1392    Measured: 1390 (1386.035/1379.063/1385.143)
Cpufreq OPP: 1200    Measured: 1195 (1193.399/1193.923/1194.752)
Cpufreq OPP: 1000    Measured:  995 (992.725/984.225/985.210)
Cpufreq OPP:  666    Measured:  670 (665.926/660.917/660.777)
Cpufreq OPP:  500    Measured:  495 (493.993/495.625/488.879)

Checking cpufreq OPP for cpu4-cpu7 (Cortex-A53):

Cpufreq OPP: 2016    Measured: 2015 (2012.350/2012.174/2012.476)
Cpufreq OPP: 1896    Measured: 1895 (1892.292/1892.137/1891.937)
Cpufreq OPP: 1800    Measured: 1800 (1796.965/1796.365/1796.685)
Cpufreq OPP: 1704    Measured: 1705 (1700.491/1699.775/1700.724)
Cpufreq OPP: 1608    Measured: 1605 (1604.042/1605.019/1605.598)
Cpufreq OPP: 1512    Measured: 1510 (1508.706/1507.948/1508.864)
Cpufreq OPP: 1392    Measured: 1390 (1388.509/1388.405/1388.868)
Cpufreq OPP: 1200    Measured: 1200 (1195.830/1197.258/1196.551)
Cpufreq OPP: 1000    Measured: 1000 (996.869/998.290/998.338)
Cpufreq OPP:  666    Measured:  665 (663.242/663.302/664.069)
Cpufreq OPP:  500    Measured:  500 (496.515/496.923/496.882)

##########################################################################

Hardware sensors:

hevc_thermal-virtual-0
temp1:        +45.2 C  (crit = +110.0 C)

gpu_thermal-virtual-0
temp1:        +44.6 C  (crit = +110.0 C)

soc_thermal-virtual-0
temp1:        +46.1 C  (crit = +110.0 C)

vpu_thermal-virtual-0
temp1:        +45.3 C  (crit = +110.0 C)

nna_thermal-virtual-0
temp1:        +44.8 C  (crit = +110.0 C)

a53_thermal-virtual-0
temp1:        +45.0 C  (crit = +110.0 C)

##########################################################################

Executing benchmark on cpu0 (Cortex-A73):

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   7792.5 MB/s (0.6%)
 C copy backwards (32 byte blocks)                    :   7777.8 MB/s
 C copy backwards (64 byte blocks)                    :   7812.0 MB/s (0.2%)
 C copy                                               :   7825.9 MB/s (0.3%)
 C copy prefetched (32 bytes step)                    :   7587.9 MB/s (0.5%)
 C copy prefetched (64 bytes step)                    :   7636.7 MB/s (0.2%)
 C 2-pass copy                                        :   4213.9 MB/s (0.1%)
 C 2-pass copy prefetched (32 bytes step)             :   3790.5 MB/s (0.2%)
 C 2-pass copy prefetched (64 bytes step)             :   3842.7 MB/s (0.3%)
 C fill                                               :  11590.6 MB/s
 C fill (shuffle within 16 byte blocks)               :  11589.1 MB/s
 C fill (shuffle within 32 byte blocks)               :  11601.2 MB/s
 C fill (shuffle within 64 byte blocks)               :  11589.2 MB/s (0.8%)
 ---
 standard memcpy                                      :   7803.0 MB/s (0.3%)
 standard memset                                      :  11588.5 MB/s
 ---
 NEON LDP/STP copy                                    :   7822.6 MB/s (0.4%)
 NEON LDP/STP copy pldl2strm (32 bytes step)          :   7822.6 MB/s (0.2%)
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   7822.3 MB/s (0.5%)
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   7576.5 MB/s (0.5%)
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   7708.3 MB/s (0.5%)
 NEON LD1/ST1 copy                                    :   7816.4 MB/s (0.2%)
 NEON STP fill                                        :  11599.7 MB/s
 NEON STNP fill                                       :  11589.1 MB/s
 ARM LDP/STP copy                                     :   7815.9 MB/s (0.2%)
 ARM STP fill                                         :  11591.6 MB/s
 ARM STNP fill                                        :  11591.5 MB/s

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :   7971.2 MB/s (0.2%)
 NEON LDP/STP 2-pass copy (from framebuffer)          :   4402.1 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :   7965.7 MB/s (0.2%)
 NEON LD1/ST1 2-pass copy (from framebuffer)          :   4446.7 MB/s
 ARM LDP/STP copy (from framebuffer)                  :   7954.9 MB/s (0.3%)
 ARM LDP/STP 2-pass copy (from framebuffer)           :   4474.3 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    5.0 ns          /     8.4 ns 
    131072 :    7.5 ns          /    11.7 ns 
    262144 :    9.4 ns          /    13.2 ns 
    524288 :   10.9 ns          /    13.7 ns 
   1048576 :   22.8 ns          /    33.1 ns 
   2097152 :   76.3 ns          /   111.8 ns 
   4194304 :  106.4 ns          /   139.6 ns 
   8388608 :  125.0 ns          /   153.5 ns 
  16777216 :  135.2 ns          /   159.2 ns 
  33554432 :  141.4 ns          /   163.0 ns 
  67108864 :  145.2 ns          /   165.3 ns 

Executing benchmark on cpu4 (Cortex-A53):

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   2151.8 MB/s
 C copy backwards (32 byte blocks)                    :   2165.4 MB/s (0.2%)
 C copy backwards (64 byte blocks)                    :   2174.1 MB/s (0.3%)
 C copy                                               :   2178.8 MB/s
 C copy prefetched (32 bytes step)                    :   1481.5 MB/s
 C copy prefetched (64 bytes step)                    :   1687.7 MB/s (0.1%)
 C 2-pass copy                                        :   1839.4 MB/s
 C 2-pass copy prefetched (32 bytes step)             :   1266.6 MB/s
 C 2-pass copy prefetched (64 bytes step)             :   1080.9 MB/s
 C fill                                               :  10797.9 MB/s (0.2%)
 C fill (shuffle within 16 byte blocks)               :  10800.0 MB/s
 C fill (shuffle within 32 byte blocks)               :  10796.8 MB/s (0.2%)
 C fill (shuffle within 64 byte blocks)               :  10792.5 MB/s
 ---
 standard memcpy                                      :   2187.0 MB/s
 standard memset                                      :  10879.8 MB/s (0.3%)
 ---
 NEON LDP/STP copy                                    :   2152.3 MB/s (0.1%)
 NEON LDP/STP copy pldl2strm (32 bytes step)          :   1331.9 MB/s (0.5%)
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   1714.3 MB/s (0.1%)
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   2636.9 MB/s
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   2638.1 MB/s
 NEON LD1/ST1 copy                                    :   2172.6 MB/s
 NEON STP fill                                        :  10876.1 MB/s (0.2%)
 NEON STNP fill                                       :   8437.8 MB/s
 ARM LDP/STP copy                                     :   2151.5 MB/s (0.3%)
 ARM STP fill                                         :  10868.7 MB/s (0.2%)
 ARM STNP fill                                        :   8451.7 MB/s (0.2%)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :   2232.0 MB/s (0.2%)
 NEON LDP/STP 2-pass copy (from framebuffer)          :   1856.2 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :   2234.0 MB/s
 NEON LD1/ST1 2-pass copy (from framebuffer)          :   1823.3 MB/s
 ARM LDP/STP copy (from framebuffer)                  :   2234.0 MB/s (0.2%)
 ARM LDP/STP 2-pass copy (from framebuffer)           :   1856.8 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    3.4 ns          /     5.7 ns 
    131072 :    5.2 ns          /     8.0 ns 
    262144 :    6.1 ns          /     8.9 ns 
    524288 :    6.7 ns          /     9.4 ns 
   1048576 :   16.4 ns          /    30.1 ns 
   2097152 :   70.9 ns          /   106.7 ns 
   4194304 :  106.2 ns          /   140.5 ns 
   8388608 :  123.8 ns          /   152.6 ns 
  16777216 :  134.0 ns          /   159.1 ns 
  33554432 :  140.2 ns          /   162.6 ns 
  67108864 :  143.7 ns          /   164.5 ns 

##########################################################################

Executing benchmark on each cluster individually

OpenSSL 3.0.2, built on 15 Mar 2022 (Library: OpenSSL 3.0.2 15 Mar 2022)
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes
aes-128-cbc     339708.40k   878890.22k  1406269.95k  1645301.08k  1743978.50k  1749740.20k
aes-128-cbc     153025.63k   471224.77k   964472.83k  1336428.54k  1504264.19k  1517546.15k
aes-192-cbc     318173.49k   784325.12k  1177613.40k  1371175.59k  1454077.27k  1459000.66k
aes-192-cbc     146649.14k   423697.64k   793504.17k  1033899.01k  1133420.54k  1141140.14k
aes-256-cbc     308330.22k   722490.07k  1037270.10k  1190424.92k  1248291.50k  1252070.74k
aes-256-cbc     142762.02k   392077.46k   691311.45k   866953.56k   935813.12k   941036.89k

##########################################################################

Executing benchmark single-threaded on cpu0 (Cortex-A73)

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,8 CPUs LE)

LE
CPU Freq: 64000000 32000000 32000000 64000000 128000000 - 512000000 - 2048000000

RAM size:    7951 MB,  # CPU hardware threads:   8
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       1812    99   1781   1763  |      28415    99   2451   2426
23:       1712    99   1763   1745  |      27992    99   2441   2423
24:       1615    99   1754   1737  |      27298    99   2416   2397
25:       1494    99   1723   1706  |      26606    99   2387   2368
----------------------------------  | ------------------------------
Avr:              99   1755   1738  |               99   2424   2403
Tot:              99   2089   2071

Executing benchmark single-threaded on cpu4 (Cortex-A53)

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,8 CPUs LE)

LE
CPU Freq: 32000000 64000000 32000000 32000000 64000000 - - 1024000000 2048000000

RAM size:    7951 MB,  # CPU hardware threads:   8
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       1228   100   1199   1195  |      22279   100   1907   1902
23:       1166   100   1192   1188  |      21828   100   1894   1889
24:       1119   100   1208   1203  |      21337   100   1877   1873
25:       1063   100   1219   1214  |      20758   100   1852   1848
----------------------------------  | ------------------------------
Avr:             100   1205   1200  |              100   1882   1878
Tot:             100   1543   1539

##########################################################################

Executing benchmark 3 times multi-threaded

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,8 CPUs LE)

LE
CPU Freq: 64000000 32000000 32000000 64000000 - 256000000 256000000 512000000 2048000000

RAM size:    7951 MB,  # CPU hardware threads:   8
RAM usage:   1765 MB,  # Benchmark threads:      8

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       9560   758   1227   9301  |     180432   719   2140  15390
23:       8760   739   1208   8926  |     175693   718   2119  15204
24:       8440   754   1204   9075  |     171706   719   2096  15070
25:       8001   746   1224   9135  |     166943   720   2063  14857
----------------------------------  | ------------------------------
Avr:             749   1216   9109  |              719   2104  15130
Tot:             734   1660  12120

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,8 CPUs LE)

LE
CPU Freq: 32000000 64000000 64000000 64000000 - - - - -

RAM size:    7951 MB,  # CPU hardware threads:   8
RAM usage:   1765 MB,  # Benchmark threads:      8

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       9377   745   1225   9123  |     180579   720   2139  15403
23:       8608   727   1206   8771  |     176536   721   2120  15277
24:       8343   741   1211   8970  |     172331   722   2096  15125
25:       8147   769   1209   9302  |     167226   721   2063  14882
----------------------------------  | ------------------------------
Avr:             746   1213   9042  |              721   2104  15172
Tot:             733   1659  12107

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,8 CPUs LE)

LE
CPU Freq: 64000000 - - - - - - - -

RAM size:    7951 MB,  # CPU hardware threads:   8
RAM usage:   1765 MB,  # Benchmark threads:      8

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       9561   761   1223   9301  |     180516   720   2139  15397
23:       8542   723   1204   8704  |     176662   721   2120  15288
24:       8321   739   1211   8947  |     171605   719   2096  15062
25:       7965   745   1220   9095  |     167402   722   2063  14898
----------------------------------  | ------------------------------
Avr:             742   1214   9012  |              720   2105  15161
Tot:             731   1659  12086

Compression: 9109,9042,9012
Decompression: 15130,15172,15161
Total: 12120,12107,12086

##########################################################################

Testing clockspeeds again. System health now:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
05:02:53: 2208/2016MHz  9.89  91%   1%  90%   0%   0%   0%  52.3°C

Checking cpufreq OPP for cpu0-cpu3 (Cortex-A73):

Cpufreq OPP: 2208    Measured: 2215 (2211.491/2200.781/2196.636)
Cpufreq OPP: 2016    Measured: 2010 (2008.444/2008.619/1997.162)
Cpufreq OPP: 1896    Measured: 1890 (1887.490/1888.484/1882.295)
Cpufreq OPP: 1800    Measured: 2010 (2006.078/1784.239/1786.052)
Cpufreq OPP: 1704    Measured: 1690 (1685.944/1665.349/1680.100)
Cpufreq OPP: 1608    Measured: 1590 (1585.645/1591.116/1606.517)
Cpufreq OPP: 1512    Measured: 1495 (1490.249/1499.351/1394.191)
Cpufreq OPP: 1392    Measured: 1375 (1372.234/1351.849/1368.468)
Cpufreq OPP: 1200    Measured: 1050 (1047.039/1184.124/1184.613)
Cpufreq OPP: 1000    Measured:  990 (989.895/987.589/979.733)
Cpufreq OPP:  666    Measured:  655 (654.319/658.072/656.137)
Cpufreq OPP:  500    Measured:  495 (491.600/490.148/491.012)

Checking cpufreq OPP for cpu4-cpu7 (Cortex-A53):

Cpufreq OPP: 2016    Measured: 2015 (2010.220/2009.744/2011.422)
Cpufreq OPP: 1896    Measured: 1890 (1887.932/1888.948/1888.440)
Cpufreq OPP: 1800    Measured: 1470 (1465.477/948.972/1794.608)
Cpufreq OPP: 1704    Measured: 1825 (1820.798/984.720/1696.969)
Cpufreq OPP: 1608    Measured: 1605 (1600.999/1686.038/1604.301)
Cpufreq OPP: 1512    Measured: 1510 (1505.592/1506.541/1506.259)
Cpufreq OPP: 1392    Measured: 1390 (1387.435/1384.371/1390.064)
Cpufreq OPP: 1200    Measured: 1200 (1197.788/1199.114/430.815)
Cpufreq OPP: 1000    Measured: 1000 (995.380/996.376/995.308)
Cpufreq OPP:  666    Measured:  665 (663.143/664.309/662.870)
Cpufreq OPP:  500    Measured:  365 (360.046/496.311/496.428)

##########################################################################

Hardware sensors:

hevc_thermal-virtual-0
temp1:        +42.7 C  (crit = +110.0 C)

gpu_thermal-virtual-0
temp1:        +44.0 C  (crit = +110.0 C)

soc_thermal-virtual-0
temp1:        +51.3 C  (crit = +110.0 C)

vpu_thermal-virtual-0
temp1:        +43.3 C  (crit = +110.0 C)

nna_thermal-virtual-0
temp1:        +43.5 C  (crit = +110.0 C)

a53_thermal-virtual-0
temp1:        +44.8 C  (crit = +110.0 C)

##########################################################################

Thermal source: /sys/devices/virtual/thermal/thermal_zone0/ (soc_thermal)

System health while running tinymembench:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
04:43:59: 2208/2016MHz  3.12   6%   0%   5%   0%   0%   0%  47.6°C
04:45:19: 2208/2016MHz  3.20  13%   0%  12%   0%   0%   0%  52.7°C
04:46:39: 2208/2016MHz  3.20  12%   0%  12%   0%   0%   0%  46.0°C
04:47:59: 2208/2016MHz  3.13  12%   0%  12%   0%   0%   0%  50.5°C
04:49:19: 2208/2016MHz  3.03  12%   0%  12%   0%   0%   0%  48.6°C
04:50:39: 2208/2016MHz  3.03  12%   0%  12%   0%   0%   0%  48.3°C
04:51:59: 2208/2016MHz  3.01  12%   0%  12%   0%   0%   0%  47.2°C
04:53:19: 2208/2016MHz  3.00  13%   0%  12%   0%   0%   0%  51.2°C
04:54:39: 2208/2016MHz  3.00  12%   0%  12%   0%   0%   0%  49.1°C

System health while running OpenSSL benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
04:54:41: 2208/2016MHz  3.00   6%   0%   5%   0%   0%   0%  50.5°C
04:54:57: 2208/2016MHz  3.00  12%   0%  12%   0%   0%   0%  52.3°C
04:55:13: 2208/2016MHz  3.00  12%   0%  12%   0%   0%   0%  46.4°C
04:55:29: 2208/2016MHz  3.00  12%   0%  12%   0%   0%   0%  47.9°C
04:55:46: 2208/2016MHz  3.07  12%   0%  12%   0%   0%   0%  46.5°C
04:56:02: 2208/2016MHz  3.05  14%   0%  12%   0%   0%   0%  49.9°C
04:56:18: 2208/2016MHz  3.11  13%   0%  12%   0%   0%   0%  44.5°C

System health while running 7-zip single core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
04:56:30: 2208/2016MHz  3.08   6%   0%   5%   0%   0%   0%  44.6°C
04:56:39: 2208/2016MHz  3.07  12%   0%  12%   0%   0%   0%  46.3°C
04:56:48: 2208/2016MHz  3.14  13%   0%  12%   0%   0%   0%  47.2°C
04:56:57: 2208/2016MHz  3.12  12%   0%  12%   0%   0%   0%  48.0°C
04:57:06: 2208/2016MHz  3.10  12%   0%  12%   0%   0%   0%  48.5°C
04:57:15: 2208/2016MHz  3.09  12%   0%  12%   0%   0%   0%  49.4°C
04:57:24: 2208/2016MHz  3.07  12%   0%  12%   0%   0%   0%  49.8°C
04:57:33: 2208/2016MHz  3.07  12%   0%  12%   0%   0%   0%  49.7°C
04:57:42: 2208/2016MHz  3.13  12%   0%  12%   0%   0%   0%  48.3°C
04:57:51: 2208/2016MHz  3.11  12%   0%  12%   0%   0%   0%  45.1°C
04:58:00: 2208/2016MHz  3.09  12%   0%  12%   0%   0%   0%  43.6°C
04:58:09: 2208/2016MHz  3.15  13%   0%  12%   0%   0%   0%  44.5°C
04:58:18: 2208/2016MHz  3.14  12%   0%  12%   0%   0%   0%  45.2°C
04:58:27: 2208/2016MHz  3.12  12%   0%  12%   0%   0%   0%  46.0°C
04:58:36: 2208/2016MHz  3.10  12%   0%  12%   0%   0%   0%  46.5°C
04:58:45: 2208/2016MHz  3.08  12%   0%  12%   0%   0%   0%  47.2°C
04:58:54: 2208/2016MHz  3.07  12%   0%  12%   0%   0%   0%  47.7°C
04:59:03: 2208/2016MHz  3.06  12%   0%  12%   0%   0%   0%  48.2°C
04:59:12: 2208/2016MHz  3.05  12%   0%  12%   0%   0%   0%  48.9°C
04:59:21: 2208/2016MHz  3.05  12%   0%  12%   0%   0%   0%  48.9°C

System health while running 7-zip multi core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
04:59:22: 2208/2016MHz  3.05   6%   0%   5%   0%   0%   0%  50.0°C
04:59:33: 2208/2016MHz  3.76  81%   0%  80%   0%   0%   0%  61.0°C
04:59:44: 2208/2016MHz  4.69  87%   0%  86%   0%   0%   0%  58.3°C
04:59:54: 2208/2016MHz  5.59  86%   0%  85%   0%   0%   0%  55.6°C
05:00:05: 2208/2016MHz  6.34  97%   1%  95%   0%   0%   0%  55.2°C
05:00:16: 2208/2016MHz  6.55  81%   1%  79%   0%   0%   0%  53.0°C
05:00:26: 2208/2016MHz  7.31  92%   1%  90%   0%   0%   0%  49.2°C
05:00:36: 2208/2016MHz  7.40  88%   0%  87%   0%   0%   0%  52.6°C
05:00:47: 2208/2016MHz  7.87  97%   0%  96%   0%   0%   0%  54.2°C
05:00:57: 2208/2016MHz  7.91  87%   0%  85%   0%   0%   0%  54.0°C
05:01:08: 2208/2016MHz  8.39  86%   1%  85%   0%   0%   0%  51.3°C
05:01:18: 2208/2016MHz  8.64  90%   0%  88%   0%   0%   0%  52.8°C
05:01:29: 2208/2016MHz  8.71  86%   2%  83%   0%   0%   0%  51.4°C
05:01:39: 2208/2016MHz  9.41  96%   1%  94%   0%   0%   0%  52.9°C
05:01:50: 2208/2016MHz  9.37  90%   0%  88%   0%   0%   0%  52.4°C
05:02:01: 2208/2016MHz  8.90  90%   0%  89%   0%   0%   0%  50.5°C
05:02:11: 2208/2016MHz  9.07  92%   0%  91%   0%   0%   0%  52.4°C
05:02:21: 2208/2016MHz  9.46  86%   1%  83%   0%   0%   0%  52.0°C
05:02:32: 2208/2016MHz  9.06  81%   0%  80%   0%   0%   0%  51.0°C
05:02:43: 2208/2016MHz  9.43  99%   1%  97%   0%   0%   0%  50.0°C
05:02:53: 2208/2016MHz  9.89  91%   1%  90%   0%   0%   0%  52.3°C

##########################################################################

dmesg output while running the benchmarks:

[14473.040627] [drm] am_meson_crtc_atomic_flush color_mgmt_changed!
[14473.040640] [drm] am_meson_crtc_atomic_flush Set GAMMA
[14488.211364] [drm] am_meson_crtc_atomic_flush color_mgmt_changed!
[14488.211378] [drm] am_meson_crtc_atomic_flush Set GAMMA

##########################################################################

Linux 5.4.125 (Khadas) 	04/28/22 	_aarch64_	(8 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           7.17    0.04    0.65    0.08    0.00   92.06

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk0          13.53       774.80       231.55         0.00   11676701    3489532          0
mmcblk0boot0      0.00         0.01         0.00         0.00        116          0          0
mmcblk0boot1      0.00         0.01         0.00         0.00        116          0          0
sda               0.11         1.82         0.00         0.00      27492          0          0
sdb               1.35        85.06         0.00         0.00    1281925          1          0
zram1             0.02         0.08         0.00         0.00       1176          4          0
zram2             0.02         0.08         0.00         0.00       1176          4          0
zram3             0.02         0.08         0.00         0.00       1176          4          0
zram4             0.02         0.08         0.00         0.00       1176          4          0

               total        used        free      shared  buff/cache   available
Mem:           7.8Gi       1.5Gi       5.5Gi       211Mi       809Mi       6.0Gi
Swap:          1.0Gi          0B       1.0Gi

Filename				Type		Size		Used		Priority
/dev/zram1                              partition	262140		0		5
/dev/zram2                              partition	262140		0		5
/dev/zram3                              partition	262140		0		5
/dev/zram4                              partition	262140		0		5

CPU sysfs topology (clusters, cpufreq members, clockspeeds)
                 cpufreq   min    max
 CPU    cluster  policy   speed  speed   core type
  0        0        0      500    2208   Cortex-A73 / r0p2
  1        0        0      500    2208   Cortex-A73 / r0p2
  2        0        0      500    2208   Cortex-A73 / r0p2
  3        0        0      500    2208   Cortex-A73 / r0p2
  4        1        4      500    2016   Cortex-A53 / r0p4
  5        1        4      500    2016   Cortex-A53 / r0p4
  6        1        4      500    2016   Cortex-A53 / r0p4
  7        1        4      500    2016   Cortex-A53 / r0p4

Architecture:                    aarch64
CPU op-mode(s):                  32-bit, 64-bit
Byte Order:                      Little Endian
CPU(s):                          8
On-line CPU(s) list:             0-7
Vendor ID:                       ARM
Model name:                      Cortex-A73
Model:                           2
Thread(s) per core:              1
Core(s) per socket:              4
Socket(s):                       1
Stepping:                        r0p2
CPU max MHz:                     2208.0000
CPU min MHz:                     500.0000
BogoMIPS:                        48.00
Flags:                           fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid
Model name:                      Cortex-A53
Model:                           4
Thread(s) per core:              1
Core(s) per socket:              4
Socket(s):                       1
Stepping:                        r0p4
CPU max MHz:                     2016.0000
CPU min MHz:                     500.0000
BogoMIPS:                        48.00
Flags:                           fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid
Vulnerability Itlb multihit:     Not affected
Vulnerability L1tf:              Not affected
Vulnerability Mds:               Not affected
Vulnerability Meltdown:          Not affected
Vulnerability Spec store bypass: Vulnerable
Vulnerability Spectre v1:        Mitigation; __user pointer sanitization
Vulnerability Spectre v2:        Vulnerable
Vulnerability Srbds:             Not affected
Vulnerability Tsx async abort:   Not affected

Signature: 00A73r0p200A73r0p200A73r0p200A73r0p214A53r0p414A53r0p414A53r0p414A53r0p4
 Compiler: /usr/bin/gcc (Ubuntu 11.2.0-19ubuntu1/aarch64-linux-gnu)
 Userland: arm64
   Kernel: 5.4.125/aarch64
           CONFIG_HZ=250
           CONFIG_HZ_250=y
           CONFIG_PREEMPTION=y
           CONFIG_PREEMPT=y
           CONFIG_PREEMPT_COUNT=y
           CONFIG_PREEMPT_RCU=y
           raid6: neonx8   gen()  3020 MB/s
           raid6: neonx8   xor()  2821 MB/s
           raid6: neonx4   gen()  2444 MB/s
           raid6: neonx4   xor()  2873 MB/s
           raid6: neonx2   gen()  2274 MB/s
           raid6: neonx2   xor()  2493 MB/s
           raid6: neonx1   gen()  1808 MB/s
           raid6: neonx1   xor()  1910 MB/s
           raid6: int64x8  gen()  1781 MB/s
           raid6: int64x8  xor()  1107 MB/s
           raid6: int64x4  gen()  1429 MB/s
           raid6: int64x4  xor()  1053 MB/s
           raid6: int64x2  gen()  1153 MB/s
           raid6: int64x2  xor()   873 MB/s
           raid6: int64x1  gen()   771 MB/s
           raid6: int64x1  xor()   703 MB/s
           raid6: using algorithm neonx8 gen() 3020 MB/s
           raid6: .... xor() 2821 MB/s, rmw enabled
           raid6: using neon recovery algorithm
           xor: measuring software checksum speed
           xor: using function: 32regs (5680.000 MB/sec)

| Khadas VIM4 | 2208/2016 MHz | 5.4 | Jammy arm64 | 12100 | 246370 | 1096550 | 2190 | 10880 | - |