sbc-bench v0.9.4 Khadas VIM4 (Fri, 29 Apr 2022 03:01:58 +0800)

Distributor ID:	Ubuntu
Description:	Ubuntu 20.04.4 LTS
Release:	20.04
Codename:	focal
Architecture:	arm64

/usr/bin/gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0

Uptime: 03:01:59 up  3:54,  2 users,  load average: 2.45, 2.23, 2.22

Linux 5.4.125 (Khadas) 	04/29/22 	_aarch64_	(8 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           9.11    1.65    0.60    0.03    0.00   88.62

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk0           2.13        80.09        33.18         0.00    1126777     466856          0
mmcblk0boot0      0.00         0.02         0.00         0.00        232          0          0
mmcblk0boot1      0.00         0.02         0.00         0.00        232          0          0
sda               2.55        90.71         0.00         0.00    1276162          0          0
sdb               0.04         0.89         0.00         0.00      12464          0          0
zram1             0.02         0.08         0.00         0.00       1176          4          0
zram2             0.02         0.08         0.00         0.00       1176          4          0
zram3             0.02         0.08         0.00         0.00       1176          4          0
zram4             0.02         0.08         0.00         0.00       1176          4          0

              total        used        free      shared  buff/cache   available
Mem:          7.8Gi       950Mi       6.5Gi        59Mi       386Mi       6.7Gi
Swap:         1.0Gi          0B       1.0Gi

Filename				Type		Size	Used	Priority
/dev/zram1                             	partition	262140	0	5
/dev/zram2                             	partition	262140	0	5
/dev/zram3                             	partition	262140	0	5
/dev/zram4                             	partition	262140	0	5

##########################################################################

Checking cpufreq OPP for cpu0-cpu3 (Cortex-A73):

Cpufreq OPP: 2208    Measured: 2205 (2200.901/2200.157/2199.438)
Cpufreq OPP: 2016    Measured: 2010 (2008.569/2007.595/2007.570)
Cpufreq OPP: 1896    Measured: 1890 (1887.733/1881.637/1881.374)
Cpufreq OPP: 1800    Measured: 1795 (1792.555/1792.117/1791.838)
Cpufreq OPP: 1704    Measured: 1700 (1696.559/1696.291/1696.113)
Cpufreq OPP: 1608    Measured: 1605 (1600.702/1599.571/1598.403)
Cpufreq OPP: 1512    Measured: 1510 (1506.541/1503.226/1503.156)
Cpufreq OPP: 1392    Measured: 1390 (1385.797/1383.629/1378.710)
Cpufreq OPP: 1200    Measured: 1195 (1193.427/1193.413/1191.719)
Cpufreq OPP: 1000    Measured:  995 (994.027/993.477/993.203)
Cpufreq OPP:  666    Measured:  665 (661.281/660.694/659.755)
Cpufreq OPP:  500    Measured:  495 (494.773/493.302/493.296)

Checking cpufreq OPP for cpu4-cpu7 (Cortex-A53):

Cpufreq OPP: 2016    Measured: 1975 (1974.804/1963.179/1962.415)
Cpufreq OPP: 1896    Measured: 1855 (1854.356/1853.803/1853.781)
Cpufreq OPP: 1800    Measured: 1765 (1761.182/1760.837/1756.831)
Cpufreq OPP: 1704    Measured: 1670 (1668.913/1665.332/1664.851)
Cpufreq OPP: 1608    Measured: 1575 (1574.605/1574.067/1564.816)
Cpufreq OPP: 1512    Measured: 1480 (1478.594/1477.765/1476.616)
Cpufreq OPP: 1392    Measured: 1360 (1358.877/1358.048/1357.691)
Cpufreq OPP: 1200    Measured: 1175 (1171.063/1171.023/1167.939)
Cpufreq OPP: 1000    Measured:  980 (975.419/974.878/972.172)
Cpufreq OPP:  666    Measured:  655 (650.408/649.649/646.426)
Cpufreq OPP:  500    Measured:  485 (484.829/484.729/484.435)

##########################################################################

Executing benchmark on cpu0 (Cortex-A73):

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   7783.4 MB/s (0.3%)
 C copy backwards (32 byte blocks)                    :   7781.6 MB/s
 C copy backwards (64 byte blocks)                    :   7805.9 MB/s
 C copy                                               :   7823.4 MB/s
 C copy prefetched (32 bytes step)                    :   7591.3 MB/s
 C copy prefetched (64 bytes step)                    :   7626.1 MB/s
 C 2-pass copy                                        :   4121.2 MB/s (0.3%)
 C 2-pass copy prefetched (32 bytes step)             :   3712.4 MB/s (0.2%)
 C 2-pass copy prefetched (64 bytes step)             :   3807.5 MB/s (0.2%)
 C fill                                               :  11602.6 MB/s
 C fill (shuffle within 16 byte blocks)               :  11596.9 MB/s
 C fill (shuffle within 32 byte blocks)               :  11592.5 MB/s
 C fill (shuffle within 64 byte blocks)               :  11594.0 MB/s
 ---
 standard memcpy                                      :   7806.0 MB/s
 standard memset                                      :  11595.7 MB/s
 ---
 NEON LDP/STP copy                                    :   7811.6 MB/s
 NEON LDP/STP copy pldl2strm (32 bytes step)          :   7811.9 MB/s
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   7812.2 MB/s
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   7555.6 MB/s (0.4%)
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   7729.1 MB/s (0.3%)
 NEON LD1/ST1 copy                                    :   7802.7 MB/s
 NEON STP fill                                        :  11595.6 MB/s
 NEON STNP fill                                       :  11597.1 MB/s
 ARM LDP/STP copy                                     :   7805.7 MB/s
 ARM STP fill                                         :  11595.6 MB/s
 ARM STNP fill                                        :  11593.5 MB/s

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :    459.8 MB/s
 NEON LDP/STP 2-pass copy (from framebuffer)          :    395.6 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :    459.8 MB/s
 NEON LD1/ST1 2-pass copy (from framebuffer)          :    395.1 MB/s
 ARM LDP/STP copy (from framebuffer)                  :    459.8 MB/s
 ARM LDP/STP 2-pass copy (from framebuffer)           :    395.4 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    5.0 ns          /     8.4 ns 
    131072 :    7.5 ns          /    11.8 ns 
    262144 :    9.4 ns          /    13.2 ns 
    524288 :   10.9 ns          /    13.8 ns 
   1048576 :   25.4 ns          /    38.2 ns 
   2097152 :   77.2 ns          /   112.9 ns 
   4194304 :  107.0 ns          /   139.8 ns 
   8388608 :  125.4 ns          /   154.6 ns 
  16777216 :  135.5 ns          /   160.4 ns 
  33554432 :  141.8 ns          /   164.1 ns 
  67108864 :  145.7 ns          /   166.2 ns 

Executing benchmark on cpu4 (Cortex-A53):

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   2098.9 MB/s
 C copy backwards (32 byte blocks)                    :   2112.2 MB/s
 C copy backwards (64 byte blocks)                    :   2133.1 MB/s (0.2%)
 C copy                                               :   2136.7 MB/s
 C copy prefetched (32 bytes step)                    :   1443.4 MB/s
 C copy prefetched (64 bytes step)                    :   1647.8 MB/s
 C 2-pass copy                                        :   1797.3 MB/s
 C 2-pass copy prefetched (32 bytes step)             :   1230.0 MB/s
 C 2-pass copy prefetched (64 bytes step)             :   1061.4 MB/s
 C fill                                               :  10600.0 MB/s (0.2%)
 C fill (shuffle within 16 byte blocks)               :  10573.3 MB/s (0.2%)
 C fill (shuffle within 32 byte blocks)               :  10545.3 MB/s
 C fill (shuffle within 64 byte blocks)               :  10524.2 MB/s
 ---
 standard memcpy                                      :   2136.7 MB/s
 standard memset                                      :  10604.5 MB/s (0.2%)
 ---
 NEON LDP/STP copy                                    :   2102.4 MB/s (0.2%)
 NEON LDP/STP copy pldl2strm (32 bytes step)          :   1295.4 MB/s (0.8%)
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   1669.4 MB/s
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   2575.8 MB/s
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   2576.9 MB/s
 NEON LD1/ST1 copy                                    :   2124.6 MB/s
 NEON STP fill                                        :  10601.5 MB/s (0.2%)
 NEON STNP fill                                       :   7980.4 MB/s (1.0%)
 ARM LDP/STP copy                                     :   2103.0 MB/s (0.2%)
 ARM STP fill                                         :  10636.4 MB/s (0.2%)
 ARM STNP fill                                        :   7965.9 MB/s

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :    258.2 MB/s
 NEON LDP/STP 2-pass copy (from framebuffer)          :    245.3 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :     64.6 MB/s
 NEON LD1/ST1 2-pass copy (from framebuffer)          :     64.6 MB/s
 ARM LDP/STP copy (from framebuffer)                  :    129.2 MB/s
 ARM LDP/STP 2-pass copy (from framebuffer)           :    129.2 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    3.5 ns          /     5.9 ns 
    131072 :    5.3 ns          /     8.2 ns 
    262144 :    6.3 ns          /     9.1 ns 
    524288 :    6.8 ns          /     9.6 ns 
   1048576 :   16.7 ns          /    29.2 ns 
   2097152 :   73.7 ns          /   110.4 ns 
   4194304 :  109.0 ns          /   144.0 ns 
   8388608 :  127.3 ns          /   156.8 ns 
  16777216 :  137.6 ns          /   163.3 ns 
  33554432 :  143.8 ns          /   167.3 ns 
  67108864 :  147.4 ns          /   169.2 ns 

##########################################################################

Executing benchmark on each cluster individually

OpenSSL 1.1.1f, built on 31 Mar 2020
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes
aes-128-cbc     372296.62k   931836.89k  1439260.07k  1657040.21k  1745892.69k  1752208.73k
aes-128-cbc     165909.42k   498410.75k   980026.28k  1325002.75k  1476392.28k  1486389.25k
aes-192-cbc     346540.37k   842767.85k  1216763.14k  1392323.24k  1456070.66k  1461141.50k
aes-192-cbc     158402.30k   445109.06k   801854.21k  1022547.63k  1111769.09k  1117508.95k
aes-256-cbc     335080.27k   769007.83k  1079949.99k  1202499.93k  1249596.76k  1253195.78k
aes-256-cbc     153772.05k   409639.74k   695675.82k   855945.56k   917585.92k   921468.93k

##########################################################################

Executing benchmark single-threaded on cpu0 (Cortex-A73)

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,8 CPUs LE)

LE
CPU Freq: 64000000 32000000 32000000 32000000 128000000 256000000 512000000 512000000 1024000000

RAM size:    7951 MB,  # CPU hardware threads:   8
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       1826    99   1793   1777  |      28589    99   2458   2441
23:       1730    99   1780   1763  |      27980    99   2440   2422
24:       1631    99   1771   1754  |      27352    99   2419   2401
25:       1509    99   1740   1723  |      26555    99   2381   2364
----------------------------------  | ------------------------------
Avr:              99   1771   1754  |               99   2425   2407
Tot:              99   2098   2081

Executing benchmark single-threaded on cpu4 (Cortex-A53)

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,8 CPUs LE)

LE
CPU Freq: 32000000 64000000 64000000 21333333 128000000 256000000 512000000 1024000000 682666666

RAM size:    7951 MB,  # CPU hardware threads:   8
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       1200    97   1198   1168  |      21964    98   1920   1875
23:       1128    97   1179   1150  |      21482    98   1904   1860
24:       1083    97   1196   1165  |      21017    98   1889   1845
25:       1033    97   1211   1180  |      20448    98   1864   1820
----------------------------------  | ------------------------------
Avr:              97   1196   1166  |               98   1894   1850
Tot:              98   1545   1508

##########################################################################

Executing benchmark 3 times multi-threaded

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,8 CPUs LE)

LE
CPU Freq: 32000000 32000000 32000000 32000000 128000000 128000000 256000000 - 2048000000

RAM size:    7951 MB,  # CPU hardware threads:   8
RAM usage:   1765 MB,  # Benchmark threads:      8

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       9411   746   1227   9155  |     179430   712   2148  15305
23:       8646   720   1223   8810  |     174950   711   2129  15140
24:       8618   765   1211   9266  |     170495   711   2103  14964
25:       8087   752   1228   9234  |     165775   714   2068  14753
----------------------------------  | ------------------------------
Avr:             746   1222   9116  |              712   2112  15040
Tot:             729   1667  12078

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,8 CPUs LE)

LE
CPU Freq: 64000000 - 64000000 - - - 512000000 - 2048000000

RAM size:    7951 MB,  # CPU hardware threads:   8
RAM usage:   1765 MB,  # Benchmark threads:      8

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       9427   738   1243   9171  |     179872   714   2149  15342
23:       9027   753   1221   9198  |     174902   712   2126  15136
24:       8523   753   1217   9164  |     171443   715   2104  15047
25:       8229   763   1232   9396  |     166209   715   2069  14792
----------------------------------  | ------------------------------
Avr:             752   1228   9232  |              714   2112  15079
Tot:             733   1670  12156

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,8 CPUs LE)

LE
CPU Freq: 64000000 64000000 64000000 64000000 128000000 256000000 256000000 1024000000 2048000000

RAM size:    7951 MB,  # CPU hardware threads:   8
RAM usage:   1765 MB,  # Benchmark threads:      8

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       9186   722   1237   8936  |     180010   715   2147  15354
23:       8668   728   1213   8832  |     175735   715   2127  15208
24:       8344   731   1227   8972  |     171381   715   2103  15042
25:       8068   748   1231   9213  |     166486   716   2071  14817
----------------------------------  | ------------------------------
Avr:             732   1227   8988  |              715   2112  15105
Tot:             724   1670  12047

Compression: 9116,9232,8988
Decompression: 15040,15079,15105
Total: 12078,12156,12047

##########################################################################

Testing clockspeeds again. System health now:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
03:18:37: 2208/2016MHz  9.92  93%   1%  91%   0%   0%   0%  52.5°C

Checking cpufreq OPP for cpu0-cpu3 (Cortex-A73):

Cpufreq OPP: 2208    Measured: 2200 (2196.158/2183.301/2125.792)
Cpufreq OPP: 2016    Measured: 1680 (1678.371/1612.091/1603.220)
Cpufreq OPP: 1896    Measured: 1880 (1878.287/1875.646/1875.624)
Cpufreq OPP: 1800    Measured: 1785 (1780.729/1079.439/962.358)
Cpufreq OPP: 1704    Measured: 1690 (1686.236/1629.835/1515.309)
Cpufreq OPP: 1608    Measured: 1595 (1593.413/1591.410/1588.845)
Cpufreq OPP: 1512    Measured: 1495 (1491.988/1471.870/1403.785)
Cpufreq OPP: 1392    Measured: 1380 (1378.033/1377.945/1376.990)
Cpufreq OPP: 1200    Measured: 1190 (1187.391/1186.423/511.921)
Cpufreq OPP: 1000    Measured: 1085 (1080.209/988.948/983.721)
Cpufreq OPP:  666    Measured:  475 (472.587/263.852/263.343)
Cpufreq OPP:  500    Measured:  490 (489.038/194.918/192.142)

Checking cpufreq OPP for cpu4-cpu7 (Cortex-A53):

Cpufreq OPP: 2016    Measured: 1970 (1966.777/1965.280/1956.200)
Cpufreq OPP: 1896    Measured: 1860 (1857.237/1840.612/1769.911)
Cpufreq OPP: 1800    Measured: 1810 (1805.104/1760.529/1749.879)
Cpufreq OPP: 1704    Measured: 1665 (1663.170/1657.176/1599.011)
Cpufreq OPP: 1608    Measured: 1580 (1579.889/1568.643/1477.657)
Cpufreq OPP: 1512    Measured: 1480 (1476.337/1475.994/1210.381)
Cpufreq OPP: 1392    Measured: 1350 (1347.039/836.452/781.693)
Cpufreq OPP: 1200    Measured: 1175 (1174.765/1149.625/1024.831)
Cpufreq OPP: 1000    Measured:  980 (978.491/973.500/970.847)
Cpufreq OPP:  666    Measured:  650 (649.633/645.109/644.677)
Cpufreq OPP:  500    Measured:  490 (485.202/485.046/484.946)

##########################################################################

Thermal source: /sys/devices/virtual/thermal/thermal_zone0/ (soc_thermal)

System health while running tinymembench:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
03:02:16: 2208/2016MHz  2.57  11%   0%   9%   1%   0%   0%  45.8°C
03:03:36: 2208/2016MHz  2.91  12%   0%  12%   0%   0%   0%  47.7°C
03:04:56: 2208/2016MHz  3.53  12%   0%  12%   0%   0%   0%  45.9°C
03:06:16: 2208/2016MHz  3.32  12%   0%  12%   0%   0%   0%  46.7°C
03:07:36: 2208/2016MHz  3.37  12%   0%  12%   0%   0%   0%  49.7°C
03:08:56: 2208/2016MHz  3.29  12%   0%  12%   0%   0%   0%  50.1°C
03:10:16: 2208/2016MHz  3.12  12%   0%  12%   0%   0%   0%  49.0°C

System health while running OpenSSL benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
03:10:22: 2208/2016MHz  3.11  11%   0%   9%   1%   0%   0%  51.0°C
03:10:38: 2208/2016MHz  3.14  12%   0%  12%   0%   0%   0%  51.1°C
03:10:54: 2208/2016MHz  3.11  12%   0%  12%   0%   0%   0%  45.9°C
03:11:10: 2208/2016MHz  3.22  12%   0%  12%   0%   0%   0%  48.6°C
03:11:26: 2208/2016MHz  3.17  12%   0%  12%   0%   0%   0%  47.2°C
03:11:42: 2208/2016MHz  3.13  13%   0%  12%   0%   0%   0%  51.6°C
03:11:58: 2208/2016MHz  3.16  12%   0%  12%   0%   0%   0%  49.5°C

System health while running 7-zip single core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
03:12:10: 2208/2016MHz  3.13  11%   0%   9%   1%   0%   0%  51.4°C
03:12:20: 2208/2016MHz  3.11  12%   0%  12%   0%   0%   0%  52.8°C
03:12:30: 2208/2016MHz  3.17  12%   0%  12%   0%   0%   0%  53.1°C
03:12:40: 2208/2016MHz  3.15  12%   0%  12%   0%   0%   0%  52.2°C
03:12:50: 2208/2016MHz  3.12  12%   0%  12%   0%   0%   0%  50.4°C
03:13:00: 2208/2016MHz  3.10  12%   0%  12%   0%   0%   0%  48.7°C
03:13:10: 2208/2016MHz  3.09  13%   0%  12%   0%   0%   0%  48.4°C
03:13:20: 2208/2016MHz  3.07  12%   0%  12%   0%   0%   0%  49.7°C
03:13:30: 2208/2016MHz  3.06  12%   0%  12%   0%   0%   0%  48.4°C
03:13:40: 2208/2016MHz  3.05  12%   0%  12%   0%   0%   0%  49.1°C
03:13:50: 2208/2016MHz  3.12  12%   0%  12%   0%   0%   0%  49.9°C
03:14:00: 2208/2016MHz  3.10  12%   0%  12%   0%   0%   0%  50.3°C
03:14:10: 2208/2016MHz  3.09  12%   0%  12%   0%   0%   0%  49.9°C
03:14:20: 2208/2016MHz  3.07  12%   0%  12%   0%   0%   0%  47.8°C
03:14:30: 2208/2016MHz  3.06  12%   0%  12%   0%   0%   0%  46.2°C
03:14:40: 2208/2016MHz  3.05  12%   0%  12%   0%   0%   0%  45.8°C
03:14:50: 2208/2016MHz  3.04  12%   0%  12%   0%   0%   0%  46.7°C
03:15:01: 2208/2016MHz  3.04  12%   0%  12%   0%   0%   0%  47.4°C

System health while running 7-zip multi core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
03:15:05: 2208/2016MHz  3.03  11%   0%   9%   1%   0%   0%  48.6°C
03:15:16: 2208/2016MHz  3.76  84%   0%  82%   0%   0%   0%  57.9°C
03:15:27: 2208/2016MHz  4.72  86%   0%  85%   0%   0%   0%  56.7°C
03:15:38: 2208/2016MHz  6.28  86%   0%  85%   0%   0%   0%  55.2°C
03:15:48: 2208/2016MHz  6.85  97%   1%  96%   0%   0%   0%  55.8°C
03:15:59: 2208/2016MHz  6.98  80%   1%  78%   0%   0%   0%  52.9°C
03:16:10: 2208/2016MHz  7.67  93%   1%  90%   0%   0%   0%  52.9°C
03:16:20: 2208/2016MHz  7.47  81%   0%  80%   0%   0%   0%  52.7°C
03:16:30: 2208/2016MHz  8.01  96%   0%  95%   0%   0%   0%  54.4°C
03:16:41: 2208/2016MHz  7.80  87%   0%  86%   0%   0%   0%  54.1°C
03:16:52: 2208/2016MHz  8.22  86%   1%  84%   0%   0%   0%  51.7°C
03:17:02: 2208/2016MHz  8.57  90%   0%  89%   0%   0%   0%  52.8°C
03:17:12: 2208/2016MHz  8.43  85%   1%  82%   0%   0%   0%  51.0°C
03:17:23: 2208/2016MHz  8.83  95%   1%  93%   0%   0%   0%  53.0°C
03:17:34: 2208/2016MHz  9.12  76%   0%  75%   0%   0%   0%  52.0°C
03:17:44: 2208/2016MHz  9.01  87%   0%  86%   0%   0%   0%  47.9°C
03:17:55: 2208/2016MHz  9.39  94%   0%  93%   0%   0%   0%  53.3°C
03:18:05: 2208/2016MHz  9.13  84%   1%  81%   0%   0%   0%  47.8°C
03:18:15: 2208/2016MHz  9.34  78%   0%  77%   0%   0%   0%  45.7°C
03:18:26: 2208/2016MHz  9.91  97%   2%  94%   0%   0%   0%  50.5°C
03:18:37: 2208/2016MHz  9.92  93%   1%  91%   0%   0%   0%  52.5°C

##########################################################################

Linux 5.4.125 (Khadas) 	04/29/22 	_aarch64_	(8 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          10.47    1.54    0.60    0.03    0.00   87.36

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk0           2.06        75.77        34.81         0.00    1143157     525172          0
mmcblk0boot0      0.00         0.02         0.00         0.00        232          0          0
mmcblk0boot1      0.00         0.02         0.00         0.00        232          0          0
sda               2.38        84.59         0.00         0.00    1276162          0          0
sdb               0.03         0.83         0.00         0.00      12464          0          0
zram1             0.02         0.08         0.00         0.00       1176          4          0
zram2             0.02         0.08         0.00         0.00       1176          4          0
zram3             0.02         0.08         0.00         0.00       1176          4          0
zram4             0.02         0.08         0.00         0.00       1176          4          0

              total        used        free      shared  buff/cache   available
Mem:          7.8Gi       1.0Gi       6.4Gi        72Mi       425Mi       6.6Gi
Swap:         1.0Gi          0B       1.0Gi

Filename				Type		Size	Used	Priority
/dev/zram1                             	partition	262140	0	5
/dev/zram2                             	partition	262140	0	5
/dev/zram3                             	partition	262140	0	5
/dev/zram4                             	partition	262140	0	5

CPU sysfs topology (clusters, cpufreq members, clockspeeds)
                 cpufreq   min    max
 CPU    cluster  policy   speed  speed   core type
  0        0        0      500    2208   Cortex-A73 / r0p2
  1        0        0      500    2208   Cortex-A73 / r0p2
  2        0        0      500    2208   Cortex-A73 / r0p2
  3        0        0      500    2208   Cortex-A73 / r0p2
  4        1        4      500    2016   Cortex-A53 / r0p4
  5        1        4      500    2016   Cortex-A53 / r0p4
  6        1        4      500    2016   Cortex-A53 / r0p4
  7        1        4      500    2016   Cortex-A53 / r0p4

Architecture:                    aarch64
CPU op-mode(s):                  32-bit, 64-bit
Byte Order:                      Little Endian
CPU(s):                          8
On-line CPU(s) list:             0-7
Thread(s) per core:              1
Core(s) per socket:              4
Socket(s):                       2
Vendor ID:                       ARM
Model:                           2
Model name:                      Cortex-A73
Stepping:                        r0p2
CPU max MHz:                     2208.0000
CPU min MHz:                     500.0000
BogoMIPS:                        48.00
Vulnerability Itlb multihit:     Not affected
Vulnerability L1tf:              Not affected
Vulnerability Mds:               Not affected
Vulnerability Meltdown:          Not affected
Vulnerability Spec store bypass: Vulnerable
Vulnerability Spectre v1:        Mitigation; __user pointer sanitization
Vulnerability Spectre v2:        Vulnerable
Vulnerability Srbds:             Not affected
Vulnerability Tsx async abort:   Not affected
Flags:                           fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid

SoC guess: Amlogic A311D2
 Compiler: /usr/bin/gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1/aarch64-linux-gnu)
 Userland: arm64
   Kernel: 5.4.125/aarch64
           CONFIG_HZ=250
           CONFIG_HZ_250=y
           CONFIG_PREEMPTION=y
           CONFIG_PREEMPT=y
           CONFIG_PREEMPT_COUNT=y
           CONFIG_PREEMPT_RCU=y
           raid6: neonx8   gen()  3014 MB/s
           raid6: neonx8   xor()  2814 MB/s
           raid6: neonx4   gen()  2440 MB/s
           raid6: neonx4   xor()  2859 MB/s
           raid6: neonx2   gen()  2276 MB/s
           raid6: neonx2   xor()  2516 MB/s
           raid6: neonx1   gen()  1839 MB/s
           raid6: neonx1   xor()  1947 MB/s
           raid6: int64x8  gen()  1788 MB/s
           raid6: int64x8  xor()  1107 MB/s
           raid6: int64x4  gen()  1429 MB/s
           raid6: int64x4  xor()  1051 MB/s
           raid6: int64x2  gen()  1154 MB/s
           raid6: int64x2  xor()   929 MB/s
           raid6: int64x1  gen()   771 MB/s
           raid6: int64x1  xor()   728 MB/s
           raid6: using algorithm neonx8 gen() 3014 MB/s
           raid6: .... xor() 2814 MB/s, rmw enabled
           raid6: using neon recovery algorithm
           xor: measuring software checksum speed
           xor: using function: 32regs (5680.000 MB/sec)

| Khadas VIM4 | 2208/2016 MHz | 5.4 | Focal arm64 | 12090 | 372300 | 1253200 | 7810 | 11600 | - |