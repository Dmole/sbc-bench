sbc-bench v0.9.6 Radxa ROCK 5A (Tue, 17 May 2022 06:31:50 +0000)

Distributor ID:	Debian
Description:	Debian GNU/Linux 11 (bullseye)
Release:	11
Codename:	bullseye

/usr/bin/gcc (Debian 10.2.1-6) 10.2.1 20210110

Uptime: 06:31:50 up 1 min,  1 user,  load average: 0.56, 0.20, 0.07

Linux 5.10.66-rockchip-5.10 (radxa) 	05/17/22 	_aarch64_	(8 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           1.82    0.01    3.67    1.42    0.00   93.07

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk0          47.56      2099.38       231.69         0.00     159343      17585          0

               total        used        free      shared  buff/cache   available
Mem:           3.7Gi       197Mi       3.4Gi       9.0Mi       101Mi       3.4Gi
Swap:             0B          0B          0B

##########################################################################

Checking cpufreq OPP for cpu0-cpu3 (Cortex-A55):

Cpufreq OPP: 1800    Measured: 1820 (1817.400/1817.257/1814.010)
Cpufreq OPP: 1608    Measured: 1625 (1622.772/1617.017/1567.870)
Cpufreq OPP: 1416    Measured: 1425 (1422.920/1409.132/1388.733)
Cpufreq OPP: 1200    Measured: 1220 (1219.447/1216.790/1215.887)
Cpufreq OPP: 1008    Measured: 1000 (996.977/993.047/983.136)
Cpufreq OPP:  816    Measured:  800 (795.280/792.572/791.064)
Cpufreq OPP:  600    Measured:  595 (590.547/587.732/586.722)
Cpufreq OPP:  408    Measured:  395 (393.157/391.837/391.665)

Checking cpufreq OPP for cpu4-cpu5 (Cortex-A76):

Cpufreq OPP: 2400    Measured: 2335 (2330.098/2329.775/2329.695)
Cpufreq OPP: 2208    Measured: 2195 (2192.268/2192.101/2191.935)
Cpufreq OPP: 2016    Measured: 2020 (2016.927/2016.801/2016.700)
Cpufreq OPP: 1800    Measured: 1840 (1838.662/1838.641/1838.410)
Cpufreq OPP: 1608    Measured: 1635 (1630.081/1629.982/1629.834)
Cpufreq OPP: 1416    Measured: 1430 (1425.418/1425.260/1425.166)
Cpufreq OPP: 1200    Measured: 1200 (1199.204/1198.995/1198.856)
Cpufreq OPP: 1008    Measured:  980 (976.710/976.699/976.376)
Cpufreq OPP:  816    Measured:  790 (787.643/787.625/787.493)
Cpufreq OPP:  600    Measured:  595 (592.824/592.778/592.685)
Cpufreq OPP:  408    Measured:  395 (394.886/394.821/394.803)

Checking cpufreq OPP for cpu6-cpu7 (Cortex-A76):

Cpufreq OPP: 2400    Measured: 2335 (2333.494/2333.305/2333.062)
Cpufreq OPP: 2208    Measured: 2175 (2170.804/2170.640/2170.244)
Cpufreq OPP: 2016    Measured: 1995 (1992.748/1992.650/1992.600)
Cpufreq OPP: 1800    Measured: 1815 (1811.404/1811.384/1811.323)
Cpufreq OPP: 1608    Measured: 1605 (1600.027/1599.750/1599.631)
Cpufreq OPP: 1416    Measured: 1400 (1397.057/1396.997/1396.831)
Cpufreq OPP: 1200    Measured: 1210 (1207.149/1207.135/1206.994)
Cpufreq OPP: 1008    Measured:  990 (985.904/985.751/985.645)
Cpufreq OPP:  816    Measured:  795 (792.914/792.753/792.572)
Cpufreq OPP:  600    Measured:  595 (592.884/592.851/592.791)
Cpufreq OPP:  408    Measured:  395 (394.978/394.918/394.877)

##########################################################################

Hardware sensors:

npu_thermal-virtual-0
temp1:        +36.1 C  

center_thermal-virtual-0
temp1:        +36.1 C  

bigcore1_thermal-virtual-0
temp1:        +36.1 C  

soc_thermal-virtual-0
temp1:        +36.1 C  (crit = +115.0 C)

gpu_thermal-virtual-0
temp1:        +36.1 C  

littlecore_thermal-virtual-0
temp1:        +37.0 C  

bigcore0_thermal-virtual-0
temp1:        +36.1 C  

##########################################################################

Executing benchmark on cpu0 (Cortex-A55):

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   3157.5 MB/s (3.1%)
 C copy backwards (32 byte blocks)                    :   3139.8 MB/s (3.2%)
 C copy backwards (64 byte blocks)                    :   3167.7 MB/s (0.6%)
 C copy                                               :   5676.7 MB/s (0.3%)
 C copy prefetched (32 bytes step)                    :   2264.8 MB/s (0.3%)
 C copy prefetched (64 bytes step)                    :   5792.8 MB/s (0.4%)
 C 2-pass copy                                        :   2662.0 MB/s (1.0%)
 C 2-pass copy prefetched (32 bytes step)             :   1804.4 MB/s (0.5%)
 C 2-pass copy prefetched (64 bytes step)             :   2922.1 MB/s (0.3%)
 C fill                                               :  12424.6 MB/s (0.2%)
 C fill (shuffle within 16 byte blocks)               :  12433.9 MB/s (0.6%)
 C fill (shuffle within 32 byte blocks)               :  12448.3 MB/s (0.3%)
 C fill (shuffle within 64 byte blocks)               :  12180.8 MB/s (0.3%)
 ---
 standard memcpy                                      :   6008.6 MB/s (0.4%)
 standard memset                                      :  21714.1 MB/s (1.6%)
 ---
 NEON LDP/STP copy                                    :   5278.2 MB/s (1.9%)
 NEON LDP/STP copy pldl2strm (32 bytes step)          :   1820.2 MB/s (0.5%)
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   3388.3 MB/s (0.3%)
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   2540.9 MB/s (0.3%)
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   5109.0 MB/s (0.3%)
 NEON LD1/ST1 copy                                    :   5088.9 MB/s (0.3%)
 NEON STP fill                                        :  21901.3 MB/s (0.5%)
 NEON STNP fill                                       :  13824.4 MB/s (0.5%)
 ARM LDP/STP copy                                     :   5324.2 MB/s (0.4%)
 ARM STP fill                                         :  21697.2 MB/s (1.4%)
 ARM STNP fill                                        :  13747.8 MB/s (0.7%)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :    335.0 MB/s (0.2%)
 NEON LDP/STP 2-pass copy (from framebuffer)          :    314.4 MB/s (1.8%)
 NEON LD1/ST1 copy (from framebuffer)                 :     87.8 MB/s (1.6%)
 NEON LD1/ST1 2-pass copy (from framebuffer)          :     86.5 MB/s (0.2%)
 ARM LDP/STP copy (from framebuffer)                  :    172.6 MB/s (1.0%)
 ARM LDP/STP 2-pass copy (from framebuffer)           :    165.7 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.1 ns          /     0.1 ns 
     32768 :    0.6 ns          /     0.9 ns 
     65536 :    1.4 ns          /     2.5 ns 
    131072 :    2.6 ns          /     4.3 ns 
    262144 :    7.9 ns          /    11.7 ns 
    524288 :   11.5 ns          /    15.0 ns 
   1048576 :   13.5 ns          /    16.2 ns 
   2097152 :   14.7 ns          /    16.5 ns 
   4194304 :   42.6 ns          /    64.3 ns 
   8388608 :   85.9 ns          /   118.4 ns 
  16777216 :  107.9 ns          /   136.9 ns 
  33554432 :  119.4 ns          /   146.3 ns 
  67108864 :  128.2 ns          /   155.4 ns 

Executing benchmark on cpu4 (Cortex-A76):

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :  10347.7 MB/s
 C copy backwards (32 byte blocks)                    :  10265.7 MB/s
 C copy backwards (64 byte blocks)                    :  10262.4 MB/s
 C copy                                               :  10491.8 MB/s
 C copy prefetched (32 bytes step)                    :  10696.0 MB/s
 C copy prefetched (64 bytes step)                    :  10697.9 MB/s
 C 2-pass copy                                        :   4851.4 MB/s (3.2%)
 C 2-pass copy prefetched (32 bytes step)             :   7575.3 MB/s
 C 2-pass copy prefetched (64 bytes step)             :   7789.8 MB/s
 C fill                                               :  27976.5 MB/s (0.3%)
 C fill (shuffle within 16 byte blocks)               :  28181.9 MB/s (0.5%)
 C fill (shuffle within 32 byte blocks)               :  28255.3 MB/s (0.4%)
 C fill (shuffle within 64 byte blocks)               :  28161.5 MB/s (0.3%)
 ---
 standard memcpy                                      :  10743.6 MB/s
 standard memset                                      :  28154.1 MB/s (0.4%)
 ---
 NEON LDP/STP copy                                    :  10761.5 MB/s
 NEON LDP/STP copy pldl2strm (32 bytes step)          :  10789.0 MB/s (0.1%)
 NEON LDP/STP copy pldl2strm (64 bytes step)          :  10818.5 MB/s
 NEON LDP/STP copy pldl1keep (32 bytes step)          :  10860.3 MB/s
 NEON LDP/STP copy pldl1keep (64 bytes step)          :  10855.8 MB/s
 NEON LD1/ST1 copy                                    :  10656.2 MB/s (0.2%)
 NEON STP fill                                        :  28023.4 MB/s (0.2%)
 NEON STNP fill                                       :  28168.4 MB/s (0.3%)
 ARM LDP/STP copy                                     :  10735.4 MB/s
 ARM STP fill                                         :  27885.6 MB/s
 ARM STNP fill                                        :  27865.7 MB/s

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :   1792.6 MB/s
 NEON LDP/STP 2-pass copy (from framebuffer)          :   1565.0 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :   1792.2 MB/s
 NEON LD1/ST1 2-pass copy (from framebuffer)          :   1566.0 MB/s
 ARM LDP/STP copy (from framebuffer)                  :   1761.2 MB/s
 ARM LDP/STP 2-pass copy (from framebuffer)           :   1565.5 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    0.0 ns          /     0.0 ns 
    131072 :    1.1 ns          /     1.5 ns 
    262144 :    2.2 ns          /     2.8 ns 
    524288 :    3.3 ns          /     4.0 ns 
   1048576 :    9.8 ns          /    13.0 ns 
   2097152 :   13.3 ns          /    15.6 ns 
   4194304 :   35.2 ns          /    53.3 ns 
   8388608 :   79.5 ns          /   110.1 ns 
  16777216 :  103.5 ns          /   130.0 ns 
  33554432 :  116.0 ns          /   137.6 ns 
  67108864 :  123.1 ns          /   141.7 ns 

Executing benchmark on cpu6 (Cortex-A76):

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :  10251.9 MB/s
 C copy backwards (32 byte blocks)                    :  10188.4 MB/s
 C copy backwards (64 byte blocks)                    :  10194.3 MB/s
 C copy                                               :  10544.8 MB/s
 C copy prefetched (32 bytes step)                    :  10759.9 MB/s
 C copy prefetched (64 bytes step)                    :  10759.8 MB/s
 C 2-pass copy                                        :   4872.7 MB/s (0.2%)
 C 2-pass copy prefetched (32 bytes step)             :   7654.8 MB/s
 C 2-pass copy prefetched (64 bytes step)             :   7808.9 MB/s
 C fill                                               :  28245.3 MB/s (0.6%)
 C fill (shuffle within 16 byte blocks)               :  28318.6 MB/s (0.4%)
 C fill (shuffle within 32 byte blocks)               :  28237.8 MB/s (0.2%)
 C fill (shuffle within 64 byte blocks)               :  28257.4 MB/s (0.4%)
 ---
 standard memcpy                                      :  10809.9 MB/s
 standard memset                                      :  27987.4 MB/s
 ---
 NEON LDP/STP copy                                    :  10835.1 MB/s
 NEON LDP/STP copy pldl2strm (32 bytes step)          :  10872.5 MB/s
 NEON LDP/STP copy pldl2strm (64 bytes step)          :  10881.7 MB/s
 NEON LDP/STP copy pldl1keep (32 bytes step)          :  10928.8 MB/s
 NEON LDP/STP copy pldl1keep (64 bytes step)          :  10911.7 MB/s
 NEON LD1/ST1 copy                                    :  10702.4 MB/s
 NEON STP fill                                        :  28235.0 MB/s (0.5%)
 NEON STNP fill                                       :  28246.7 MB/s (0.3%)
 ARM LDP/STP copy                                     :  10797.5 MB/s
 ARM STP fill                                         :  28157.7 MB/s (0.5%)
 ARM STNP fill                                        :  28223.3 MB/s (0.3%)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :   1792.7 MB/s
 NEON LDP/STP 2-pass copy (from framebuffer)          :   1563.1 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :   1791.5 MB/s
 NEON LD1/ST1 2-pass copy (from framebuffer)          :   1564.0 MB/s
 ARM LDP/STP copy (from framebuffer)                  :   1764.5 MB/s
 ARM LDP/STP 2-pass copy (from framebuffer)           :   1563.6 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    0.0 ns          /     0.0 ns 
    131072 :    1.1 ns          /     1.5 ns 
    262144 :    2.1 ns          /     2.7 ns 
    524288 :    3.3 ns          /     4.0 ns 
   1048576 :    9.0 ns          /    12.2 ns 
   2097152 :   13.1 ns          /    15.2 ns 
   4194304 :   36.2 ns          /    54.5 ns 
   8388608 :   77.4 ns          /   107.6 ns 
  16777216 :  102.3 ns          /   128.6 ns 
  33554432 :  115.4 ns          /   136.9 ns 
  67108864 :  123.0 ns          /   141.4 ns 

##########################################################################

Executing ramlat on cpu0 (Cortex-A55), results in ns:

       size:  1x32  2x32  1x64  2x64 1xPTR 2xPTR 4xPTR
         4k: 5.108 6.862 4.073 6.864 2.958 3.590 6.869 
         8k: 5.102 6.863 4.068 6.878 2.937 3.557 6.861 
        16k: 5.102 6.998 4.077 6.866 2.930 3.553 6.873 
        32k: 5.170 7.357 4.267 7.442 3.078 3.759 7.477 
        64k: 12.55 15.28 11.69 15.61 11.42 14.18 20.60 
       128k: 16.34 20.05 15.20 20.01 14.92 19.07 33.39 
       256k: 20.00 32.90 19.30 32.75 18.01 30.35 54.84 
       512k: 21.45 37.13 19.21 35.86 18.11 32.30 61.96 
      1024k: 20.58 36.21 19.32 36.19 18.18 32.38 67.26 
      2048k: 20.98 37.74 19.77 36.97 18.59 33.08 69.26 
      4096k: 59.97 110.0 58.67 111.5 57.60 107.2 217.7 
      8192k: 105.0 203.9 106.8 181.4 102.0 189.9 375.1 
     16384k: 123.5 207.3 123.0 206.2 121.3 228.4 473.5 

Executing ramlat on cpu4 (Cortex-A76), results in ns:

       size:  1x32  2x32  1x64  2x64 1xPTR 2xPTR 4xPTR
         4k: 4.649 4.972 4.648 4.990 4.149 4.731 4.160 
         8k: 4.642 4.971 4.648 4.989 4.148 4.731 4.163 
        16k: 4.636 4.971 4.647 4.990 4.149 4.731 4.162 
        32k: 4.639 4.971 4.655 4.989 4.148 4.731 4.163 
        64k: 4.676 5.004 4.667 5.022 4.164 4.531 4.269 
       128k: 7.320 8.784 7.316 8.387 7.161 7.681 8.740 
       256k: 9.952 10.91 9.998 10.79 9.319 10.39 10.66 
       512k: 11.77 12.92 11.81 12.80 11.07 12.62 13.25 
      1024k: 20.80 22.32 20.58 22.32 20.03 21.98 24.51 
      2048k: 21.72 23.37 21.37 23.36 20.86 23.21 26.22 
      4096k: 57.76 63.12 56.69 59.99 55.90 59.82 56.57 
      8192k: 107.1 104.8 105.4 102.2 105.7 105.9 94.67 
     16384k: 125.2 122.5 124.0 121.3 124.5 127.7 120.5 

Executing ramlat on cpu6 (Cortex-A76), results in ns:

       size:  1x32  2x32  1x64  2x64 1xPTR 2xPTR 4xPTR
         4k: 4.641 4.966 4.641 4.983 4.145 4.723 4.153 
         8k: 4.636 4.964 4.643 4.981 4.142 4.723 4.155 
        16k: 4.627 4.964 4.642 4.981 4.143 4.724 4.156 
        32k: 4.634 4.963 4.640 4.982 4.143 4.701 4.155 
        64k: 4.668 5.001 4.671 5.013 4.158 4.546 4.256 
       128k: 7.362 8.832 7.366 8.443 7.191 7.699 8.755 
       256k: 9.063 9.905 9.066 9.685 8.439 9.341 9.791 
       512k: 12.12 13.25 12.23 13.09 11.19 12.82 13.34 
      1024k: 20.63 22.33 20.59 22.33 19.57 21.96 24.50 
      2048k: 21.30 23.22 21.25 23.23 20.65 22.97 26.08 
      4096k: 68.90 71.80 67.67 68.79 67.18 69.31 65.23 
      8192k: 105.2 104.7 103.6 101.5 104.7 105.3 97.26 
     16384k: 124.8 123.0 125.2 121.6 129.8 128.7 116.9 

##########################################################################

Executing benchmark on each cluster individually

OpenSSL 1.1.1n, built on 15 Mar 2022
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes
aes-128-cbc     164753.89k   486884.89k   940945.66k  1235435.18k  1357414.40k  1366682.28k
aes-128-cbc     646909.72k  1319379.90k  1687957.93k  1801139.88k  1845862.40k  1851752.45k
aes-128-cbc     647210.27k  1321132.22k  1689811.20k  1803063.98k  1848005.97k  1854035.29k
aes-192-cbc     157131.29k   431993.58k   765721.51k   947767.98k  1014429.01k  1023568.55k
aes-192-cbc     606610.93k  1152965.31k  1425394.86k  1485002.41k  1539331.41k  1543411.03k
aes-192-cbc     607837.87k  1153125.50k  1426777.94k  1488760.15k  1541332.99k  1545311.57k
aes-256-cbc     152144.15k   396671.57k   659460.44k   793773.74k   843257.17k   846757.89k
aes-256-cbc     605457.23k  1026071.45k  1235527.51k  1295767.55k  1321031.00k  1323537.75k
aes-256-cbc     604944.85k  1025709.57k  1236879.62k  1297480.36k  1322702.17k  1325372.76k

##########################################################################

Executing benchmark single-threaded on cpu0 (Cortex-A55)

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,8 CPUs LE)

LE
CPU Freq: 64000000 - - - 128000000 - - - -

RAM size:    3740 MB,  # CPU hardware threads:   8
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       1370   100   1333   1333  |      21754   100   1860   1857
23:       1281   100   1307   1305  |      21396   100   1855   1852
24:       1250   100   1346   1345  |      21020   100   1848   1845
25:       1213   100   1387   1386  |      20556   100   1831   1830
----------------------------------  | ------------------------------
Avr:             100   1343   1342  |              100   1848   1846
Tot:             100   1596   1594

Executing benchmark single-threaded on cpu4 (Cortex-A76)

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,8 CPUs LE)

LE
CPU Freq: - - - - - 256000000 - - -

RAM size:    3740 MB,  # CPU hardware threads:   8
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       3049   100   2968   2966  |      38100   100   3255   3253
23:       2906   100   2963   2961  |      37647   100   3261   3259
24:       2761   100   2970   2969  |      36876   100   3239   3237
25:       2652   100   3030   3029  |      35877   100   3195   3193
----------------------------------  | ------------------------------
Avr:             100   2983   2981  |              100   3237   3236
Tot:             100   3110   3108

Executing benchmark single-threaded on cpu6 (Cortex-A76)

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,8 CPUs LE)

LE
CPU Freq: - - - - - - - - -

RAM size:    3740 MB,  # CPU hardware threads:   8
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       3088   100   3006   3005  |      38160   100   3259   3258
23:       2895   100   2951   2950  |      37772   100   3271   3270
24:       2792   100   3003   3002  |      37064   100   3255   3254
25:       2675   100   3056   3055  |      36098   100   3214   3213
----------------------------------  | ------------------------------
Avr:             100   3004   3003  |              100   3250   3249
Tot:             100   3127   3126

##########################################################################

Executing benchmark 3 times multi-threaded

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,8 CPUs LE)

LE
CPU Freq: - 64000000 64000000 - - - - 1024000000 2048000000

RAM size:    3740 MB,  # CPU hardware threads:   8
RAM usage:   1765 MB,  # Benchmark threads:      8

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:      15802   752   2043  15372  |     205899   677   2594  17562
23:      14147   709   2032  14415  |     200111   673   2573  17317
24:      13724   712   2072  14756  |     196297   674   2556  17229
25:      13103   745   2009  14961  |     191332   677   2516  17028
----------------------------------  | ------------------------------
Avr:             730   2039  14876  |              675   2560  17284
Tot:             702   2299  16080

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,8 CPUs LE)

LE
CPU Freq: - - - - - - - - -

RAM size:    3740 MB,  # CPU hardware threads:   8
RAM usage:   1765 MB,  # Benchmark threads:      8

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:      15470   725   2075  15049  |     203822   675   2577  17385
23:      14872   753   2013  15153  |     200304   676   2564  17334
24:      13710   735   2006  14741  |     196296   678   2542  17229
25:      13108   740   2023  14966  |     190573   675   2514  16960
----------------------------------  | ------------------------------
Avr:             738   2029  14978  |              676   2549  17227
Tot:             707   2289  16102

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,8 CPUs LE)

LE
CPU Freq: - - - - - - - - -

RAM size:    3740 MB,  # CPU hardware threads:   8
RAM usage:   1765 MB,  # Benchmark threads:      8

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:      15327   727   2050  14911  |     193513   645   2559  16506
23:      14117   709   2028  14384  |     196698   664   2563  17022
24:      14156   764   1992  15221  |     195263   675   2540  17138
25:      13449   769   1996  15357  |     187812   668   2503  16714
----------------------------------  | ------------------------------
Avr:             743   2017  14968  |              663   2541  16845
Tot:             703   2279  15907

Compression: 14876,14978,14968
Decompression: 17284,17227,16845
Total: 16080,16102,15907

##########################################################################

** cpuminer-multi 1.3.3 by tpruvot@github **
BTC donation address: 1FhDPLPpw18X4srecguG3MxJYe4a1JsZnd (tpruvot)

[2022-05-17 06:55:36] 8 miner threads started, using 'scrypt' algorithm.
[2022-05-17 06:55:36] CPU #4: 4.09 kH/s
[2022-05-17 06:55:36] CPU #5: 4.09 kH/s
[2022-05-17 06:55:36] CPU #7: 4.11 kH/s
[2022-05-17 06:55:36] CPU #6: 4.10 kH/s
[2022-05-17 06:55:36] CPU #2: 1.84 kH/s
[2022-05-17 06:55:36] CPU #3: 1.84 kH/s
[2022-05-17 06:55:36] CPU #1: 1.83 kH/s
[2022-05-17 06:55:36] CPU #0: 1.82 kH/s
[2022-05-17 06:55:41] Total: 23.69 kH/s
[2022-05-17 06:55:46] CPU #4: 4.09 kH/s
[2022-05-17 06:55:46] CPU #5: 4.09 kH/s
[2022-05-17 06:55:46] CPU #6: 4.09 kH/s
[2022-05-17 06:55:46] CPU #7: 4.07 kH/s
[2022-05-17 06:55:46] Total: 23.63 kH/s
[2022-05-17 06:55:46] CPU #1: 1.84 kH/s
[2022-05-17 06:55:46] CPU #2: 1.84 kH/s
[2022-05-17 06:55:46] CPU #3: 1.84 kH/s
[2022-05-17 06:55:46] CPU #0: 1.78 kH/s
[2022-05-17 06:55:51] Total: 23.68 kH/s
[2022-05-17 06:55:56] CPU #4: 4.10 kH/s
[2022-05-17 06:55:56] CPU #5: 4.09 kH/s
[2022-05-17 06:55:56] CPU #7: 4.10 kH/s
[2022-05-17 06:55:56] CPU #6: 4.10 kH/s
[2022-05-17 06:55:56] Total: 23.69 kH/s
[2022-05-17 06:55:56] CPU #1: 1.84 kH/s
[2022-05-17 06:55:56] CPU #2: 1.84 kH/s
[2022-05-17 06:55:56] CPU #3: 1.84 kH/s
[2022-05-17 06:55:56] CPU #0: 1.79 kH/s
[2022-05-17 06:56:01] Total: 23.67 kH/s
[2022-05-17 06:56:06] CPU #4: 4.08 kH/s
[2022-05-17 06:56:06] CPU #5: 4.09 kH/s
[2022-05-17 06:56:06] CPU #6: 4.10 kH/s
[2022-05-17 06:56:06] CPU #7: 4.09 kH/s
[2022-05-17 06:56:06] Total: 23.64 kH/s
[2022-05-17 06:56:06] CPU #1: 1.84 kH/s
[2022-05-17 06:56:06] CPU #2: 1.84 kH/s
[2022-05-17 06:56:06] CPU #3: 1.84 kH/s
[2022-05-17 06:56:06] CPU #0: 1.78 kH/s
[2022-05-17 06:56:11] Total: 23.68 kH/s
[2022-05-17 06:56:16] CPU #4: 4.09 kH/s
[2022-05-17 06:56:16] CPU #5: 4.09 kH/s
[2022-05-17 06:56:16] CPU #6: 4.10 kH/s
[2022-05-17 06:56:16] CPU #7: 4.09 kH/s
[2022-05-17 06:56:16] Total: 23.68 kH/s
[2022-05-17 06:56:16] CPU #1: 1.84 kH/s
[2022-05-17 06:56:16] CPU #2: 1.84 kH/s
[2022-05-17 06:56:16] CPU #3: 1.84 kH/s
[2022-05-17 06:56:16] CPU #0: 1.76 kH/s
[2022-05-17 06:56:21] Total: 23.65 kH/s
[2022-05-17 06:56:26] CPU #4: 4.09 kH/s
[2022-05-17 06:56:26] CPU #5: 4.09 kH/s
[2022-05-17 06:56:26] CPU #6: 4.09 kH/s
[2022-05-17 06:56:26] CPU #7: 4.08 kH/s
[2022-05-17 06:56:26] Total: 23.65 kH/s
[2022-05-17 06:56:26] CPU #1: 1.84 kH/s
[2022-05-17 06:56:26] CPU #2: 1.84 kH/s
[2022-05-17 06:56:26] CPU #3: 1.84 kH/s
[2022-05-17 06:56:26] CPU #0: 1.78 kH/s
[2022-05-17 06:56:31] Total: 23.62 kH/s
[2022-05-17 06:56:36] CPU #4: 4.09 kH/s
[2022-05-17 06:56:36] CPU #6: 4.09 kH/s
[2022-05-17 06:56:36] CPU #7: 4.06 kH/s
[2022-05-17 06:56:36] Total: 23.59 kH/s
[2022-05-17 06:56:36] CPU #1: 1.84 kH/s
[2022-05-17 06:56:36] CPU #5: 3.99 kH/s
[2022-05-17 06:56:36] CPU #2: 1.84 kH/s
[2022-05-17 06:56:36] CPU #3: 1.84 kH/s
[2022-05-17 06:56:36] CPU #0: 1.77 kH/s
[2022-05-17 06:56:41] Total: 23.50 kH/s
[2022-05-17 06:56:46] CPU #6: 4.10 kH/s
[2022-05-17 06:56:46] CPU #4: 4.04 kH/s
[2022-05-17 06:56:46] CPU #5: 4.03 kH/s
[2022-05-17 06:56:46] CPU #7: 4.08 kH/s
[2022-05-17 06:56:46] Total: 23.60 kH/s
[2022-05-17 06:56:46] CPU #1: 1.84 kH/s
[2022-05-17 06:56:46] CPU #0: 1.83 kH/s
[2022-05-17 06:56:46] CPU #2: 1.84 kH/s
[2022-05-17 06:56:46] CPU #3: 1.84 kH/s
[2022-05-17 06:56:51] Total: 23.61 kH/s
[2022-05-17 06:56:56] CPU #5: 4.09 kH/s
[2022-05-17 06:56:56] CPU #6: 4.09 kH/s
[2022-05-17 06:56:56] CPU #7: 4.06 kH/s
[2022-05-17 06:56:56] Total: 23.64 kH/s
[2022-05-17 06:56:56] CPU #1: 1.84 kH/s
[2022-05-17 06:56:56] CPU #0: 1.83 kH/s
[2022-05-17 06:56:56] CPU #2: 1.84 kH/s
[2022-05-17 06:56:56] CPU #3: 1.84 kH/s
[2022-05-17 06:56:56] CPU #4: 3.93 kH/s
[2022-05-17 06:57:01] Total: 23.54 kH/s
[2022-05-17 06:57:06] CPU #5: 4.09 kH/s
[2022-05-17 06:57:06] CPU #6: 4.08 kH/s
[2022-05-17 06:57:06] CPU #7: 4.06 kH/s
[2022-05-17 06:57:06] Total: 23.57 kH/s
[2022-05-17 06:57:06] CPU #0: 1.83 kH/s
[2022-05-17 06:57:06] CPU #1: 1.84 kH/s
[2022-05-17 06:57:06] CPU #2: 1.84 kH/s
[2022-05-17 06:57:06] CPU #4: 3.98 kH/s
[2022-05-17 06:57:06] CPU #3: 1.84 kH/s
[2022-05-17 06:57:11] Total: 23.58 kH/s
[2022-05-17 06:57:16] CPU #6: 4.09 kH/s
[2022-05-17 06:57:16] CPU #4: 4.04 kH/s
[2022-05-17 06:57:16] CPU #5: 4.04 kH/s
[2022-05-17 06:57:16] CPU #7: 4.07 kH/s
[2022-05-17 06:57:16] Total: 23.60 kH/s
[2022-05-17 06:57:16] CPU #0: 1.84 kH/s
[2022-05-17 06:57:16] CPU #1: 1.84 kH/s
[2022-05-17 06:57:16] CPU #2: 1.84 kH/s
[2022-05-17 06:57:16] CPU #3: 1.84 kH/s
[2022-05-17 06:57:21] Total: 23.66 kH/s
[2022-05-17 06:57:26] CPU #6: 4.10 kH/s
[2022-05-17 06:57:26] CPU #5: 4.04 kH/s
[2022-05-17 06:57:26] CPU #7: 4.07 kH/s
[2022-05-17 06:57:26] Total: 23.55 kH/s
[2022-05-17 06:57:26] CPU #1: 1.84 kH/s
[2022-05-17 06:57:26] CPU #0: 1.83 kH/s
[2022-05-17 06:57:26] CPU #2: 1.84 kH/s
[2022-05-17 06:57:26] CPU #4: 3.98 kH/s
[2022-05-17 06:57:26] CPU #3: 1.84 kH/s
[2022-05-17 06:57:31] Total: 23.59 kH/s
[2022-05-17 06:57:36] CPU #5: 4.09 kH/s
[2022-05-17 06:57:36] CPU #6: 4.09 kH/s
[2022-05-17 06:57:36] CPU #1: 1.84 kH/s
[2022-05-17 06:57:36] CPU #2: 1.84 kH/s
[2022-05-17 06:57:36] CPU #0: 1.83 kH/s
[2022-05-17 06:57:36] CPU #7: 4.06 kH/s
[2022-05-17 06:57:36] Total: 23.59 kH/s
[2022-05-17 06:57:36] CPU #4: 3.98 kH/s
[2022-05-17 06:57:36] CPU #3: 1.84 kH/s
[2022-05-17 06:57:41] Total: 23.70 kH/s
[2022-05-17 06:57:46] CPU #5: 4.09 kH/s
[2022-05-17 06:57:46] CPU #6: 4.10 kH/s
[2022-05-17 06:57:46] CPU #0: 1.84 kH/s
[2022-05-17 06:57:46] CPU #1: 1.84 kH/s
[2022-05-17 06:57:46] CPU #2: 1.84 kH/s
[2022-05-17 06:57:46] CPU #7: 4.06 kH/s
[2022-05-17 06:57:46] Total: 23.70 kH/s
[2022-05-17 06:57:46] CPU #4: 3.98 kH/s
[2022-05-17 06:57:46] CPU #3: 1.84 kH/s
[2022-05-17 06:57:51] Total: 23.72 kH/s
[2022-05-17 06:57:56] CPU #6: 4.09 kH/s
[2022-05-17 06:57:56] CPU #4: 4.03 kH/s
[2022-05-17 06:57:56] CPU #5: 4.03 kH/s
[2022-05-17 06:57:56] CPU #0: 1.84 kH/s
[2022-05-17 06:57:56] CPU #7: 4.07 kH/s
[2022-05-17 06:57:56] Total: 23.58 kH/s
[2022-05-17 06:57:56] CPU #1: 1.84 kH/s
[2022-05-17 06:57:56] CPU #2: 1.84 kH/s
[2022-05-17 06:57:56] CPU #3: 1.84 kH/s
[2022-05-17 06:58:01] Total: 23.66 kH/s
[2022-05-17 06:58:06] CPU #5: 4.09 kH/s
[2022-05-17 06:58:06] CPU #6: 4.10 kH/s
[2022-05-17 06:58:06] CPU #7: 4.08 kH/s
[2022-05-17 06:58:06] Total: 23.56 kH/s
[2022-05-17 06:58:06] CPU #0: 1.84 kH/s
[2022-05-17 06:58:06] CPU #2: 1.84 kH/s
[2022-05-17 06:58:06] CPU #1: 1.84 kH/s
[2022-05-17 06:58:06] CPU #3: 1.84 kH/s
[2022-05-17 06:58:06] CPU #4: 3.98 kH/s
[2022-05-17 06:58:11] Total: 23.59 kH/s
[2022-05-17 06:58:16] CPU #6: 4.10 kH/s
[2022-05-17 06:58:16] CPU #4: 4.04 kH/s
[2022-05-17 06:58:16] CPU #2: 1.84 kH/s
[2022-05-17 06:58:16] CPU #0: 1.83 kH/s
[2022-05-17 06:58:16] CPU #7: 4.07 kH/s
[2022-05-17 06:58:16] Total: 23.65 kH/s
[2022-05-17 06:58:16] CPU #1: 1.84 kH/s
[2022-05-17 06:58:16] CPU #3: 1.84 kH/s
[2022-05-17 06:58:16] CPU #5: 3.99 kH/s
[2022-05-17 06:58:21] Total: 23.65 kH/s
[2022-05-17 06:58:26] CPU #6: 4.09 kH/s
[2022-05-17 06:58:26] CPU #4: 4.04 kH/s
[2022-05-17 06:58:26] CPU #5: 4.04 kH/s
[2022-05-17 06:58:26] CPU #0: 1.84 kH/s
[2022-05-17 06:58:26] CPU #2: 1.84 kH/s
[2022-05-17 06:58:26] CPU #1: 1.84 kH/s
[2022-05-17 06:58:26] CPU #3: 1.84 kH/s
[2022-05-17 06:58:26] CPU #7: 4.06 kH/s
[2022-05-17 06:58:26] Total: 23.59 kH/s
[2022-05-17 06:58:31] Total: 23.56 kH/s
[2022-05-17 06:58:36] CPU #6: 4.09 kH/s
[2022-05-17 06:58:36] CPU #4: 4.05 kH/s
[2022-05-17 06:58:36] CPU #5: 4.05 kH/s
[2022-05-17 06:58:36] CPU #2: 1.84 kH/s
[2022-05-17 06:58:36] CPU #1: 1.84 kH/s
[2022-05-17 06:58:36] CPU #3: 1.84 kH/s
[2022-05-17 06:58:36] CPU #7: 4.06 kH/s
[2022-05-17 06:58:36] Total: 23.60 kH/s
[2022-05-17 06:58:36] CPU #0: 1.76 kH/s
[2022-05-17 06:58:41] Total: 23.49 kH/s
[2022-05-17 06:58:46] CPU #4: 4.09 kH/s
[2022-05-17 06:58:46] CPU #6: 4.09 kH/s
[2022-05-17 06:58:46] CPU #2: 1.84 kH/s
[2022-05-17 06:58:46] CPU #1: 1.84 kH/s
[2022-05-17 06:58:46] CPU #7: 4.07 kH/s
[2022-05-17 06:58:46] Total: 23.60 kH/s
[2022-05-17 06:58:46] CPU #3: 1.84 kH/s
[2022-05-17 06:58:46] CPU #0: 1.83 kH/s
[2022-05-17 06:58:46] CPU #5: 3.94 kH/s
[2022-05-17 06:58:51] Total: 23.59 kH/s
[2022-05-17 06:58:56] CPU #4: 4.09 kH/s
[2022-05-17 06:58:56] CPU #6: 4.09 kH/s
[2022-05-17 06:58:56] CPU #2: 1.84 kH/s
[2022-05-17 06:58:56] CPU #1: 1.84 kH/s
[2022-05-17 06:58:56] CPU #3: 1.84 kH/s
[2022-05-17 06:58:56] CPU #7: 4.06 kH/s
[2022-05-17 06:58:56] Total: 23.53 kH/s
[2022-05-17 06:58:56] CPU #5: 3.98 kH/s
[2022-05-17 06:58:56] CPU #0: 1.76 kH/s
[2022-05-17 06:59:01] Total: 23.47 kH/s
[2022-05-17 06:59:06] CPU #5: 4.08 kH/s
[2022-05-17 06:59:06] CPU #6: 4.09 kH/s
[2022-05-17 06:59:06] CPU #4: 4.01 kH/s
[2022-05-17 06:59:06] CPU #1: 1.84 kH/s
[2022-05-17 06:59:06] CPU #2: 1.84 kH/s
[2022-05-17 06:59:06] CPU #3: 1.84 kH/s
[2022-05-17 06:59:06] CPU #7: 4.08 kH/s
[2022-05-17 06:59:06] Total: 23.60 kH/s
[2022-05-17 06:59:06] CPU #0: 1.77 kH/s
[2022-05-17 06:59:11] Total: 23.54 kH/s
[2022-05-17 06:59:16] CPU #4: 4.09 kH/s
[2022-05-17 06:59:16] CPU #6: 4.10 kH/s
[2022-05-17 06:59:16] CPU #1: 1.84 kH/s
[2022-05-17 06:59:16] CPU #7: 4.09 kH/s
[2022-05-17 06:59:16] Total: 23.62 kH/s
[2022-05-17 06:59:16] CPU #2: 1.84 kH/s
[2022-05-17 06:59:16] CPU #3: 1.84 kH/s
[2022-05-17 06:59:16] CPU #0: 1.83 kH/s
[2022-05-17 06:59:16] CPU #5: 3.97 kH/s
[2022-05-17 06:59:21] Total: 23.59 kH/s
[2022-05-17 06:59:26] CPU #4: 4.09 kH/s
[2022-05-17 06:59:26] CPU #6: 4.08 kH/s
[2022-05-17 06:59:26] CPU #1: 1.84 kH/s
[2022-05-17 06:59:26] CPU #2: 1.84 kH/s
[2022-05-17 06:59:26] CPU #3: 1.84 kH/s
[2022-05-17 06:59:26] CPU #7: 4.06 kH/s
[2022-05-17 06:59:26] Total: 23.51 kH/s
[2022-05-17 06:59:26] CPU #5: 3.96 kH/s
[2022-05-17 06:59:26] CPU #0: 1.82 kH/s
[2022-05-17 06:59:31] Total: 23.51 kH/s
[2022-05-17 06:59:36] CPU #4: 4.09 kH/s
[2022-05-17 06:59:36] CPU #6: 4.09 kH/s
[2022-05-17 06:59:36] CPU #1: 1.84 kH/s
[2022-05-17 06:59:36] CPU #2: 1.84 kH/s
[2022-05-17 06:59:36] CPU #3: 1.84 kH/s
[2022-05-17 06:59:36] CPU #0: 1.83 kH/s
[2022-05-17 06:59:36] CPU #5: 3.98 kH/s
[2022-05-17 06:59:36] CPU #7: 4.06 kH/s
[2022-05-17 06:59:36] Total: 23.58 kH/s
[2022-05-17 06:59:41] Total: 23.59 kH/s
[2022-05-17 06:59:46] CPU #4: 4.09 kH/s
[2022-05-17 06:59:46] CPU #6: 4.09 kH/s
[2022-05-17 06:59:46] CPU #1: 1.84 kH/s
[2022-05-17 06:59:46] CPU #2: 1.84 kH/s
[2022-05-17 06:59:46] CPU #3: 1.84 kH/s
[2022-05-17 06:59:46] CPU #0: 1.83 kH/s
[2022-05-17 06:59:46] CPU #7: 4.06 kH/s
[2022-05-17 06:59:46] Total: 23.57 kH/s
[2022-05-17 06:59:46] CPU #5: 3.98 kH/s
[2022-05-17 06:59:51] Total: 23.71 kH/s
[2022-05-17 06:59:56] CPU #6: 4.09 kH/s
[2022-05-17 06:59:56] CPU #5: 4.08 kH/s
[2022-05-17 06:59:56] CPU #1: 1.84 kH/s
[2022-05-17 06:59:56] CPU #2: 1.84 kH/s
[2022-05-17 06:59:56] CPU #3: 1.84 kH/s
[2022-05-17 06:59:56] CPU #7: 4.09 kH/s
[2022-05-17 06:59:56] Total: 23.55 kH/s
[2022-05-17 06:59:56] CPU #0: 1.83 kH/s
[2022-05-17 06:59:56] CPU #4: 3.98 kH/s
[2022-05-17 07:00:01] Total: 23.62 kH/s
[2022-05-17 07:00:06] CPU #6: 4.08 kH/s
[2022-05-17 07:00:06] CPU #5: 4.03 kH/s
[2022-05-17 07:00:06] CPU #1: 1.84 kH/s
[2022-05-17 07:00:06] CPU #2: 1.84 kH/s
[2022-05-17 07:00:06] CPU #3: 1.84 kH/s
[2022-05-17 07:00:06] CPU #7: 4.08 kH/s
[2022-05-17 07:00:06] Total: 23.58 kH/s
[2022-05-17 07:00:06] CPU #4: 3.98 kH/s
[2022-05-17 07:00:06] CPU #0: 1.83 kH/s
[2022-05-17 07:00:11] Total: 23.58 kH/s
[2022-05-17 07:00:16] CPU #4: 4.09 kH/s
[2022-05-17 07:00:16] CPU #6: 4.10 kH/s
[2022-05-17 07:00:16] CPU #1: 1.84 kH/s
[2022-05-17 07:00:16] CPU #2: 1.84 kH/s
[2022-05-17 07:00:16] CPU #3: 1.84 kH/s
[2022-05-17 07:00:16] CPU #0: 1.84 kH/s
[2022-05-17 07:00:16] CPU #5: 3.98 kH/s
[2022-05-17 07:00:16] CPU #7: 4.07 kH/s
[2022-05-17 07:00:16] Total: 23.59 kH/s
[2022-05-17 07:00:21] Total: 23.70 kH/s
[2022-05-17 07:00:26] CPU #5: 4.09 kH/s
[2022-05-17 07:00:26] CPU #6: 4.09 kH/s
[2022-05-17 07:00:26] CPU #2: 1.84 kH/s
[2022-05-17 07:00:26] CPU #1: 1.84 kH/s
[2022-05-17 07:00:26] CPU #3: 1.84 kH/s
[2022-05-17 07:00:26] CPU #0: 1.83 kH/s
[2022-05-17 07:00:26] CPU #4: 3.98 kH/s
[2022-05-17 07:00:26] CPU #7: 4.07 kH/s
[2022-05-17 07:00:26] Total: 23.59 kH/s
[2022-05-17 07:00:31] Total: 23.61 kH/s

Total Scores: 23.72,23.71,23.70,23.69,23.68,23.67,23.66,23.65,23.64,23.63,23.62,23.61,23.60,23.59,23.58,23.57,23.56,23.55,23.54,23.53,23.51,23.50,23.49,23.47

##########################################################################

Testing clockspeeds again. System health now:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
07:00:09: 2400/1800MHz  8.22 100%   0%  99%   0%   0%   0%  67.5°C

Checking cpufreq OPP for cpu0-cpu3 (Cortex-A55):

Cpufreq OPP: 1800    Measured: 1780 (1775.245/1769.058/1574.093)
Cpufreq OPP: 1608    Measured: 1600 (1595.520/1595.244/1593.747)
Cpufreq OPP: 1416    Measured: 1445 (1440.556/1413.451/1403.007)
Cpufreq OPP: 1200    Measured: 1220 (1218.153/1208.759/1200.653)
Cpufreq OPP: 1008    Measured:  995 (991.344/990.560/990.477)
Cpufreq OPP:  816    Measured:  800 (797.323/787.310/779.581)
Cpufreq OPP:  600    Measured:  595 (590.547/589.540/584.227)
Cpufreq OPP:  408    Measured:  395 (392.710/392.514/389.645)

Checking cpufreq OPP for cpu4-cpu5 (Cortex-A76):

Cpufreq OPP: 2400    Measured: 1670 (1667.892/1667.051/922.606)
Cpufreq OPP: 2208    Measured: 2150 (2149.412/2148.932/1823.865)
Cpufreq OPP: 2016    Measured: 1985 (1983.833/1983.394/1983.370)
Cpufreq OPP: 1800    Measured: 1820 (1815.377/1251.915/1134.234)
Cpufreq OPP: 1608    Measured: 1620 (1617.892/1426.456/897.344)
Cpufreq OPP: 1416    Measured: 1425 (1421.276/1420.885/874.719)
Cpufreq OPP: 1200    Measured: 1200 (1197.535/1197.452/1197.272)
Cpufreq OPP: 1008    Measured:  980 (976.087/975.799/975.696)
Cpufreq OPP:  816    Measured:  790 (787.456/787.381/787.212)
Cpufreq OPP:  600    Measured:  595 (593.130/593.024/592.811)
Cpufreq OPP:  408    Measured:  395 (394.983/394.950/394.725)

Checking cpufreq OPP for cpu6-cpu7 (Cortex-A76):

Cpufreq OPP: 2400    Measured: 2310 (2308.794/2308.609/2308.028)
Cpufreq OPP: 2208    Measured: 2145 (2143.635/2096.502/2072.874)
Cpufreq OPP: 2016    Measured: 1840 (1837.030/1747.776/1609.198)
Cpufreq OPP: 1800    Measured: 1795 (1792.814/1790.070/1010.920)
Cpufreq OPP: 1608    Measured: 1595 (1593.964/1593.315/1590.743)
Cpufreq OPP: 1416    Measured: 1395 (1393.965/1393.845/973.387)
Cpufreq OPP: 1200    Measured: 1205 (1204.882/1204.840/918.714)
Cpufreq OPP: 1008    Measured:  985 (984.354/984.049/666.449)
Cpufreq OPP:  816    Measured:  795 (792.022/791.765/404.280)
Cpufreq OPP:  600    Measured:  595 (592.878/592.851/592.632)
Cpufreq OPP:  408    Measured:  400 (395.010/394.918/394.913)

##########################################################################

Hardware sensors:

npu_thermal-virtual-0
temp1:        +57.3 C  

center_thermal-virtual-0
temp1:        +57.3 C  

bigcore1_thermal-virtual-0
temp1:        +61.9 C  

soc_thermal-virtual-0
temp1:        +60.1 C  (crit = +115.0 C)

gpu_thermal-virtual-0
temp1:        +55.5 C  

littlecore_thermal-virtual-0
temp1:        +60.1 C  

bigcore0_thermal-virtual-0
temp1:        +61.9 C  

##########################################################################

Thermal source: /sys/devices/virtual/thermal/thermal_zone0/ (soc-thermal)

System health while running tinymembench:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
06:32:13: 2400/1800MHz  0.53   7%   2%   3%   0%   1%   0%  37.9°C
06:34:13: 2400/1800MHz  1.10  12%   0%  12%   0%   0%   0%  44.4°C
06:36:13: 2400/1800MHz  1.04  12%   0%  12%   0%   0%   0%  38.8°C
06:38:13: 2400/1800MHz  1.06  12%   0%  12%   0%   0%   0%  39.8°C
06:40:13: 2400/1800MHz  1.16  12%   0%  12%   0%   0%   0%  52.7°C
06:42:13: 2400/1800MHz  1.06  12%   0%  12%   0%   0%   0%  40.7°C
06:44:13: 2400/1800MHz  1.01  12%   0%  12%   0%   0%   0%  50.8°C

System health while running ramlat:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
06:46:06: 2400/1800MHz  1.17  12%   0%  11%   0%   0%   0%  42.5°C
06:46:16: 2400/1800MHz  1.22  12%   0%  12%   0%   0%   0%  39.8°C
06:46:25: 2400/1800MHz  1.20  12%   0%  12%   0%   0%   0%  39.8°C
06:46:34: 2400/1800MHz  1.17  12%   0%  12%   0%   0%   0%  39.8°C
06:46:43: 2400/1800MHz  1.14  13%   0%  12%   0%   0%   0%  40.7°C
06:46:52: 2400/1800MHz  1.12  12%   0%  12%   0%   0%   0%  41.6°C
06:47:01: 2400/1800MHz  1.25  13%   0%  12%   0%   0%   0%  41.6°C
06:47:10: 2400/1800MHz  1.23  13%   0%  12%   0%   0%   0%  42.5°C

System health while running OpenSSL benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
06:47:12: 2400/1800MHz  1.21  12%   0%  11%   0%   0%   0%  42.5°C
06:47:28: 2400/1800MHz  1.17  12%   0%  12%   0%   0%   0%  38.8°C
06:47:44: 2400/1800MHz  1.13  12%   0%  12%   0%   0%   0%  40.7°C
06:48:01: 2400/1800MHz  1.15  13%   0%  12%   0%   0%   0%  41.6°C
06:48:17: 2400/1800MHz  1.12  13%   0%  12%   0%   0%   0%  38.8°C
06:48:33: 2400/1800MHz  1.09  12%   0%  12%   0%   0%   0%  40.7°C
06:48:49: 2400/1800MHz  1.07  12%   0%  12%   0%   0%   0%  41.6°C
06:49:05: 2400/1800MHz  1.06  12%   0%  12%   0%   0%   0%  38.8°C
06:49:21: 2400/1800MHz  1.12  12%   0%  12%   0%   0%   0%  41.6°C
06:49:37: 2400/1800MHz  1.17  12%   0%  12%   0%   0%   0%  42.5°C
06:49:53: 2400/1800MHz  1.13  13%   0%  12%   0%   0%   0%  40.7°C

System health while running 7-zip single core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
06:49:55: 2400/1800MHz  1.13  12%   0%  11%   0%   0%   0%  41.6°C
06:50:05: 2400/1800MHz  1.11  12%   0%  12%   0%   0%   0%  39.8°C
06:50:15: 2400/1800MHz  1.18  12%   0%  12%   0%   0%   0%  39.8°C
06:50:25: 2400/1800MHz  1.15  12%   0%  12%   0%   0%   0%  38.8°C
06:50:35: 2400/1800MHz  1.12  12%   0%  12%   0%   0%   0%  38.8°C
06:50:45: 2400/1800MHz  1.11  12%   0%  12%   0%   0%   0%  39.8°C
06:50:55: 2400/1800MHz  1.09  12%   0%  12%   0%   0%   0%  38.8°C
06:51:05: 2400/1800MHz  1.07  12%   0%  12%   0%   0%   0%  38.8°C
06:51:15: 2400/1800MHz  1.06  12%   0%  12%   0%   0%   0%  38.8°C
06:51:25: 2400/1800MHz  1.05  12%   0%  12%   0%   0%   0%  38.8°C
06:51:35: 2400/1800MHz  1.12  13%   0%  12%   0%   0%   0%  40.7°C
06:51:45: 2400/1800MHz  1.10  13%   0%  12%   0%   0%   0%  41.6°C
06:51:55: 2400/1800MHz  1.24  13%   0%  12%   0%   0%   0%  42.5°C
06:52:05: 2400/1800MHz  1.36  12%   0%  12%   0%   0%   0%  41.6°C
06:52:15: 2400/1800MHz  1.30  12%   0%  12%   0%   0%   0%  42.5°C
06:52:25: 2400/1800MHz  1.26  13%   0%  12%   0%   0%   0%  42.5°C
06:52:35: 2400/1800MHz  1.22  13%   0%  12%   0%   0%   0%  42.5°C
06:52:45: 2400/1800MHz  1.18  12%   0%  12%   0%   0%   0%  42.5°C
06:52:55: 2400/1800MHz  1.23  13%   0%  12%   0%   0%   0%  42.5°C

System health while running 7-zip multi core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
06:52:58: 2400/1800MHz  1.21  12%   0%  11%   0%   0%   0%  43.5°C
06:53:08: 2400/1800MHz  2.48  85%   0%  84%   0%   0%   0%  59.2°C
06:53:18: 2400/1800MHz  3.40  84%   0%  83%   0%   0%   0%  62.8°C
06:53:31: 2400/1800MHz  3.11  82%   1%  80%   0%   0%   0%  63.8°C
06:53:41: 2400/1800MHz  4.42  80%   1%  79%   0%   0%   0%  62.8°C
06:53:51: 2400/1800MHz  4.65  84%   1%  82%   0%   0%   0%  60.1°C
06:54:01: 2400/1800MHz  4.85  90%   0%  88%   0%   0%   0%  61.9°C
06:54:11: 2400/1800MHz  5.01  86%   1%  85%   0%   0%   0%  61.9°C
06:54:23: 2400/1800MHz  5.62  86%   1%  84%   0%   0%   0%  66.5°C
06:54:33: 2400/1800MHz  5.47  80%   1%  78%   0%   0%   0%  64.7°C
06:54:43: 2400/1800MHz  5.71  84%   1%  82%   0%   0%   0%  61.0°C
06:54:53: 2400/1800MHz  6.21  91%   0%  90%   0%   0%   0%  64.7°C
06:55:03: 2400/1800MHz  6.79  82%   1%  81%   0%   0%   0%  64.7°C
06:55:13: 2400/1800MHz  6.46  82%   1%  80%   0%   0%   0%  67.5°C
06:55:23: 2400/1800MHz  6.78  79%   1%  77%   0%   0%   0%  66.5°C
06:55:33: 2400/1800MHz  7.11  97%   1%  95%   0%   0%   0%  67.5°C

System health while running cpuminer:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
06:55:41: 2400/1800MHz  6.62  20%   0%  19%   0%   0%   0%  66.5°C
06:56:25: 2400/1800MHz  7.39 100%   0%  99%   0%   0%   0%  67.5°C
06:57:10: 2400/1800MHz  7.76 100%   0%  99%   0%   0%   0%  67.5°C
06:57:55: 2400/1800MHz  7.97  99%   0%  99%   0%   0%   0%  67.5°C
06:58:39: 2400/1800MHz  8.20  99%   0%  99%   0%   0%   0%  67.5°C
06:59:24: 2400/1800MHz  8.42 100%   0%  99%   0%   0%   0%  67.5°C
07:00:09: 2400/1800MHz  8.22 100%   0%  99%   0%   0%   0%  67.5°C

##########################################################################

Linux 5.10.66-rockchip-5.10 (radxa) 	05/17/22 	_aarch64_	(8 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          33.37    0.00    0.73    0.06    0.00   65.83

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk0           2.53        93.32        12.42         0.00     170307      22673          0

               total        used        free      shared  buff/cache   available
Mem:           3.7Gi       324Mi       3.2Gi       9.0Mi       114Mi       3.3Gi
Swap:             0B          0B          0B

CPU sysfs topology (clusters, cpufreq members, clockspeeds)
                 cpufreq   min    max
 CPU    cluster  policy   speed  speed   core type
  0        0        0      408    1800   Cortex-A55 / r2p0
  1        0        0      408    1800   Cortex-A55 / r2p0
  2        0        0      408    1800   Cortex-A55 / r2p0
  3        0        0      408    1800   Cortex-A55 / r2p0
  4        1        4      408    2400   Cortex-A76 / r4p0
  5        1        4      408    2400   Cortex-A76 / r4p0
  6        2        6      408    2400   Cortex-A76 / r4p0
  7        2        6      408    2400   Cortex-A76 / r4p0

Architecture:                    aarch64
CPU op-mode(s):                  32-bit, 64-bit
Byte Order:                      Little Endian
CPU(s):                          8
On-line CPU(s) list:             0-7
Thread(s) per core:              1
Core(s) per socket:              2
Socket(s):                       3
Vendor ID:                       ARM
Model:                           0
Model name:                      Cortex-A55
Stepping:                        r2p0
CPU max MHz:                     2400.0000
CPU min MHz:                     408.0000
BogoMIPS:                        48.00
L1d cache:                       256 KiB
L1i cache:                       256 KiB
L2 cache:                        1 MiB
L3 cache:                        3 MiB
Vulnerability Itlb multihit:     Not affected
Vulnerability L1tf:              Not affected
Vulnerability Mds:               Not affected
Vulnerability Meltdown:          Not affected
Vulnerability Spec store bypass: Mitigation; Speculative Store Bypass disabled via prctl
Vulnerability Spectre v1:        Mitigation; __user pointer sanitization
Vulnerability Spectre v2:        Not affected
Vulnerability Srbds:             Not affected
Vulnerability Tsx async abort:   Not affected
Flags:                           fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhp cpuid asimdrdm lrcpc dcpop asimddp

SoC guess: Rockchip RK3588 (35880000)
DT compat: radxa,rock-5a
           rockchip,rk3588
 Compiler: /usr/bin/gcc (Debian 10.2.1-6) 10.2.1 20210110 / aarch64-linux-gnu
 Userland: arm64
   Kernel: 5.10.66-rockchip-5.10/aarch64
           CONFIG_HZ=300
           CONFIG_HZ_300=y
           CONFIG_PREEMPT_VOLUNTARY=y

cpu0/index2: 128K, level: 2, type: Unified
cpu0/index0: 32K, level: 1, type: Data
cpu0/index3: 3072K, level: 3, type: Unified
cpu0/index1: 32K, level: 1, type: Instruction
cpu1/index2: 128K, level: 2, type: Unified
cpu1/index0: 32K, level: 1, type: Data
cpu1/index3: 3072K, level: 3, type: Unified
cpu1/index1: 32K, level: 1, type: Instruction
cpu2/index2: 128K, level: 2, type: Unified
cpu2/index0: 32K, level: 1, type: Data
cpu2/index3: 3072K, level: 3, type: Unified
cpu2/index1: 32K, level: 1, type: Instruction
cpu3/index2: 128K, level: 2, type: Unified
cpu3/index0: 32K, level: 1, type: Data
cpu3/index3: 3072K, level: 3, type: Unified
cpu3/index1: 32K, level: 1, type: Instruction
cpu4/index2: 512K, level: 2, type: Unified
cpu4/index0: 64K, level: 1, type: Data
cpu4/index3: 3072K, level: 3, type: Unified
cpu4/index1: 64K, level: 1, type: Instruction
cpu5/index2: 512K, level: 2, type: Unified
cpu5/index0: 64K, level: 1, type: Data
cpu5/index3: 3072K, level: 3, type: Unified
cpu5/index1: 64K, level: 1, type: Instruction
cpu6/index2: 512K, level: 2, type: Unified
cpu6/index0: 64K, level: 1, type: Data
cpu6/index3: 3072K, level: 3, type: Unified
cpu6/index1: 64K, level: 1, type: Instruction
cpu7/index2: 512K, level: 2, type: Unified
cpu7/index0: 64K, level: 1, type: Data
cpu7/index3: 3072K, level: 3, type: Unified
cpu7/index1: 64K, level: 1, type: Instruction

| Radxa ROCK 5A | 2400/2400 MHz | 5.10 | Debian GNU/Linux 11 (bullseye) arm64 | 16030 | 647210 | 1325370 | 10810 | 28150 | 23.71 |