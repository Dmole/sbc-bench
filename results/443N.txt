sbc-bench v0.9.8 Apple MacBook Pro (14-inch, M1 Pro, 2021) extensive (Mon, 11 Jul 2022 20:52:33 +1000)

Distributor ID:	Gentoo
Description:	Gentoo Base System release 2.8
Release:	2.8

/usr/bin/gcc (Gentoo 12.1.1_p20220625 p8) 12.1.1 20220625

Uptime: 20:52:33 up  3:10,  2 users,  load average: 0.58, 0.49, 0.82,  0°C

Linux 5.18.0-asahi-ARCH (usagi) 	07/11/22 	_aarch64_	(10 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          11.81    0.00    1.45    0.04    0.00   86.70

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
nvme0n1          13.97       264.12       833.00         0.00    3023780    9536700          0
nvme0n2           0.00         0.07         0.00         0.00        752          0          0
nvme0n3           0.01         0.19         0.00         0.00       2224          0          0

               total        used        free      shared  buff/cache   available
Mem:            15Gi       224Mi        14Gi        27Mi       156Mi        14Gi
Swap:           16Gi          0B        16Gi

Filename				Type		Size		Used		Priority
/dev/nvme0n1p6                          partition	16782416	0		-2

##########################################################################

Checking cpufreq OPP for cpu0-cpu1:

Cpufreq OPP: 2064    Measured: 2060 (2060.995/2060.953/2060.932)
Cpufreq OPP: 1704    Measured: 1700 (1701.029/1700.921/1700.903)
Cpufreq OPP: 1332    Measured: 1328 (1328.907/1328.538/1327.746)
Cpufreq OPP:  972    Measured:  968    (968.946/968.833/968.765)
Cpufreq OPP:  600    Measured:  597    (597.101/597.060/597.040)

Checking cpufreq OPP for cpu2-cpu5:

Cpufreq OPP: 3036    Measured: 3033 (3033.924/3033.705/3033.522)
Cpufreq OPP: 2904    Measured: 2901 (2901.698/2901.531/2900.830)
Cpufreq OPP: 2676    Measured: 2673 (2673.522/2673.408/2673.295)
Cpufreq OPP: 2448    Measured: 2444 (2445.763/2445.674/2443.423)
Cpufreq OPP: 2208    Measured: 2203 (2205.786/2205.038/2198.718)
Cpufreq OPP: 1980    Measured: 1977 (1977.635/1977.489/1977.005)
Cpufreq OPP: 1752    Measured: 1749 (1749.727/1749.595/1749.462)
Cpufreq OPP: 1524    Measured: 1521 (1521.792/1521.774/1521.433)
Cpufreq OPP: 1296    Measured: 1293 (1293.731/1293.692/1293.692)
Cpufreq OPP: 1056    Measured: 1053 (1054.112/1053.800/1053.757)
Cpufreq OPP:  828    Measured:  825    (825.785/825.610/825.156)
Cpufreq OPP:  600    Measured:  597    (597.803/597.783/597.701)

Checking cpufreq OPP for cpu6-cpu9:

Cpufreq OPP: 3036    Measured: 3032 (3033.851/3033.595/3030.606)
Cpufreq OPP: 2904    Measured: 2901 (2901.999/2901.765/2901.665)
Cpufreq OPP: 2676    Measured: 2673 (2673.295/2673.040/2672.757)
Cpufreq OPP: 2448    Measured: 2448 (2454.182/2445.674/2445.644)
Cpufreq OPP: 2208    Measured: 2205 (2206.003/2205.737/2205.303)
Cpufreq OPP: 1980    Measured: 1977 (1977.950/1977.683/1977.562)
Cpufreq OPP: 1752    Measured: 1748 (1749.708/1749.670/1747.265)
Cpufreq OPP: 1524    Measured: 1521 (1521.846/1521.792/1521.505)
Cpufreq OPP: 1296    Measured: 1293 (1293.796/1293.666/1293.550)
Cpufreq OPP: 1056    Measured: 1053 (1053.833/1053.736/1053.671)
Cpufreq OPP:  828    Measured:  825    (825.785/825.641/825.599)
Cpufreq OPP:  600    Measured:  598    (598.357/597.951/597.769)

##########################################################################

Hardware sensors:

macsmc_ac-isa-0000
in0:          20.00 V  

macsmc_battery-virtual-0
temp1:        +32.3 C  

macsmc_battery-isa-0000
in0:          12.91 V  
temp:         +32.3 C  
curr1:         0.00 A  

/dev/nvme0n1:	35°C

##########################################################################

Executing benchmark on cpu0:

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :  13232.6 MB/s
 C copy backwards (32 byte blocks)                    :  12309.2 MB/s
 C copy backwards (64 byte blocks)                    :  12310.1 MB/s
 C copy                                               :  13202.9 MB/s
 C copy prefetched (32 bytes step)                    :  14260.4 MB/s
 C copy prefetched (64 bytes step)                    :  14533.6 MB/s
 C 2-pass copy                                        :   7413.0 MB/s
 C 2-pass copy prefetched (32 bytes step)             :   7988.8 MB/s
 C 2-pass copy prefetched (64 bytes step)             :   8052.4 MB/s
 C fill                                               :  15849.7 MB/s
 C fill (shuffle within 16 byte blocks)               :  15845.7 MB/s
 C fill (shuffle within 32 byte blocks)               :  15972.5 MB/s
 C fill (shuffle within 64 byte blocks)               :  15659.5 MB/s
 ---
 standard memcpy                                      :  15554.3 MB/s
 standard memset                                      :  19814.4 MB/s
 ---
 NEON LDP/STP copy                                    :  15670.2 MB/s
 NEON LDP/STP copy pldl2strm (32 bytes step)          :  15445.9 MB/s
 NEON LDP/STP copy pldl2strm (64 bytes step)          :  15512.7 MB/s
 NEON LDP/STP copy pldl1keep (32 bytes step)          :  15689.4 MB/s
 NEON LDP/STP copy pldl1keep (64 bytes step)          :  15701.1 MB/s
 NEON LD1/ST1 copy                                    :  15667.0 MB/s
 NEON STP fill                                        :  19809.1 MB/s
 NEON STNP fill                                       :  31538.7 MB/s
 ARM LDP/STP copy                                     :  15641.8 MB/s
 ARM STP fill                                         :  19808.1 MB/s
 ARM STNP fill                                        :  31539.2 MB/s

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :  15917.1 MB/s
 NEON LDP/STP 2-pass copy (from framebuffer)          :  12931.9 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :  15918.6 MB/s
 NEON LD1/ST1 2-pass copy (from framebuffer)          :  12931.0 MB/s
 ARM LDP/STP copy (from framebuffer)                  :  15891.8 MB/s
 ARM LDP/STP 2-pass copy (from framebuffer)           :  12820.6 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    0.0 ns          /     0.0 ns 
    131072 :    2.8 ns          /     4.1 ns 
    262144 :    4.2 ns          /     5.3 ns 
    524288 :    4.9 ns          /     5.7 ns 
   1048576 :    5.3 ns          /     5.9 ns 
   2097152 :    5.6 ns          /     5.9 ns 
   4194304 :   18.0 ns          /    27.5 ns 
   8388608 :   63.9 ns          /    95.0 ns 
  16777216 :   91.8 ns          /   121.0 ns 
  33554432 :  114.4 ns          /   138.7 ns 
  67108864 :  129.6 ns          /   147.9 ns 

Executing benchmark on cpu2:

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :  24635.1 MB/s
 C copy backwards (32 byte blocks)                    :  24611.3 MB/s
 C copy backwards (64 byte blocks)                    :  24610.9 MB/s
 C copy                                               :  24719.4 MB/s
 C copy prefetched (32 bytes step)                    :  24773.4 MB/s
 C copy prefetched (64 bytes step)                    :  24772.9 MB/s
 C 2-pass copy                                        :  19913.4 MB/s
 C 2-pass copy prefetched (32 bytes step)             :  20417.2 MB/s
 C 2-pass copy prefetched (64 bytes step)             :  20765.9 MB/s
 C fill                                               :  41526.4 MB/s
 C fill (shuffle within 16 byte blocks)               :  41563.4 MB/s
 C fill (shuffle within 32 byte blocks)               :  39785.2 MB/s
 C fill (shuffle within 64 byte blocks)               :  38575.2 MB/s
 ---
 standard memcpy                                      :  27023.2 MB/s
 standard memset                                      :  70275.3 MB/s (8.2%)
 ---
 NEON LDP/STP copy                                    :  27359.2 MB/s (0.2%)
 NEON LDP/STP copy pldl2strm (32 bytes step)          :  28399.8 MB/s (0.1%)
 NEON LDP/STP copy pldl2strm (64 bytes step)          :  27953.0 MB/s (0.1%)
 NEON LDP/STP copy pldl1keep (32 bytes step)          :  27013.0 MB/s
 NEON LDP/STP copy pldl1keep (64 bytes step)          :  27105.3 MB/s (0.1%)
 NEON LD1/ST1 copy                                    :  27344.0 MB/s
 NEON STP fill                                        :  70208.6 MB/s (8.3%)
 NEON STNP fill                                       :  70565.6 MB/s (1.2%)
 ARM LDP/STP copy                                     :  27304.9 MB/s (0.1%)
 ARM STP fill                                         :  69792.4 MB/s (8.7%)
 ARM STNP fill                                        :  69813.5 MB/s (0.8%)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :  24945.3 MB/s
 NEON LDP/STP 2-pass copy (from framebuffer)          :  24747.4 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :  24939.8 MB/s
 NEON LD1/ST1 2-pass copy (from framebuffer)          :  24746.7 MB/s
 ARM LDP/STP copy (from framebuffer)                  :  24932.5 MB/s
 ARM LDP/STP 2-pass copy (from framebuffer)           :  24750.0 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    0.0 ns          /     0.0 ns 
    131072 :    0.0 ns          /     0.0 ns 
    262144 :    2.3 ns          /     3.5 ns 
    524288 :    3.5 ns          /     4.5 ns 
   1048576 :    4.1 ns          /     4.9 ns 
   2097152 :    4.3 ns          /     5.0 ns 
   4194304 :    5.2 ns          /     5.9 ns 
   8388608 :    8.2 ns          /    10.4 ns 
  16777216 :   34.4 ns          /    56.4 ns 
  33554432 :   72.4 ns          /   103.6 ns 
  67108864 :   99.8 ns          /   126.1 ns 

Executing benchmark on cpu6:

tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :  24653.5 MB/s
 C copy backwards (32 byte blocks)                    :  24636.3 MB/s
 C copy backwards (64 byte blocks)                    :  24637.5 MB/s
 C copy                                               :  24725.8 MB/s
 C copy prefetched (32 bytes step)                    :  24781.1 MB/s
 C copy prefetched (64 bytes step)                    :  24782.5 MB/s
 C 2-pass copy                                        :  19884.7 MB/s
 C 2-pass copy prefetched (32 bytes step)             :  20430.1 MB/s (0.1%)
 C 2-pass copy prefetched (64 bytes step)             :  20776.5 MB/s (0.1%)
 C fill                                               :  41726.0 MB/s
 C fill (shuffle within 16 byte blocks)               :  41762.7 MB/s (0.2%)
 C fill (shuffle within 32 byte blocks)               :  39845.3 MB/s
 C fill (shuffle within 64 byte blocks)               :  38584.0 MB/s
 ---
 standard memcpy                                      :  27112.0 MB/s (0.2%)
 standard memset                                      :  71913.6 MB/s (8.9%)
 ---
 NEON LDP/STP copy                                    :  27376.4 MB/s (0.2%)
 NEON LDP/STP copy pldl2strm (32 bytes step)          :  28211.4 MB/s (0.1%)
 NEON LDP/STP copy pldl2strm (64 bytes step)          :  28072.1 MB/s
 NEON LDP/STP copy pldl1keep (32 bytes step)          :  27097.2 MB/s (0.1%)
 NEON LDP/STP copy pldl1keep (64 bytes step)          :  27130.6 MB/s
 NEON LD1/ST1 copy                                    :  27294.9 MB/s
 NEON STP fill                                        :  71683.1 MB/s (9.0%)
 NEON STNP fill                                       :  71815.8 MB/s (1.5%)
 ARM LDP/STP copy                                     :  27375.4 MB/s (0.2%)
 ARM STP fill                                         :  71974.1 MB/s (9.0%)
 ARM STNP fill                                        :  71920.8 MB/s (1.1%)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :  24933.4 MB/s
 NEON LDP/STP 2-pass copy (from framebuffer)          :  24741.6 MB/s
 NEON LD1/ST1 copy (from framebuffer)                 :  24951.2 MB/s
 NEON LD1/ST1 2-pass copy (from framebuffer)          :  24740.0 MB/s
 ARM LDP/STP copy (from framebuffer)                  :  24947.0 MB/s
 ARM LDP/STP 2-pass copy (from framebuffer)           :  24738.0 MB/s

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    0.0 ns          /     0.0 ns 
    131072 :    0.0 ns          /     0.0 ns 
    262144 :    2.3 ns          /     3.5 ns 
    524288 :    3.5 ns          /     4.5 ns 
   1048576 :    4.1 ns          /     4.9 ns 
   2097152 :    4.4 ns          /     5.0 ns 
   4194304 :    5.2 ns          /     5.9 ns 
   8388608 :    6.5 ns          /     7.6 ns 
  16777216 :   34.0 ns          /    55.5 ns 
  33554432 :   72.3 ns          /   102.4 ns 
  67108864 :   99.7 ns          /   125.1 ns 

##########################################################################

Executing ramlat on cpu0, results in ns:

       size:  1x32  2x32  1x64  2x64 1xPTR 2xPTR 4xPTR 8xPTR
         4k: 1.941 1.942 1.941 1.941 1.456 1.456 2.360 4.849 
         8k: 1.941 1.941 1.941 1.941 1.456 1.456 2.443 5.185 
        16k: 1.941 1.941 1.941 1.941 1.456 1.456 2.439 5.165 
        32k: 1.941 1.941 1.942 1.941 1.456 1.457 2.434 5.212 
        64k: 1.951 1.947 1.951 1.947 1.464 1.464 2.440 5.220 
       128k: 7.523 7.916 7.523 7.913 7.038 7.449 9.415 13.63 
       256k: 7.525 8.096 7.523 8.075 7.039 7.487 9.528 13.69 
       512k: 7.523 8.085 7.523 8.072 7.038 7.501 9.564 13.68 
      1024k: 7.525 8.104 7.525 8.100 7.038 7.509 9.543 13.69 
      2048k: 7.609 8.263 7.609 8.268 7.127 7.561 9.562 13.77 
      4096k: 71.05 56.64 71.09 56.56 70.71 71.85 73.98 80.72 
      8192k: 120.6 119.2 120.7 120.9 120.3 121.6 123.7 128.9 
     16384k: 121.8 122.2 121.7 122.0 121.4 122.2 124.4 129.8 

Executing ramlat on cpu2, results in ns:

       size:  1x32  2x32  1x64  2x64 1xPTR 2xPTR 4xPTR 8xPTR
         4k: 1.319 1.318 1.319 1.319 0.989 0.989 1.257 2.270 
         8k: 1.319 1.319 1.319 1.319 0.989 0.989 1.293 2.369 
        16k: 1.319 1.319 1.319 1.319 0.989 0.989 1.303 2.412 
        32k: 1.318 1.319 1.318 1.320 0.989 0.989 1.300 2.417 
        64k: 1.319 1.319 1.318 1.319 0.989 0.989 1.292 2.420 
       128k: 1.327 1.323 1.327 1.322 0.996 0.994 1.310 2.456 
       256k: 5.934 5.991 5.933 5.990 5.933 5.960 6.109 6.864 
       512k: 5.935 6.028 5.934 6.029 5.934 5.988 6.210 6.989 
      1024k: 5.948 6.039 5.934 6.040 5.934 6.077 6.391 7.075 
      2048k: 5.949 6.045 5.935 6.043 5.934 6.137 6.585 7.182 
      4096k: 7.959 8.226 7.930 8.221 7.941 7.621 7.607 9.147 
      8192k: 22.44 18.14 22.20 18.47 22.17 22.31 22.66 22.79 
     16384k: 91.48 75.59 91.89 75.00 91.27 92.90 94.44 96.05 

Executing ramlat on cpu6, results in ns:

       size:  1x32  2x32  1x64  2x64 1xPTR 2xPTR 4xPTR 8xPTR
         4k: 1.319 1.319 1.319 1.319 0.992 0.989 1.296 2.270 
         8k: 1.319 1.319 1.319 1.319 0.992 0.989 1.347 2.369 
        16k: 1.319 1.319 1.319 1.319 0.992 0.989 1.360 2.412 
        32k: 1.318 1.319 1.319 1.318 0.993 0.989 1.361 2.418 
        64k: 1.318 1.319 1.318 1.318 0.992 0.989 1.354 2.420 
       128k: 1.327 1.322 1.326 1.322 0.998 0.994 1.374 2.456 
       256k: 5.929 5.994 5.928 5.988 5.932 5.966 6.108 6.862 
       512k: 5.938 6.025 5.934 6.026 5.934 5.986 6.205 6.989 
      1024k: 5.945 6.040 5.935 6.039 5.934 6.077 6.391 7.076 
      2048k: 5.955 6.041 5.936 6.044 5.934 6.137 6.583 7.167 
      4096k: 7.993 8.153 7.933 8.153 7.953 7.620 7.595 9.117 
      8192k: 24.89 19.84 24.67 19.67 24.62 24.77 25.09 25.72 
     16384k: 90.50 76.94 90.78 76.90 90.94 91.57 92.89 95.15 

##########################################################################

Executing benchmark on each cluster individually

OpenSSL 1.1.1q, built on 5 Jul 2022
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes
aes-128-cbc     540464.50k   873160.49k  1032379.22k  1081641.98k  1096777.73k  1097979.22k
aes-128-cbc     620896.23k  1352977.37k  1444702.04k  1480279.72k  1486708.74k  1489092.61k
aes-128-cbc     620959.11k  1353109.57k  1444754.26k  1480206.68k  1486651.39k  1488988.84k
aes-192-cbc     484797.02k   751469.01k   868421.29k   903336.96k   914246.31k   915128.32k
aes-192-cbc     577763.48k  1121748.78k  1219234.56k  1234825.56k  1241492.14k  1241770.67k
aes-192-cbc     577740.05k  1121719.27k  1219303.59k  1234923.86k  1241432.06k  1241787.05k
aes-256-cbc     451658.89k   660938.86k   749823.57k   775807.66k   783881.56k   784427.69k
aes-256-gcm     956229.68k  2615922.79k  3801541.03k  3607696.73k  3742670.85k  3608657.92k
aes-256-cbc     847456.52k   994584.28k  1043034.71k  1053404.84k  1063583.74k  1064397.48k
aes-256-gcm     956377.11k  2616099.93k  3801410.56k  3607726.76k  3717485.91k  3608679.77k
aes-256-cbc     847728.67k   994629.25k  1042905.34k  1053417.47k  1063586.47k  1064446.63k
aes-256-gcm     956306.63k  2615562.88k  3801547.35k  3607904.94k  3740775.77k  3608870.91k
aes-256-cbc     847234.75k   994783.19k  1042915.58k  1053261.48k  1063425.37k  1064108.03k (fully parallel)
aes-256-cbc     847078.17k   994347.24k  1042353.07k  1053007.87k  1062969.34k  1063469.06k (fully parallel)
aes-256-cbc     846995.82k   994310.98k  1041948.84k  1052874.75k  1062966.61k  1063671.13k (fully parallel)
aes-256-cbc     846534.84k   993922.26k  1042288.04k  1052640.94k  1062316.71k  1063922.35k (fully parallel)
aes-256-cbc     846497.90k   994313.22k  1041708.54k  1052858.03k  1062608.90k  1063627.43k (fully parallel)
aes-256-cbc     846343.15k   994669.70k  1042842.62k  1053250.56k  1063324.33k  1063976.96k (fully parallel)
aes-256-cbc     846332.35k   994072.55k  1042773.08k  1053116.07k  1062524.25k  1064053.42k (fully parallel)
aes-256-cbc     845864.62k   994294.78k  1042493.27k  1053012.65k  1063034.88k  1063567.36k (fully parallel)
aes-256-cbc     451217.64k   660908.78k   749154.90k   775640.41k   783409.15k   784171.01k (fully parallel)
aes-256-cbc     448026.10k   660994.28k   748935.25k   776011.43k   783420.07k   784384.00k (fully parallel)
aes-256-gcm     956281.06k  2615456.49k  3801256.79k  3608015.19k  3749259.95k  3608139.09k (fully parallel)
aes-256-gcm     956234.26k  2613919.87k  3800511.32k  3606585.69k  3720587.95k  3607407.27k (fully parallel)
aes-256-gcm     955885.90k  2615586.28k  3799812.69k  3608017.58k  3714304.68k  3608565.08k (fully parallel)
aes-256-gcm     955877.13k  2614514.79k  3799443.03k  3606488.41k  3737406.12k  3607194.28k (fully parallel)
aes-256-gcm     955790.87k  2614727.40k  3799107.93k  3606440.28k  3725595.99k  3606129.32k (fully parallel)
aes-256-gcm     955541.09k  2614284.50k  3799737.43k  3606483.63k  3748801.19k  3606855.68k (fully parallel)
aes-256-gcm     955406.90k  2614084.44k  3798016.51k  3605712.90k  3716797.78k  3605605.03k (fully parallel)
aes-256-gcm     955397.63k  2613446.63k  3798945.45k  3605647.02k  3712655.36k  3605998.25k (fully parallel)
aes-256-gcm     265697.21k   753023.21k  1225196.03k  1444177.24k  1522649.77k  1527496.70k (fully parallel)
aes-256-gcm     265498.79k   752799.10k  1224597.33k  1443773.44k  1522346.67k  1527458.47k (fully parallel)

##########################################################################

Executing benchmark single-threaded on cpu0

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,10 CPUs LE)

LE
CPU Freq:  2056  2060  2060  2060  2060  2060  2060  2060  2060

RAM size:   15658 MB,  # CPU hardware threads:  10
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       2843   100   2771   2766  |      32619   100   2790   2785
23:       2665   100   2721   2715  |      32074   100   2781   2776
24:       2540   100   2737   2732  |      31391   100   2761   2756
25:       2459   100   2814   2808  |      30581   100   2727   2722
----------------------------------  | ------------------------------
Avr:             100   2761   2755  |              100   2765   2760
Tot:             100   2763   2758

Executing benchmark single-threaded on cpu2

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,10 CPUs LE)

LE
CPU Freq:  3032  3032  3033  3033  3033  3033  3033  3032  3033

RAM size:   15658 MB,  # CPU hardware threads:  10
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       6272   100   6107   6101  |      53993   100   4614   4610
23:       5314   100   5420   5414  |      53608   100   4644   4640
24:       4720   100   5080   5075  |      52820   100   4641   4637
25:       4376   100   5002   4997  |      51700   100   4605   4602
----------------------------------  | ------------------------------
Avr:             100   5402   5397  |              100   4626   4622
Tot:             100   5014   5010

Executing benchmark single-threaded on cpu6

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,10 CPUs LE)

LE
CPU Freq:  3032  3033  3032  3033  3033  3033  3033  3033  3033

RAM size:   15658 MB,  # CPU hardware threads:  10
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       6235   100   6071   6066  |      53978   100   4613   4609
23:       5318   100   5424   5419  |      53565   100   4641   4637
24:       4729   100   5090   5085  |      52775   100   4637   4633
25:       4380   100   5007   5001  |      51742   100   4610   4605
----------------------------------  | ------------------------------
Avr:             100   5398   5393  |              100   4625   4621
Tot:             100   5011   5007

##########################################################################

Executing benchmark 3 times multi-threaded on CPUs 0-9

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,10 CPUs LE)

LE
CPU Freq:  3028  3032  3033  3033  3033  3033  3033  3033  3033

RAM size:   15658 MB,  # CPU hardware threads:  10
RAM usage:   2206 MB,  # Benchmark threads:     10

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:      56531   917   5995  54994  |     385073   774   4241  32844
23:      53316   914   5942  54323  |     379527   776   4234  32842
24:      52146   935   5999  56068  |     372082   776   4209  32654
25:      47719   865   6298  54485  |     364500   777   4175  32441
----------------------------------  | ------------------------------
Avr:             908   6058  54967  |              776   4215  32695
Tot:             842   5136  43831

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,10 CPUs LE)

LE
CPU Freq:  3030  3032  3033  3033  3033  3033  3033  3032  3032

RAM size:   15658 MB,  # CPU hardware threads:  10
RAM usage:   2206 MB,  # Benchmark threads:     10

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:      56550   916   6009  55012  |     383105   771   4240  32676
23:      52693   904   5937  53689  |     379650   776   4235  32852
24:      49668   889   6006  53403  |     372165   776   4209  32661
25:      49653   898   6311  56693  |     364574   777   4177  32448
----------------------------------  | ------------------------------
Avr:             902   6066  54699  |              775   4215  32659
Tot:             838   5140  43679

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,10 CPUs LE)

LE
CPU Freq:  3030  3033  3028  3033  3033  3033  3032  3033  3033

RAM size:   15658 MB,  # CPU hardware threads:  10
RAM usage:   2206 MB,  # Benchmark threads:     10

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:      54395   852   6209  52916  |     384881   774   4240  32828
23:      52929   903   5971  53929  |     378606   774   4232  32762
24:      50394   896   6047  54184  |     372025   776   4208  32649
25:      51911   944   6278  59270  |     365853   779   4182  32561
----------------------------------  | ------------------------------
Avr:             899   6126  55075  |              776   4216  32700
Tot:             837   5171  43887

Compression: 54967,54699,55075
Decompression: 32695,32659,32700
Total: 43831,43679,43887

##########################################################################

##########################################################################

** cpuminer-multi 1.3.7 by tpruvot@github **
BTC donation address: 1FhDPLPpw18X4srecguG3MxJYe4a1JsZnd (tpruvot)

[2022-07-11 21:10:45] 10 miner threads started, using 'scrypt' algorithm.
[2022-07-11 21:10:45] CPU #2: 5.34 kH/s
[2022-07-11 21:10:45] CPU #4: 5.35 kH/s
[2022-07-11 21:10:45] CPU #5: 5.35 kH/s
[2022-07-11 21:10:45] CPU #7: 5.35 kH/s
[2022-07-11 21:10:45] CPU #6: 5.34 kH/s
[2022-07-11 21:10:45] CPU #9: 5.33 kH/s
[2022-07-11 21:10:45] CPU #3: 5.25 kH/s
[2022-07-11 21:10:45] CPU #8: 5.35 kH/s
[2022-07-11 21:10:45] CPU #1: 2.73 kH/s
[2022-07-11 21:10:45] CPU #0: 2.72 kH/s
[2022-07-11 21:10:50] Total: 48.23 kH/s
[2022-07-11 21:10:55] CPU #3: 5.35 kH/s
[2022-07-11 21:10:55] CPU #9: 5.35 kH/s
[2022-07-11 21:10:55] Total: 48.28 kH/s
[2022-07-11 21:10:55] CPU #2: 5.35 kH/s
[2022-07-11 21:10:55] CPU #6: 5.35 kH/s
[2022-07-11 21:10:55] CPU #5: 5.35 kH/s
[2022-07-11 21:10:55] CPU #7: 5.35 kH/s
[2022-07-11 21:10:55] CPU #4: 5.35 kH/s
[2022-07-11 21:10:55] CPU #8: 5.35 kH/s
[2022-07-11 21:10:55] CPU #0: 2.73 kH/s
[2022-07-11 21:10:55] CPU #1: 2.73 kH/s
[2022-07-11 21:11:00] Total: 48.29 kH/s
[2022-07-11 21:11:05] CPU #3: 5.36 kH/s
[2022-07-11 21:11:05] CPU #9: 5.35 kH/s
[2022-07-11 21:11:05] Total: 48.29 kH/s
[2022-07-11 21:11:05] CPU #2: 5.35 kH/s
[2022-07-11 21:11:05] CPU #6: 5.35 kH/s
[2022-07-11 21:11:05] CPU #5: 5.35 kH/s
[2022-07-11 21:11:05] CPU #7: 5.35 kH/s
[2022-07-11 21:11:05] CPU #4: 5.35 kH/s
[2022-07-11 21:11:05] CPU #8: 5.35 kH/s
[2022-07-11 21:11:05] CPU #0: 2.73 kH/s
[2022-07-11 21:11:05] CPU #1: 2.73 kH/s
[2022-07-11 21:11:10] Total: 48.29 kH/s
[2022-07-11 21:11:15] CPU #3: 5.36 kH/s
[2022-07-11 21:11:15] CPU #9: 5.35 kH/s
[2022-07-11 21:11:15] Total: 48.29 kH/s
[2022-07-11 21:11:15] CPU #2: 5.36 kH/s
[2022-07-11 21:11:15] CPU #6: 5.35 kH/s
[2022-07-11 21:11:15] CPU #5: 5.35 kH/s
[2022-07-11 21:11:15] CPU #7: 5.35 kH/s
[2022-07-11 21:11:15] CPU #4: 5.35 kH/s
[2022-07-11 21:11:15] CPU #8: 5.35 kH/s
[2022-07-11 21:11:15] CPU #0: 2.73 kH/s
[2022-07-11 21:11:15] CPU #1: 2.73 kH/s
[2022-07-11 21:11:20] Total: 48.29 kH/s
[2022-07-11 21:11:25] CPU #3: 5.36 kH/s
[2022-07-11 21:11:25] CPU #9: 5.35 kH/s
[2022-07-11 21:11:25] Total: 48.29 kH/s
[2022-07-11 21:11:25] CPU #2: 5.35 kH/s
[2022-07-11 21:11:25] CPU #6: 5.35 kH/s
[2022-07-11 21:11:25] CPU #5: 5.35 kH/s
[2022-07-11 21:11:25] CPU #7: 5.35 kH/s
[2022-07-11 21:11:25] CPU #4: 5.35 kH/s
[2022-07-11 21:11:25] CPU #8: 5.35 kH/s
[2022-07-11 21:11:25] CPU #0: 2.73 kH/s
[2022-07-11 21:11:25] CPU #1: 2.73 kH/s
[2022-07-11 21:11:30] Total: 48.29 kH/s
[2022-07-11 21:11:35] CPU #3: 5.35 kH/s
[2022-07-11 21:11:35] CPU #9: 5.35 kH/s
[2022-07-11 21:11:35] Total: 48.28 kH/s
[2022-07-11 21:11:35] CPU #2: 5.35 kH/s
[2022-07-11 21:11:35] CPU #6: 5.35 kH/s
[2022-07-11 21:11:35] CPU #5: 5.35 kH/s
[2022-07-11 21:11:35] CPU #7: 5.35 kH/s
[2022-07-11 21:11:35] CPU #4: 5.35 kH/s
[2022-07-11 21:11:35] CPU #8: 5.35 kH/s
[2022-07-11 21:11:35] CPU #0: 2.73 kH/s
[2022-07-11 21:11:35] CPU #1: 2.73 kH/s
[2022-07-11 21:11:40] Total: 48.28 kH/s
[2022-07-11 21:11:45] CPU #3: 5.36 kH/s
[2022-07-11 21:11:45] CPU #9: 5.35 kH/s
[2022-07-11 21:11:45] Total: 48.29 kH/s
[2022-07-11 21:11:45] CPU #2: 5.35 kH/s
[2022-07-11 21:11:45] CPU #6: 5.35 kH/s
[2022-07-11 21:11:45] CPU #5: 5.35 kH/s
[2022-07-11 21:11:45] CPU #7: 5.35 kH/s
[2022-07-11 21:11:45] CPU #4: 5.35 kH/s
[2022-07-11 21:11:45] CPU #8: 5.35 kH/s
[2022-07-11 21:11:45] CPU #0: 2.73 kH/s
[2022-07-11 21:11:45] CPU #1: 2.73 kH/s
[2022-07-11 21:11:50] Total: 48.29 kH/s
[2022-07-11 21:11:55] CPU #3: 5.36 kH/s
[2022-07-11 21:11:55] CPU #2: 5.36 kH/s
[2022-07-11 21:11:55] CPU #6: 5.35 kH/s
[2022-07-11 21:11:55] CPU #9: 5.35 kH/s
[2022-07-11 21:11:55] Total: 48.29 kH/s
[2022-07-11 21:11:55] CPU #5: 5.35 kH/s
[2022-07-11 21:11:55] CPU #7: 5.35 kH/s
[2022-07-11 21:11:55] CPU #4: 5.35 kH/s
[2022-07-11 21:11:55] CPU #8: 5.35 kH/s
[2022-07-11 21:11:55] CPU #0: 2.73 kH/s
[2022-07-11 21:11:55] CPU #1: 2.73 kH/s
[2022-07-11 21:12:00] Total: 48.29 kH/s
[2022-07-11 21:12:05] CPU #3: 5.36 kH/s
[2022-07-11 21:12:05] CPU #2: 5.35 kH/s
[2022-07-11 21:12:05] CPU #9: 5.35 kH/s
[2022-07-11 21:12:05] Total: 48.29 kH/s
[2022-07-11 21:12:05] CPU #6: 5.35 kH/s
[2022-07-11 21:12:05] CPU #5: 5.35 kH/s
[2022-07-11 21:12:05] CPU #7: 5.35 kH/s
[2022-07-11 21:12:05] CPU #4: 5.35 kH/s
[2022-07-11 21:12:05] CPU #8: 5.35 kH/s
[2022-07-11 21:12:05] CPU #0: 2.73 kH/s
[2022-07-11 21:12:05] CPU #1: 2.73 kH/s
[2022-07-11 21:12:10] Total: 48.28 kH/s
[2022-07-11 21:12:15] CPU #3: 5.36 kH/s
[2022-07-11 21:12:15] CPU #2: 5.35 kH/s
[2022-07-11 21:12:15] CPU #6: 5.35 kH/s
[2022-07-11 21:12:15] CPU #9: 5.35 kH/s
[2022-07-11 21:12:15] Total: 48.29 kH/s
[2022-07-11 21:12:15] CPU #5: 5.35 kH/s
[2022-07-11 21:12:15] CPU #7: 5.35 kH/s
[2022-07-11 21:12:15] CPU #4: 5.35 kH/s
[2022-07-11 21:12:15] CPU #8: 5.35 kH/s
[2022-07-11 21:12:15] CPU #0: 2.73 kH/s
[2022-07-11 21:12:15] CPU #1: 2.73 kH/s
[2022-07-11 21:12:20] Total: 48.28 kH/s
[2022-07-11 21:12:25] CPU #3: 5.36 kH/s
[2022-07-11 21:12:25] CPU #2: 5.35 kH/s
[2022-07-11 21:12:25] CPU #6: 5.35 kH/s
[2022-07-11 21:12:25] CPU #9: 5.35 kH/s
[2022-07-11 21:12:25] Total: 48.28 kH/s
[2022-07-11 21:12:25] CPU #5: 5.35 kH/s
[2022-07-11 21:12:25] CPU #7: 5.35 kH/s
[2022-07-11 21:12:25] CPU #4: 5.35 kH/s
[2022-07-11 21:12:25] CPU #8: 5.35 kH/s
[2022-07-11 21:12:25] CPU #0: 2.73 kH/s
[2022-07-11 21:12:25] CPU #1: 2.73 kH/s
[2022-07-11 21:12:30] Total: 48.29 kH/s
[2022-07-11 21:12:35] CPU #3: 5.36 kH/s
[2022-07-11 21:12:35] CPU #2: 5.35 kH/s
[2022-07-11 21:12:35] CPU #6: 5.35 kH/s
[2022-07-11 21:12:35] CPU #9: 5.35 kH/s
[2022-07-11 21:12:35] Total: 48.28 kH/s
[2022-07-11 21:12:35] CPU #5: 5.35 kH/s
[2022-07-11 21:12:35] CPU #7: 5.35 kH/s
[2022-07-11 21:12:35] CPU #4: 5.36 kH/s
[2022-07-11 21:12:35] CPU #8: 5.35 kH/s
[2022-07-11 21:12:35] CPU #0: 2.73 kH/s
[2022-07-11 21:12:35] CPU #1: 2.73 kH/s
[2022-07-11 21:12:40] Total: 48.29 kH/s
[2022-07-11 21:12:45] CPU #3: 5.36 kH/s
[2022-07-11 21:12:45] CPU #2: 5.36 kH/s
[2022-07-11 21:12:45] CPU #6: 5.35 kH/s
[2022-07-11 21:12:45] CPU #9: 5.35 kH/s
[2022-07-11 21:12:45] Total: 48.29 kH/s
[2022-07-11 21:12:45] CPU #5: 5.35 kH/s
[2022-07-11 21:12:45] CPU #7: 5.35 kH/s
[2022-07-11 21:12:45] CPU #4: 5.35 kH/s
[2022-07-11 21:12:45] CPU #8: 5.35 kH/s
[2022-07-11 21:12:45] CPU #0: 2.73 kH/s
[2022-07-11 21:12:45] CPU #1: 2.73 kH/s
[2022-07-11 21:12:50] Total: 48.29 kH/s
[2022-07-11 21:12:55] CPU #3: 5.36 kH/s
[2022-07-11 21:12:55] CPU #2: 5.36 kH/s
[2022-07-11 21:12:55] CPU #6: 5.35 kH/s
[2022-07-11 21:12:55] CPU #9: 5.35 kH/s
[2022-07-11 21:12:55] Total: 48.29 kH/s
[2022-07-11 21:12:55] CPU #5: 5.35 kH/s
[2022-07-11 21:12:55] CPU #7: 5.35 kH/s
[2022-07-11 21:12:55] CPU #4: 5.35 kH/s
[2022-07-11 21:12:55] CPU #8: 5.35 kH/s
[2022-07-11 21:12:55] CPU #0: 2.73 kH/s
[2022-07-11 21:12:55] CPU #1: 2.73 kH/s
[2022-07-11 21:13:00] Total: 48.29 kH/s
[2022-07-11 21:13:05] CPU #3: 5.35 kH/s
[2022-07-11 21:13:05] CPU #2: 5.35 kH/s
[2022-07-11 21:13:05] CPU #6: 5.35 kH/s
[2022-07-11 21:13:05] CPU #9: 5.35 kH/s
[2022-07-11 21:13:05] Total: 48.28 kH/s
[2022-07-11 21:13:05] CPU #5: 5.35 kH/s
[2022-07-11 21:13:05] CPU #7: 5.35 kH/s
[2022-07-11 21:13:05] CPU #4: 5.35 kH/s
[2022-07-11 21:13:05] CPU #8: 5.35 kH/s
[2022-07-11 21:13:05] CPU #0: 2.73 kH/s
[2022-07-11 21:13:05] CPU #1: 2.73 kH/s
[2022-07-11 21:13:10] Total: 48.28 kH/s
[2022-07-11 21:13:15] CPU #3: 5.36 kH/s
[2022-07-11 21:13:15] CPU #2: 5.35 kH/s
[2022-07-11 21:13:15] CPU #6: 5.35 kH/s
[2022-07-11 21:13:15] CPU #9: 5.35 kH/s
[2022-07-11 21:13:15] Total: 48.29 kH/s
[2022-07-11 21:13:15] CPU #5: 5.35 kH/s
[2022-07-11 21:13:15] CPU #7: 5.35 kH/s
[2022-07-11 21:13:15] CPU #4: 5.35 kH/s
[2022-07-11 21:13:15] CPU #8: 5.35 kH/s
[2022-07-11 21:13:15] CPU #0: 2.73 kH/s
[2022-07-11 21:13:15] CPU #1: 2.73 kH/s
[2022-07-11 21:13:20] Total: 48.29 kH/s
[2022-07-11 21:13:25] CPU #3: 5.35 kH/s
[2022-07-11 21:13:25] CPU #2: 5.36 kH/s
[2022-07-11 21:13:25] CPU #6: 5.35 kH/s
[2022-07-11 21:13:25] CPU #9: 5.35 kH/s
[2022-07-11 21:13:25] Total: 48.29 kH/s
[2022-07-11 21:13:25] CPU #5: 5.35 kH/s
[2022-07-11 21:13:25] CPU #7: 5.35 kH/s
[2022-07-11 21:13:25] CPU #4: 5.35 kH/s
[2022-07-11 21:13:25] CPU #8: 5.35 kH/s
[2022-07-11 21:13:25] CPU #0: 2.73 kH/s
[2022-07-11 21:13:25] CPU #1: 2.73 kH/s
[2022-07-11 21:13:30] Total: 48.29 kH/s
[2022-07-11 21:13:35] CPU #3: 5.36 kH/s
[2022-07-11 21:13:35] CPU #2: 5.35 kH/s
[2022-07-11 21:13:35] CPU #6: 5.35 kH/s
[2022-07-11 21:13:35] CPU #9: 5.35 kH/s
[2022-07-11 21:13:35] Total: 48.29 kH/s
[2022-07-11 21:13:35] CPU #5: 5.35 kH/s
[2022-07-11 21:13:35] CPU #7: 5.35 kH/s
[2022-07-11 21:13:35] CPU #4: 5.35 kH/s
[2022-07-11 21:13:35] CPU #8: 5.35 kH/s
[2022-07-11 21:13:35] CPU #0: 2.73 kH/s
[2022-07-11 21:13:35] CPU #1: 2.73 kH/s
[2022-07-11 21:13:40] Total: 48.29 kH/s
[2022-07-11 21:13:45] CPU #3: 5.35 kH/s
[2022-07-11 21:13:45] CPU #2: 5.35 kH/s
[2022-07-11 21:13:45] CPU #6: 5.35 kH/s
[2022-07-11 21:13:45] CPU #9: 5.35 kH/s
[2022-07-11 21:13:45] Total: 48.29 kH/s
[2022-07-11 21:13:45] CPU #5: 5.35 kH/s
[2022-07-11 21:13:45] CPU #7: 5.35 kH/s
[2022-07-11 21:13:45] CPU #4: 5.35 kH/s
[2022-07-11 21:13:45] CPU #8: 5.35 kH/s
[2022-07-11 21:13:45] CPU #0: 2.73 kH/s
[2022-07-11 21:13:45] CPU #1: 2.73 kH/s
[2022-07-11 21:13:50] Total: 48.28 kH/s
[2022-07-11 21:13:55] CPU #3: 5.36 kH/s
[2022-07-11 21:13:55] CPU #2: 5.35 kH/s
[2022-07-11 21:13:55] CPU #6: 5.35 kH/s
[2022-07-11 21:13:55] CPU #9: 5.35 kH/s
[2022-07-11 21:13:55] Total: 48.28 kH/s
[2022-07-11 21:13:55] CPU #5: 5.35 kH/s
[2022-07-11 21:13:55] CPU #7: 5.35 kH/s
[2022-07-11 21:13:55] CPU #4: 5.35 kH/s
[2022-07-11 21:13:55] CPU #8: 5.35 kH/s
[2022-07-11 21:13:55] CPU #0: 2.73 kH/s
[2022-07-11 21:13:55] CPU #1: 2.73 kH/s
[2022-07-11 21:14:00] Total: 48.29 kH/s
[2022-07-11 21:14:05] CPU #3: 5.36 kH/s
[2022-07-11 21:14:05] CPU #2: 5.35 kH/s
[2022-07-11 21:14:05] CPU #6: 5.35 kH/s
[2022-07-11 21:14:05] CPU #9: 5.35 kH/s
[2022-07-11 21:14:05] Total: 48.29 kH/s
[2022-07-11 21:14:05] CPU #5: 5.35 kH/s
[2022-07-11 21:14:05] CPU #7: 5.35 kH/s
[2022-07-11 21:14:05] CPU #4: 5.35 kH/s
[2022-07-11 21:14:05] CPU #8: 5.35 kH/s
[2022-07-11 21:14:05] CPU #0: 2.73 kH/s
[2022-07-11 21:14:05] CPU #1: 2.73 kH/s
[2022-07-11 21:14:10] Total: 48.29 kH/s
[2022-07-11 21:14:15] CPU #3: 5.36 kH/s
[2022-07-11 21:14:15] CPU #2: 5.35 kH/s
[2022-07-11 21:14:15] CPU #6: 5.35 kH/s
[2022-07-11 21:14:15] CPU #9: 5.35 kH/s
[2022-07-11 21:14:15] Total: 48.29 kH/s
[2022-07-11 21:14:15] CPU #5: 5.35 kH/s
[2022-07-11 21:14:15] CPU #7: 5.35 kH/s
[2022-07-11 21:14:15] CPU #4: 5.35 kH/s
[2022-07-11 21:14:15] CPU #8: 5.35 kH/s
[2022-07-11 21:14:15] CPU #0: 2.73 kH/s
[2022-07-11 21:14:15] CPU #1: 2.73 kH/s
[2022-07-11 21:14:20] Total: 48.29 kH/s
[2022-07-11 21:14:25] CPU #3: 5.36 kH/s
[2022-07-11 21:14:25] CPU #2: 5.36 kH/s
[2022-07-11 21:14:25] CPU #6: 5.35 kH/s
[2022-07-11 21:14:25] CPU #9: 5.35 kH/s
[2022-07-11 21:14:25] Total: 48.29 kH/s
[2022-07-11 21:14:25] CPU #5: 5.35 kH/s
[2022-07-11 21:14:25] CPU #7: 5.35 kH/s
[2022-07-11 21:14:25] CPU #4: 5.35 kH/s
[2022-07-11 21:14:25] CPU #8: 5.35 kH/s
[2022-07-11 21:14:25] CPU #0: 2.73 kH/s
[2022-07-11 21:14:25] CPU #1: 2.73 kH/s
[2022-07-11 21:14:30] Total: 48.28 kH/s
[2022-07-11 21:14:35] CPU #3: 5.35 kH/s
[2022-07-11 21:14:35] CPU #2: 5.35 kH/s
[2022-07-11 21:14:35] CPU #6: 5.35 kH/s
[2022-07-11 21:14:35] CPU #9: 5.35 kH/s
[2022-07-11 21:14:35] Total: 48.28 kH/s
[2022-07-11 21:14:35] CPU #7: 5.35 kH/s
[2022-07-11 21:14:35] CPU #5: 5.35 kH/s
[2022-07-11 21:14:35] CPU #4: 5.35 kH/s
[2022-07-11 21:14:35] CPU #8: 5.35 kH/s
[2022-07-11 21:14:35] CPU #0: 2.73 kH/s
[2022-07-11 21:14:35] CPU #1: 2.73 kH/s
[2022-07-11 21:14:40] Total: 48.28 kH/s
[2022-07-11 21:14:45] CPU #3: 5.36 kH/s
[2022-07-11 21:14:45] CPU #2: 5.35 kH/s
[2022-07-11 21:14:45] CPU #6: 5.35 kH/s
[2022-07-11 21:14:45] CPU #9: 5.35 kH/s
[2022-07-11 21:14:45] Total: 48.29 kH/s
[2022-07-11 21:14:45] CPU #5: 5.35 kH/s
[2022-07-11 21:14:45] CPU #7: 5.35 kH/s
[2022-07-11 21:14:45] CPU #4: 5.35 kH/s
[2022-07-11 21:14:45] CPU #8: 5.35 kH/s
[2022-07-11 21:14:45] CPU #0: 2.73 kH/s
[2022-07-11 21:14:45] CPU #1: 2.73 kH/s
[2022-07-11 21:14:50] Total: 48.28 kH/s
[2022-07-11 21:14:55] CPU #3: 5.35 kH/s
[2022-07-11 21:14:55] CPU #2: 5.36 kH/s
[2022-07-11 21:14:55] CPU #6: 5.35 kH/s
[2022-07-11 21:14:55] CPU #9: 5.35 kH/s
[2022-07-11 21:14:55] Total: 48.29 kH/s
[2022-07-11 21:14:55] CPU #5: 5.35 kH/s
[2022-07-11 21:14:55] CPU #7: 5.35 kH/s
[2022-07-11 21:14:55] CPU #4: 5.35 kH/s
[2022-07-11 21:14:55] CPU #8: 5.35 kH/s
[2022-07-11 21:14:55] CPU #0: 2.73 kH/s
[2022-07-11 21:14:55] CPU #1: 2.73 kH/s
[2022-07-11 21:15:00] Total: 48.29 kH/s
[2022-07-11 21:15:05] CPU #3: 5.36 kH/s
[2022-07-11 21:15:05] CPU #2: 5.36 kH/s
[2022-07-11 21:15:05] CPU #6: 5.35 kH/s
[2022-07-11 21:15:05] CPU #9: 5.35 kH/s
[2022-07-11 21:15:05] Total: 48.29 kH/s
[2022-07-11 21:15:05] CPU #7: 5.35 kH/s
[2022-07-11 21:15:05] CPU #5: 5.35 kH/s
[2022-07-11 21:15:05] CPU #4: 5.35 kH/s
[2022-07-11 21:15:05] CPU #8: 5.35 kH/s
[2022-07-11 21:15:05] CPU #0: 2.73 kH/s
[2022-07-11 21:15:05] CPU #1: 2.73 kH/s
[2022-07-11 21:15:10] Total: 48.29 kH/s
[2022-07-11 21:15:15] CPU #3: 5.35 kH/s
[2022-07-11 21:15:15] CPU #2: 5.35 kH/s
[2022-07-11 21:15:15] CPU #6: 5.35 kH/s
[2022-07-11 21:15:15] CPU #9: 5.35 kH/s
[2022-07-11 21:15:15] Total: 48.28 kH/s
[2022-07-11 21:15:15] CPU #5: 5.35 kH/s
[2022-07-11 21:15:15] CPU #7: 5.35 kH/s
[2022-07-11 21:15:15] CPU #4: 5.35 kH/s
[2022-07-11 21:15:15] CPU #8: 5.35 kH/s
[2022-07-11 21:15:15] CPU #0: 2.73 kH/s
[2022-07-11 21:15:15] CPU #1: 2.73 kH/s
[2022-07-11 21:15:20] Total: 48.28 kH/s
[2022-07-11 21:15:25] CPU #3: 5.36 kH/s
[2022-07-11 21:15:25] CPU #2: 5.36 kH/s
[2022-07-11 21:15:25] CPU #6: 5.35 kH/s
[2022-07-11 21:15:25] CPU #9: 5.35 kH/s
[2022-07-11 21:15:25] Total: 48.29 kH/s
[2022-07-11 21:15:25] CPU #7: 5.35 kH/s
[2022-07-11 21:15:25] CPU #5: 5.35 kH/s
[2022-07-11 21:15:25] CPU #4: 5.35 kH/s
[2022-07-11 21:15:25] CPU #8: 5.35 kH/s
[2022-07-11 21:15:25] CPU #0: 2.73 kH/s
[2022-07-11 21:15:25] CPU #1: 2.73 kH/s
[2022-07-11 21:15:30] Total: 48.29 kH/s
[2022-07-11 21:15:35] CPU #3: 5.35 kH/s
[2022-07-11 21:15:35] CPU #2: 5.36 kH/s
[2022-07-11 21:15:35] CPU #6: 5.35 kH/s
[2022-07-11 21:15:35] CPU #5: 5.35 kH/s
[2022-07-11 21:15:35] CPU #7: 5.35 kH/s
[2022-07-11 21:15:35] CPU #9: 5.35 kH/s
[2022-07-11 21:15:35] Total: 48.29 kH/s
[2022-07-11 21:15:35] CPU #4: 5.35 kH/s
[2022-07-11 21:15:35] CPU #8: 5.35 kH/s
[2022-07-11 21:15:35] CPU #0: 2.73 kH/s
[2022-07-11 21:15:35] CPU #1: 2.73 kH/s
[2022-07-11 21:15:40] Total: 48.29 kH/s
[2022-07-11 21:15:45] CPU #3: 5.36 kH/s

Total Scores: 48.29,48.28,48.23

##########################################################################

Testing maximum cpufreq again, still under full load. System health now:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
21:15:16: 3036/2064MHz 10.05 100%   0%  99%   0%   0%   0%     0°C

Checking cpufreq OPP for cpu0-cpu1:

Cpufreq OPP: 2064    Measured: 2061 (2061.796/2060.869/2060.827)

Checking cpufreq OPP for cpu2-cpu5:

Cpufreq OPP: 3036    Measured: 3032 (3033.522/3032.756/3031.407)

Checking cpufreq OPP for cpu6-cpu9:

Cpufreq OPP: 3036    Measured: 3033 (3033.778/3033.668/3033.449)

##########################################################################

Hardware sensors:

macsmc_ac-isa-0000
in0:          20.00 V  

macsmc_battery-virtual-0
temp1:        +33.2 C  

macsmc_battery-isa-0000
in0:          12.91 V  
temp:         +33.2 C  
curr1:         0.00 A  

/dev/nvme0n1:	37°C

##########################################################################

System health while running tinymembench:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
20:53:53: 3036/2064MHz  0.89  13%   1%  11%   0%   0%   0%    --
20:55:53: 3036/2064MHz  0.99  10%   0%   9%   0%   0%   0%    --
20:57:53: 3036/2064MHz  1.00  10%   0%   9%   0%   0%   0%    --
20:59:53: 3036/2064MHz  1.00  10%   0%   9%   0%   0%   0%    --
21:01:53: 3036/2064MHz  1.00  10%   0%   9%   0%   0%   0%    --

System health while running ramlat:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
21:02:32: 3036/2064MHz  1.00  13%   1%  11%   0%   0%   0%    --
21:02:41: 3036/2064MHz  1.00  10%   0%   9%   0%   0%   0%    --
21:02:50: 3036/2064MHz  1.00  10%   0%   9%   0%   0%   0%    --
21:02:59: 3036/2064MHz  1.00  10%   0%   9%   0%   0%   0%    --
21:03:08: 3036/2064MHz  1.00  10%   0%   9%   0%   0%   0%    --
21:03:17: 3036/2064MHz  1.00  10%   0%   9%   0%   0%   0%    --
21:03:26: 3036/2064MHz  1.00  10%   0%   9%   0%   0%   0%    --
21:03:35: 3036/2064MHz  1.00  10%   0%   9%   0%   0%   0%    --

System health while running OpenSSL benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
21:03:40: 3036/2064MHz  1.00  13%   1%  11%   0%   0%   0%    --
21:03:56: 3036/2064MHz  1.00  10%   0%   9%   0%   0%   0%    --
21:04:12: 3036/2064MHz  1.00  10%   0%   9%   0%   0%   0%    --
21:04:28: 3036/2064MHz  1.00  10%   0%   9%   0%   0%   0%    --
21:04:44: 3036/2064MHz  1.00  10%   0%   9%   0%   0%   0%    --
21:05:00: 3036/2064MHz  1.00  10%   0%   9%   0%   0%   0%    --
21:05:16: 3036/2064MHz  1.00  10%   0%   9%   0%   0%   0%    --
21:05:32: 3036/2064MHz  1.00  10%   0%   9%   0%   0%   0%    --
21:05:48: 3036/2064MHz  1.00  10%   0%   9%   0%   0%   0%    --
21:06:04: 3036/2064MHz  1.00  10%   0%   9%   0%   0%   0%    --
21:06:20: 3036/2064MHz  1.00  10%   0%   9%   0%   0%   0%    --
21:06:36: 3036/2064MHz  1.00  10%   0%   9%   0%   0%   0%    --
21:06:52: 3036/2064MHz  1.00  10%   0%   9%   0%   0%   0%    --
21:07:08: 3036/2064MHz  1.00  10%   0%   9%   0%   0%   0%    --

System health while running parallel OpenSSL benchmarks:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
21:07:21: 3036/2064MHz  1.80  13%   1%  11%   0%   0%   0%    --
21:07:29: 3036/2064MHz  2.54 100%   0%  99%   0%   0%   0%    --
21:07:34: 3036/2064MHz  3.76  90%   0%  90%   0%   0%   0%    --
21:07:38: 3036/2064MHz  3.46   0%   0%   0%   0%   0%   0%    --
21:07:46: 3036/2064MHz  3.98  53%   0%  53%   0%   0%   0%    --
21:07:54: 3036/2064MHz  4.54 100%   0%  99%   0%   0%   0%    --
21:08:00: 3036/2064MHz  5.46  87%   0%  87%   0%   0%   0%    --
21:08:04: 3036/2064MHz  5.02   0%   0%   0%   0%   0%   0%    --

System health while running 7-zip single core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
21:08:06: 3036/2064MHz  5.02  13%   1%  11%   0%   0%   0%    --
21:08:14: 3036/2064MHz  4.40  10%   0%   9%   0%   0%   0%    --
21:08:22: 3036/2064MHz  3.88  10%   0%   9%   0%   0%   0%    --
21:08:30: 3036/2064MHz  3.65  10%   0%   9%   0%   0%   0%    --
21:08:38: 3036/2064MHz  3.24  10%   0%   9%   0%   0%   0%    --
21:08:46: 3036/2064MHz  3.06  10%   0%   9%   0%   0%   0%    --
21:08:54: 3036/2064MHz  2.74  10%   0%   9%   0%   0%   0%    --
21:09:02: 3036/2064MHz  2.47  10%   0%   9%   0%   0%   0%    --
21:09:10: 3036/2064MHz  2.36  10%   0%   9%   0%   0%   0%    --
21:09:18: 3036/2064MHz  2.15  10%   0%   9%   0%   0%   0%    --
21:09:26: 3036/2064MHz  2.06  10%   0%   9%   0%   0%   0%    --
21:09:34: 3036/2064MHz  1.89  10%   0%   9%   0%   0%   0%    --

System health while running 7-zip multi core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
21:09:35: 3036/2064MHz  1.89  13%   1%  11%   0%   0%   0%    --
21:09:45: 3036/2064MHz  3.14  70%   0%  70%   0%   0%   0%    --
21:09:55: 3036/2064MHz  4.35  73%   0%  73%   0%   0%   0%    --
21:10:05: 3036/2064MHz  5.22  67%   0%  67%   0%   0%   0%    --
21:10:15: 3036/2064MHz  5.95  74%   0%  74%   0%   0%   0%    --
21:10:27: 3036/2064MHz  6.23  73%   0%  73%   0%   0%   0%    --
21:10:37: 3036/2064MHz  6.54  79%   0%  78%   0%   0%   0%    --

System health while running 7-zip cluster benchmarks:

System health while running cpuminer:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
21:10:50: 3036/2064MHz  7.01  13%   1%  12%   0%   0%   0%    --
21:11:35: 3036/2064MHz  8.67 100%   0%  99%   0%   0%   0%    --
21:12:19: 3036/2064MHz  9.32 100%   0%  99%   0%   0%   0%    --
21:13:03: 3036/2064MHz  9.72 100%   0%  99%   0%   0%   0%    --
21:13:48: 3036/2064MHz  9.96 100%   0%  99%   0%   0%   0%    --
21:14:33: 3036/2064MHz 10.02 100%   0%  99%   0%   0%   0%    --
21:15:16: 3036/2064MHz 10.05 100%   0%  99%   0%   0%   0%    --

##########################################################################

dmesg output while running the benchmarks:

[11528.674369] nvme0: Get Log Page(0x2), Invalid Log Page (sct 0x1 / sc 0x9) 
[12849.450652] nvme0: Get Log Page(0x2), Invalid Log Page (sct 0x1 / sc 0x9) 

##########################################################################

Linux 5.18.0-asahi-ARCH (usagi) 	07/11/22 	_aarch64_	(10 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          14.30    0.00    1.30    0.04    0.00   84.36

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
nvme0n1          12.63       236.04       747.87         0.00    3033008    9609824          0
nvme0n2           0.00         0.06         0.00         0.00        752          0          0
nvme0n3           0.01         0.17         0.00         0.00       2224          0          0

               total        used        free      shared  buff/cache   available
Mem:            15Gi       232Mi        14Gi        27Mi       173Mi        14Gi
Swap:           16Gi          0B        16Gi

Filename				Type		Size		Used		Priority
/dev/nvme0n1p6                          partition	16782416	0		-2

CPU sysfs topology (clusters, cpufreq members, clockspeeds)
                 cpufreq   min    max
 CPU    cluster  policy   speed  speed   core type
  0        0        0      600    2064       -
  1        0        0      600    2064       -
  2        1        2      600    3036       -
  3        1        2      600    3036       -
  4        1        2      600    3036       -
  5        1        2      600    3036       -
  6        2        6      600    3036       -
  7        2        6      600    3036       -
  8        2        6      600    3036       -
  9        2        6      600    3036       -

Architecture:                    aarch64
CPU op-mode(s):                  64-bit
Byte Order:                      Little Endian
CPU(s):                          10
On-line CPU(s) list:             0-9
Vendor ID:                       Apple
Model name:                      -
Model:                           0
Thread(s) per core:              1
Core(s) per socket:              2
Socket(s):                       1
Stepping:                        0x2
CPU(s) scaling MHz:              100%
CPU max MHz:                     2064.0000
CPU min MHz:                     600.0000
BogoMIPS:                        48.00
Flags:                           fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhp cpuid asimdrdm jscvt fcma lrcpc dcpop sha3 asimddp sha512 asimdfhm dit uscat ilrcpc flagm ssbs sb paca pacg dcpodp flagm2 frint
Model name:                      -
Model:                           0
Thread(s) per core:              1
Core(s) per socket:              4
Socket(s):                       2
Stepping:                        0x2
CPU(s) scaling MHz:              71%
CPU max MHz:                     3036.0000
CPU min MHz:                     600.0000
BogoMIPS:                        48.00
Flags:                           fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhp cpuid asimdrdm jscvt fcma lrcpc dcpop sha3 asimddp sha512 asimdfhm dit uscat ilrcpc flagm ssbs sb paca pacg dcpodp flagm2 frint
Vulnerability Itlb multihit:     Not affected
Vulnerability L1tf:              Not affected
Vulnerability Mds:               Not affected
Vulnerability Meltdown:          Not affected
Vulnerability Spec store bypass: Mitigation; Speculative Store Bypass disabled via prctl
Vulnerability Spectre v1:        Mitigation; __user pointer sanitization
Vulnerability Spectre v2:        Not affected
Vulnerability Srbds:             Not affected
Vulnerability Tsx async abort:   Not affected

Signature: 00001212121226262626
DT compat: apple,j314s
           apple,t6000
           apple,arm-platform
 Compiler: /usr/bin/gcc (Gentoo 12.1.1_p20220625 p8) 12.1.1 20220625 / aarch64-unknown-linux-gnu
 Userland: aarch64
   Kernel: 5.18.0-asahi-ARCH/aarch64
           CONFIG_HZ=1000
           CONFIG_HZ_1000=y
           CONFIG_PREEMPTION=y
           CONFIG_PREEMPT=y
           CONFIG_PREEMPT_BUILD=y
           CONFIG_PREEMPT_COUNT=y
           CONFIG_PREEMPT_DYNAMIC=y
           CONFIG_PREEMPT_NOTIFIERS=y
           CONFIG_PREEMPT_RCU=y
           xor: measuring software checksum speed
           xor: using function: arm64_neon (27927 MB/sec)

| Apple MacBook Pro (14-inch, M1 Pro, 2021) | 3036/2064 MHz | 5.18 | Gentoo Base System release 2.8 arm64/aarch64 | 43800 | 620960 | 1064450 | 27110 | 71910 | 48.28 |